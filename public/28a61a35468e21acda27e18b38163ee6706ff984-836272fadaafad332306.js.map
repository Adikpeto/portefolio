{"version":3,"file":"28a61a35468e21acda27e18b38163ee6706ff984-836272fadaafad332306.js","mappings":"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","sources":["webpack://myportefolioremarkesite/./src/components/menu/dataItem.js","webpack://myportefolioremarkesite/./src/components/menu/animate.jsx","webpack://myportefolioremarkesite/./src/components/menu/Image.js","webpack://myportefolioremarkesite/./src/components/menu/Item.js","webpack://myportefolioremarkesite/./src/components/menu/menu.js","webpack://myportefolioremarkesite/./node_modules/curtainsjs/src/utils/utils.js","webpack://myportefolioremarkesite/./node_modules/curtainsjs/src/core/Scene.js","webpack://myportefolioremarkesite/./node_modules/curtainsjs/src/utils/CacheManager.js","webpack://myportefolioremarkesite/./node_modules/curtainsjs/src/utils/CallbackQueueManager.js","webpack://myportefolioremarkesite/./node_modules/curtainsjs/src/core/Renderer.js","webpack://myportefolioremarkesite/./node_modules/curtainsjs/src/utils/ScrollManager.js","webpack://myportefolioremarkesite/./node_modules/curtainsjs/src/shaders/chunks/precision.medium.glsl.js","webpack://myportefolioremarkesite/./node_modules/curtainsjs/src/shaders/chunks/default.attributes.glsl.js","webpack://myportefolioremarkesite/./node_modules/curtainsjs/src/shaders/chunks/default.varyings.glsl.js","webpack://myportefolioremarkesite/./node_modules/curtainsjs/src/shaders/plane.vertex.glsl.js","webpack://myportefolioremarkesite/./node_modules/curtainsjs/src/shaders/plane.fragment.glsl.js","webpack://myportefolioremarkesite/./node_modules/curtainsjs/src/shaders/shaderpass.vertex.glsl.js","webpack://myportefolioremarkesite/./node_modules/curtainsjs/src/shaders/shaderpass.fragment.glsl.js","webpack://myportefolioremarkesite/./node_modules/curtainsjs/src/math/Mat4.js","webpack://myportefolioremarkesite/./node_modules/curtainsjs/src/math/Vec2.js","webpack://myportefolioremarkesite/./node_modules/curtainsjs/src/math/Vec3.js","webpack://myportefolioremarkesite/./node_modules/curtainsjs/src/core/Texture.js","webpack://myportefolioremarkesite/./node_modules/curtainsjs/src/core/DOMMesh.js","webpack://myportefolioremarkesite/./node_modules/curtainsjs/src/math/Quat.js","webpack://myportefolioremarkesite/./node_modules/curtainsjs/src/core/Plane.js","webpack://myportefolioremarkesite/./src/contexts/appContext.jsx","webpack://myportefolioremarkesite/./node_modules/curtainsjs/src/core/Curtains.js","webpack://myportefolioremarkesite/./src/components/layout/layout.jsx","webpack://myportefolioremarkesite/./node_modules/gsap/CSSPlugin.js","webpack://myportefolioremarkesite/./node_modules/gsap/index.js"],"sourcesContent":["export const itemsList = [\r\n    {\r\n        title:\"acceuil\",\r\n        route:\"/\",\r\n        imgUrl:1\r\n    },\r\n    {\r\n        title:\"portefolio\",\r\n        route:\"/porteFolio\",\r\n        imgUrl:3\r\n    },\r\n    {\r\n        title:\"contacts\",\r\n        route:\"contacts\",\r\n        imgUrl:4\r\n    }\r\n]","\r\nconst easing = {\r\n  linear: t => t,\r\n  easeInQuart: t => t * t * t * t\r\n}\r\n\r\nfunction getValue(start, end, elapsed, duration, easeMethod) {\r\n  if (elapsed > duration) return end\r\n  return start + (end - start) * easing[easeMethod](elapsed / duration)\r\n}\r\nfunction animate({\r\n  fromValue,\r\n  toValue,\r\n  onUpdate,\r\n  onComplete,\r\n  duration,\r\n  easeMethod = \"linear\"\r\n}) {\r\n  const startTime = performance.now()\r\n  const tick = () => {\r\n    const elapsed = performance.now() - startTime\r\n    window.requestAnimationFrame(() => {\r\n      return onUpdate(\r\n        getValue(fromValue, toValue, elapsed, duration, easeMethod),\r\n        elapsed <= duration ? tick : onComplete\r\n      )\r\n    })\r\n  }\r\n\r\n  tick()\r\n}\r\n\r\nexport default animate","import React,{useEffect, useState} from 'react'\r\nimport \"./menu.scss\"\r\n\r\nfunction Image({opacity,parallaxPos,scale,rotationPosition,urlKey}) {\r\n  const [imgclass, setimgclass] = useState('img_fixed img-acceuil')\r\n  useEffect(() => {\r\n    (function seturlKeyFunc() {\r\n       if (urlKey === 1)\r\n         setimgclass('img_fixed img-acceuil')\r\n       if (urlKey === 2)\r\n         setimgclass('img_fixed img-skills')\r\n       if (urlKey === 3)\r\n         setimgclass('img_fixed img-portefolio')\r\n       if (urlKey === 4)\r\n         setimgclass('img_fixed img-contacts')\r\n    }())\r\n  }, [urlKey])\r\n  return (\r\n    <div className={imgclass}\r\n      style={{\r\n        opacity:opacity,\r\n        transform:`translate3D(${parallaxPos?.x}px , ${parallaxPos?.y}px, 0px) rotate(${rotationPosition}deg) scale(${scale})`,\r\n       \r\n      }}\r\n    ></div>\r\n  )\r\n}\r\n\r\nexport default Image","import React,{useReducer} from 'react'\r\nimport { useRef, useLayoutEffect, useEffect, useState } from 'react'\r\nimport { navigate } from 'gatsby'\r\nimport animate from './animate'\r\nimport Image from './Image'\r\nimport \"./menu.scss\"\r\n\r\n\r\nconst initialState = {\r\n    opacity: 0,\r\n    parallaxPos: { x: 0, y: -20 },\r\n    scale: 0.8,\r\n    rotationPosition: 0\r\n}\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n\r\n        case \"CHANGE/OPACITY\":\r\n\r\n            return { ...state, opacity: action.payload }\r\n            break;\r\n        case \"CHANGE/COORDINATES\":\r\n            return { ...state, parallaxPos: action.payload }\r\n            break;\r\n\r\n        case \"CHANGE/ROTATION\":\r\n\r\n            return { ...state, rotationPosition: action.payload }\r\n            break;\r\n\r\n        case \"CHANGE/SCALE\":\r\n\r\n            return { ...state, scale: action.payload }\r\n            break;\r\n\r\n        default:\r\n            throw new Error(\"Message\")\r\n\r\n    }\r\n}\r\n\r\n\r\nfunction Item({ title, route, timeLineFunc ,urlKey}) {\r\n    const [state, dispatch] = useReducer(reducer, initialState)\r\n    const listItem = useRef(null)\r\n    const easeMethod = \"linear\"\r\n\r\n\r\n    // Function\r\n    \r\n  const parallax = (event) => {\r\n    const speed = -5\r\n    const x = (window.innerWidth - event.pageX * speed) / 100\r\n    const y = (window.innerHeight - event.pageY * speed) / 100\r\n\r\n\r\n    dispatch({\r\n      type: \"CHANGE/COORDINATES\",\r\n      payload: { x: x, y: y }\r\n    })\r\n  }\r\n\r\n  const handleMouseEnter = () => {\r\n    handleScale(0.8,1,500)\r\n    handleOpacity(0,1,500)\r\n    handleRotation(state.rotationPosition,500)\r\n    listItem.current.addEventListener(\"mousemove\", parallax)\r\n  }\r\n  const handleOpacity = (initialOpacity,newOpacity,duration)=>{\r\n     animate({\r\n      fromValue:initialOpacity,\r\n      toValue:newOpacity,\r\n      onUpdate:(newOpacity,callback)=>{\r\n            dispatch({type:\"CHANGE/OPACITY\",payload:newOpacity})\r\n            callback()\r\n      },\r\n      onComplete:()=>{},\r\n      duration:duration,\r\n      easeMethod:easeMethod\r\n     })\r\n  }\r\n\r\n  const handleScale = (initialScale,newScale,duration)=>{\r\n    animate({\r\n     fromValue:initialScale,\r\n     toValue:newScale,\r\n     onUpdate:(newScale,callback)=>{\r\n           dispatch({type:\"CHANGE/SCALE\",payload:initialScale})\r\n           callback()\r\n     },\r\n     onComplete:()=>{},\r\n     duration:duration,\r\n     easeMethod:easeMethod\r\n    })\r\n }\r\n\r\n const handleRotation = (currentRotation,duration)=>{\r\n  const newRotation = Math.random() * 15 * (Math.round(Math.random()) ? 1 : -1)\r\n  animate({\r\n   fromValue:currentRotation,\r\n   toValue:newRotation,\r\n   onUpdate:(newOpacity,callback)=>{\r\n         dispatch({type:\"CHANGE/ROTATION\",payload:newOpacity})\r\n         callback()\r\n   },\r\n   onComplete:()=>{},\r\n   duration:duration,\r\n   easeMethod:easeMethod\r\n  })\r\n}\r\n  const handleMouseLeave = () => {\r\n    listItem.current.removeEventListener(\"mousemove\", parallax)\r\n    handleOpacity(1,0,800)\r\n    handleRotation(state.rotationPosition,500)\r\n    handleScale(1,initialState.scale,500)\r\n    dispatch({\r\n      type: \"CHANGE/COORDINATES\",\r\n      payload: initialState.parallaxPos\r\n    })\r\n    \r\n  }\r\n\r\n    return (\r\n        <>\r\n            <Image parallaxPos={state.parallaxPos} opacity={state.opacity} scale={state.scale} rotationPosition={state.rotationPosition} urlKey={urlKey}/>\r\n            <li className='menu-link-hidden' ref={listItem} onMouseEnter={() => handleMouseEnter()} onMouseLeave={() => handleMouseLeave()}><div className='menu-link' onClick={() => { navigate(`${route}`); timeLineFunc() }}>{title}</div></li>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Item","import React, { useReducer } from 'react'\r\nimport { useRef, useLayoutEffect, useEffect, useState } from 'react'\r\nimport { gsap } from 'gsap'\r\nimport \"./menu.scss\"\r\nimport { itemsList } from './dataItem'\r\nimport Item from './Item'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction Menu({nameTransparent}) {\r\n  \r\n  const [menuState, setmenuState] = useState(false)\r\n  \r\n\r\n  const menuContainer = useRef()\r\n  const timelineSvg = useRef()\r\n\r\n\r\n  useLayoutEffect(() => {\r\n    const curve = \"M0 502S175 272 500 272s500 230 500 230V0H0Z\"\r\n    const flat = \"M0 2S175 1 500 1s500 1 500 1V0H0Z\"\r\n    const initial = \"M0,1005S175,995,500,995s500,5,500,5V0H0Z\"\r\n\r\n    const ctx = gsap.context(() => {\r\n      timelineSvg.current = gsap.timeline()\r\n        .to(\".menu-logo\", {\r\n          duration: 0.8,\r\n          yPercent: -100,\r\n          skewY: 10,\r\n          ease: \"power2.easeIn\"\r\n        })\r\n        .to(\"#svg\", {\r\n          duration: 0.8,\r\n          attr: { d: curve },\r\n          ease: \"power2.easeIn\"\r\n        })\r\n        .to(\"#svg\", {\r\n          duration: 0.5,\r\n          attr: { d: initial },\r\n          ease: \"power2.easeIn\"\r\n        }).to(\".menu-body\", {\r\n          // clipPath: \"polygon(0% 0%,100% 0%,100% 100%,0% 100%)\",\r\n          // ease:\"power2.easeIn\"\r\n          duration: 0.8,\r\n          opacity: 1,\r\n          ease: \"power2.easeIn\"\r\n        }, \"-=0.2\").from(\".menu-link\", {\r\n          duration: 0.8,\r\n          y: 200,\r\n          skewY: 10,\r\n          stagger: {\r\n            amount: 0.5\r\n          }\r\n        })\r\n        .paused(true)\r\n\r\n    }, menuContainer)\r\n\r\n\r\n    return () => {\r\n      ctx.revert()\r\n    };\r\n  }, [menuContainer])\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (!menuState)\r\n        timelineSvg.current.play()\r\n      else\r\n        timelineSvg.current.reversed(true)\r\n\r\n\r\n    };\r\n  }, [menuState])\r\n\r\n\r\n\r\n  return (\r\n\r\n    <div ref={menuContainer} className='menu-container'>\r\n      <div className='menu-top'>\r\n        <div className='hidden'><div className='menu-logo' style={{opacity:nameTransparent ? 0 : 1}}>adikpeto aristide</div></div>\r\n        <div className='menu-burger-container'>\r\n          <div className='menu-burger'>\r\n            <div className='menu-burger-text'>MENU</div>\r\n            <div className='menu-burger-svg' onClick={() => setmenuState(menuState ? false : true)}></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='menu'>\r\n\r\n        <svg style={{ position: \"absolute\", width: \"100%\", height: \"110%\", zIndex: \"-1\" }} fill='#0c0f0a' viewBox='0 0 1000 1000' preserveAspectRatio='none'>\r\n          <path id='svg' style={{ transform: \"translateY(-5px)\" }} d=\"M0 2S175 1 500 1s500 1 500 1V0H0Z\"></path>\r\n        </svg>\r\n        <div className='menu-body'>\r\n        \r\n          <div className='menu-links-container'>\r\n            <div className='menu-links'>\r\n              <ul className='menu-links-liste'>\r\n                {itemsList.map((item,key)=>{\r\n                   return <Item urlKey={item.imgUrl} timeLineFunc={()=>timelineSvg.current.reversed(true)} title={item.title} route={item.route}/>\r\n                })}\r\n                {/* <li className='menu-link-hidden' ref={listItem} onMouseEnter={() => handleMouseEnter()} onMouseLeave={() => handleMouseLeave()}><div className='menu-link' onClick={() => { navigate(\"/\"); timelineSvg.current.reversed(true) }}>acceuil</div></li>\r\n                <li className='menu-link-hidden'><div className='menu-link' onClick={() => { navigate(\"/skills\"); timelineSvg.current.reversed(true) }}>skills</div></li>\r\n                <li className='menu-link-hidden'><div className='menu-link' onClick={() => { navigate(\"/porteFolio\"); timelineSvg.current.reversed(true) }}>portefolio</div></li>\r\n                <li className='menu-link-hidden'><div className='menu-link'>contacts</div></li> */}\r\n              </ul>\r\n            </div>\r\n            <div className='menu-links-footer'>\r\n              <div className='menu-footer-descript-contacts'>\r\n                <div className='menu-small-title'>Contacts us</div>\r\n                <div className='menu-small-text'>\r\n                  Développeur chevronné dans plusieurs langages de\r\n                  développement web. Je souhaite évoluer dans votre entreprise et\r\n                  travailler sur vos projets\r\n                </div>\r\n              </div>\r\n\r\n              <div className='menu-footer-contacts'>\r\n                adikpetoaristidezeus@gmail.com <br />\r\n                +229 54 17 26 84\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className='menu-descriptions'>\r\n            <div className='menu-descriptions-name'>adikpeto aristide portfolio</div>\r\n            <div className='menu-descriptions-small-profil'>\r\n              <div className='menu-small-title'>Profil</div>\r\n              <div className='menu-small-text'>\r\n                Développeur chevronné dans plusieurs langages de\r\n                développement web. Je souhaite évoluer dans votre entreprise et écloppements web. Je souhaite évoluer dans votre entreprise et\r\n                travailler sur vos projets.\r\n              </div>\r\n            </div>\r\n            <div className='menu-competence'>\r\n              <div className='menu-competence-title'>\r\n                développeur web;m<div className='menu-competence-sticker'></div>bile et desktop\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default Menu","/***\r\n Throw a console warning with the passed arguments\r\n ***/\r\n\r\nlet warningThrown = 0;\r\n\r\nexport function throwWarning() {\r\n    if(warningThrown > 100) {\r\n        return;\r\n    }\r\n    else if(warningThrown === 100) {\r\n        console.warn(\"Curtains: too many warnings thrown, stop logging.\");\r\n    }\r\n    else {\r\n        const args = Array.prototype.slice.call(arguments);\r\n        console.warn.apply(console, args);\r\n    }\r\n\r\n    warningThrown++;\r\n}\r\n\r\n\r\n/***\r\n Throw a console error with the passed arguments\r\n ***/\r\nexport function throwError() {\r\n    const args = Array.prototype.slice.call(arguments);\r\n    console.error.apply(console, args);\r\n}\r\n\r\n\r\n/***\r\n Generates an universal unique identifier\r\n ***/\r\nexport function generateUUID() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        let r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n        return v.toString(16).toUpperCase();\r\n    });\r\n}\r\n\r\n\r\n/***\r\n Check whether a number is power of 2\r\n\r\n params:\r\n @value (float): number to check\r\n ***/\r\nexport function isPowerOf2(value) {\r\n    return (value & (value - 1)) === 0;\r\n}\r\n\r\n\r\n/***\r\n Linear interpolation between two numbers\r\n\r\n params:\r\n @start (float): value to lerp\r\n @end (float): end value to use for lerp\r\n @amount (float): amount of lerp\r\n ***/\r\nexport function lerp(start, end, amount) {\r\n    return (1 - amount) * start + amount * end;\r\n}","import {throwError} from '../utils/utils.js';\r\n\r\n/***\r\n Here we create our Scene object\r\n The Scene will stack all the objects that will be drawn (planes and shader passes) in different arrays, and call them in the right order to be drawn.\r\n\r\n Based on the concept exposed here https://webgl2fundamentals.org/webgl/lessons/webgl-drawing-multiple-things.html\r\n The idea is to optimize the order of the rendered object so that the WebGL calls are kept to a strict minimum\r\n\r\n Here's the whole draw process order:\r\n - first we draw the ping pong planes\r\n - if needed, we bind the first scene pass frame buffer\r\n - draw all the planes that are rendered onto a render target (render pass)\r\n - draw the planes from the first render target created, ordered by their renderOrder then indexes (first added first drawn) order\r\n - draw the planes from the second render target created, etc.\r\n - draw the render passes content (depth buffer is cleared after each pass)\r\n - draw the transparent planes ordered by renderOrder, Z positions, geometry IDs and then indexes (first added first drawn)\r\n - draw the opaque planes ordered by renderOrder, geometry IDs and then indexes (first added first drawn)\r\n - draw the scene passes content\r\n\r\n params:\r\n @renderer (Renderer class object): our renderer class object\r\n\r\n returns :\r\n @this: our Scene\r\n ***/\r\n\r\nexport class Scene {\r\n    constructor(renderer) {\r\n        this.type = \"Scene\";\r\n        if(!renderer || renderer.type !== \"Renderer\") {\r\n            throwError(this.type + \": Renderer not passed as first argument\", renderer);\r\n        }\r\n        else if(!renderer.gl) {\r\n            throwError(this.type + \": Renderer WebGL context is undefined\", renderer);\r\n\r\n            // return if no gl context\r\n            return;\r\n        }\r\n\r\n        this.renderer = renderer;\r\n        this.gl = renderer.gl;\r\n\r\n        this.initStacks();\r\n    }\r\n\r\n    /***\r\n     Init our Scene stacks object\r\n     ***/\r\n    initStacks() {\r\n        this.stacks = {\r\n            // planes\r\n            \"pingPong\": [],\r\n            \"renderTargets\": [],\r\n            \"opaque\": [],\r\n            \"transparent\": [],\r\n\r\n            // post processing\r\n            \"renderPasses\": [],\r\n            \"scenePasses\": [],\r\n        };\r\n    }\r\n\r\n    /*** RESET STACKS ***/\r\n\r\n    /***\r\n     Reset the plane stacks (used when disposing a plane)\r\n     ***/\r\n    resetPlaneStacks() {\r\n        // clear the plane stacks\r\n        this.stacks.pingPong = [];\r\n        this.stacks.renderTargets = [];\r\n        this.stacks.opaque = [];\r\n        this.stacks.transparent = [];\r\n\r\n        // rebuild them with the new plane indexes\r\n        for(let i = 0; i < this.renderer.planes.length; i++) {\r\n            this.addPlane(this.renderer.planes[i]);\r\n        }\r\n    }\r\n\r\n    /***\r\n     Reset the shader pass stacks (used when disposing a shader pass)\r\n     ***/\r\n    resetShaderPassStacks() {\r\n        // now rebuild the drawStacks\r\n        // start by clearing all drawstacks\r\n        this.stacks.scenePasses = [];\r\n        this.stacks.renderPasses = [];\r\n\r\n        // restack our planes with new indexes\r\n        for(let i = 0; i < this.renderer.shaderPasses.length; i++) {\r\n            this.renderer.shaderPasses[i].index = i;\r\n            if(this.renderer.shaderPasses[i]._isScenePass) {\r\n                this.stacks.scenePasses.push(this.renderer.shaderPasses[i]);\r\n            }\r\n            else {\r\n                this.stacks.renderPasses.push(this.renderer.shaderPasses[i]);\r\n            }\r\n        }\r\n\r\n        // reset the scenePassIndex if needed\r\n        if(this.stacks.scenePasses.length === 0) {\r\n            this.renderer.state.scenePassIndex = null;\r\n        }\r\n    }\r\n\r\n    /*** ADDING PLANES ***/\r\n\r\n\r\n    /***\r\n     Add a plane to our renderTargets stack\r\n\r\n     params:\r\n     @plane (Plane object): plane to add to our stack\r\n     ***/\r\n    addToRenderTargetsStack(plane) {\r\n        // find all planes that are rendered onto a render target\r\n        const renderTargetsPlanes = this.renderer.planes.filter(el => el.type !== \"PingPongPlane\" && el.target && el.uuid !== plane.uuid);\r\n\r\n        // is there any plane that is already rendered onto that plane's render target?\r\n        let siblingPlaneIndex = -1;\r\n        if(plane.target._depth) {\r\n            // findLastIndex\r\n            for (let i = renderTargetsPlanes.length - 1; i >= 0; i--) {\r\n                if (renderTargetsPlanes[i].target.uuid === plane.target.uuid) {\r\n                    siblingPlaneIndex = i + 1;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // findIndex\r\n            siblingPlaneIndex = renderTargetsPlanes.findIndex(el => el.target.uuid === plane.target.uuid);\r\n        }\r\n\r\n        // if findIndex returned -1, just push the plane\r\n        siblingPlaneIndex = Math.max(0, siblingPlaneIndex);\r\n        renderTargetsPlanes.splice(siblingPlaneIndex, 0, plane);\r\n\r\n        // sort by index (order of addition) then render order, depending on whether the render target handle depth or not\r\n        if(plane.target._depth) {\r\n            renderTargetsPlanes.sort((a, b) => a.index - b.index);\r\n            renderTargetsPlanes.sort((a, b) => b.renderOrder - a.renderOrder);\r\n        }\r\n        else {\r\n            renderTargetsPlanes.sort((a, b) => b.index - a.index);\r\n            renderTargetsPlanes.sort((a, b) => a.renderOrder - b.renderOrder);\r\n        }\r\n\r\n        // sort by render targets order\r\n        renderTargetsPlanes.sort((a, b) => a.target.index - b.target.index);\r\n\r\n        this.stacks.renderTargets = renderTargetsPlanes;\r\n    }\r\n\r\n\r\n    /***\r\n     Rebuilds our regular stack (transparent or opaque) with our plane added, geometry IDs and then indexes (first added first drawn)\r\n\r\n     params:\r\n     @plane (Plane object): plane to add to our stack\r\n\r\n     returns:\r\n     @planeStack (array): our transparent or opaque stack ready to be applied custom sorting filter\r\n     ***/\r\n    addToRegularPlaneStack(plane) {\r\n        // get all planes that have same transparency\r\n        const planeStack = this.renderer.planes.filter(el => el.type !== \"PingPongPlane\" && !el.target && el._transparent === plane._transparent && el.uuid !== plane.uuid);\r\n\r\n        // find if there's already a plane with the same geometry with a findLastIndex function\r\n        let siblingPlaneIndex = -1;\r\n\r\n        for(let i = planeStack.length - 1; i >= 0; i--) {\r\n            if(planeStack[i]._geometry.definition.id === plane._geometry.definition.id) {\r\n                siblingPlaneIndex = i + 1;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // if findIndex returned -1 (no matching geometry or program)\r\n        siblingPlaneIndex = Math.max(0, siblingPlaneIndex);\r\n\r\n        // add it to our stack plane array\r\n        planeStack.splice(siblingPlaneIndex, 0, plane);\r\n\r\n        // sort by indexes\r\n        planeStack.sort((a, b) => a.index - b.index);\r\n\r\n        return planeStack;\r\n    }\r\n\r\n    /***\r\n     This function will add a plane into one of our 4 stacks : pingPong, renderTargets, transparent and opaque\r\n     - pingPong is just a simple array (ordered by order of creation)\r\n     - renderTargets array is ordered by render target creation order, planes renderOrder value and then planes indexes (order of creation)\r\n     - transparent array is ordered by renderOrder, Z positions, geometry IDs and then indexes (first added first drawn)\r\n     - opaque array is ordered by renderOrder, geometry IDs and then indexes (first added first drawn)\r\n\r\n     This is done to improve speed and reduce GL calls\r\n\r\n     params:\r\n     @plane (Plane object): plane to add to our scene\r\n     ***/\r\n    addPlane(plane) {\r\n        if(plane.type === \"PingPongPlane\") {\r\n            this.stacks.pingPong.push(plane);\r\n        }\r\n        else if(plane.target) {\r\n            this.addToRenderTargetsStack(plane);\r\n        }\r\n        else {\r\n            if(plane._transparent) {\r\n                // rebuild a stack of all transparent planes\r\n                const planeStack = this.addToRegularPlaneStack(plane);\r\n\r\n                // sort by their depth position\r\n                planeStack.sort((a, b) => b.relativeTranslation.z - a.relativeTranslation.z);\r\n\r\n                // then sort by their render order\r\n                planeStack.sort((a, b) => b.renderOrder - a.renderOrder);\r\n\r\n                this.stacks.transparent = planeStack;\r\n            }\r\n            else {\r\n                // rebuild a stack of all opaque planes\r\n                const planeStack = this.addToRegularPlaneStack(plane);\r\n\r\n                // then sort by their render order\r\n                planeStack.sort((a, b) => b.renderOrder - a.renderOrder);\r\n\r\n                this.stacks.opaque = planeStack;\r\n            }\r\n        }\r\n    }\r\n\r\n    /***\r\n     This function will remove a plane from our scene. This just reset the plane stacks for now.\r\n     Useful if we'd want to change the way our draw stacks work and keep the logic separated from our renderer\r\n\r\n     params:\r\n     @plane (Plane object): plane to remove from our scene\r\n     ***/\r\n    removePlane(plane) {\r\n        if(plane.type === \"PingPongPlane\") {\r\n            this.stacks.pingPong = this.stacks.pingPong.filter(el => el.uuid !== plane.uuid);\r\n        }\r\n        else if(plane.target) {\r\n            this.stacks.renderTargets = this.stacks.renderTargets.filter(el => el.uuid !== plane.uuid);\r\n        }\r\n        else {\r\n            if(plane._transparent) {\r\n                this.stacks.transparent = this.stacks.transparent.filter(el => el.uuid !== plane.uuid);\r\n            }\r\n            else {\r\n                this.stacks.opaque = this.stacks.opaque.filter(el => el.uuid !== plane.uuid);\r\n            }\r\n        }\r\n    }\r\n\r\n    /***\r\n     Changing the position of a plane inside the correct plane stack to render it on above or behind the other planes\r\n\r\n     params:\r\n     @plane (Plane object): the plane that had its renderOrder property updated\r\n     ***/\r\n    setPlaneRenderOrder(plane) {\r\n        if(plane.type === \"ShaderPass\") {\r\n            this.sortShaderPassStack(plane._isScenePass ? this.stacks.scenePasses : this.stacks.renderPasses);\r\n        }\r\n        else if(plane.type === \"PingPongPlane\") {\r\n            // this does not makes any sense for ping pong planes\r\n            return;\r\n        }\r\n\r\n        if(plane.target) {\r\n            // sort by index (order of addition) then render order, depending on whether the render target handle depth or not\r\n            if(plane.target._depth) {\r\n                this.stacks.renderTargets.sort((a, b) => a.index - b.index);\r\n                this.stacks.renderTargets.sort((a, b) => b.renderOrder - a.renderOrder);\r\n            }\r\n            else {\r\n                this.stacks.renderTargets.sort((a, b) => b.index - a.index);\r\n                this.stacks.renderTargets.sort((a, b) => a.renderOrder - b.renderOrder);\r\n            }\r\n\r\n            // then sort by render targets order\r\n            this.stacks.renderTargets.sort((a, b) => a.target.index - b.target.index);\r\n        }\r\n        else {\r\n            const planeStack = plane._transparent ?\r\n                this.stacks.transparent\r\n                : this.stacks.opaque;\r\n\r\n            // if the first drawn scene pass does not handle depth, we'll have to sort them in the inverse order\r\n            const scenePassWithoutDepth = this.stacks.scenePasses.find((pass, index) => pass._isScenePass && !pass._depth && index === 0);\r\n\r\n            if(!this.renderer.depth || scenePassWithoutDepth) {\r\n                // inverted sorting\r\n\r\n                // sort by indexes\r\n                planeStack.sort((a, b) => b.index - a.index);\r\n\r\n                if(plane._transparent) {\r\n                    // if plane is transparent, sort by their depth position\r\n                    planeStack.sort((a, b) => a.relativeTranslation.z - b.relativeTranslation.z);\r\n                }\r\n\r\n                // then sort by render order\r\n                planeStack.sort((a, b) => a.renderOrder - b.renderOrder);\r\n            }\r\n            else {\r\n                // regular sorting\r\n\r\n                // sort by indexes\r\n                planeStack.sort((a, b) => a.index - b.index);\r\n\r\n                if(plane._transparent) {\r\n                    // if plane is transparent, sort by their depth position\r\n                    planeStack.sort((a, b) => b.relativeTranslation.z - a.relativeTranslation.z);\r\n                }\r\n\r\n                // then sort by render order\r\n                planeStack.sort((a, b) => b.renderOrder - a.renderOrder);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*** ADDING POST PROCESSING ***/\r\n\r\n    /***\r\n     Add a shader pass to the stack\r\n\r\n     params:\r\n     @shaderPass (ShaderPass object): shaderPass to add to our scene\r\n     ***/\r\n    addShaderPass(shaderPass) {\r\n        if(!shaderPass._isScenePass) {\r\n            this.stacks.renderPasses.push(shaderPass);\r\n            this.sortShaderPassStack(this.stacks.renderPasses);\r\n        }\r\n        else {\r\n            this.stacks.scenePasses.push(shaderPass);\r\n            this.sortShaderPassStack(this.stacks.scenePasses);\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This function will remove a shader pass from our scene. This just reset the shaderPass stacks for now.\r\n     Useful if we'd want to change the way our draw stacks work and keep the logic separated from our renderer\r\n\r\n     params:\r\n     @shaderPass (ShaderPass object): shader pass to remove from our scene\r\n     ***/\r\n    removeShaderPass(shaderPass) {\r\n        this.resetShaderPassStacks();\r\n    }\r\n\r\n\r\n    /***\r\n     Sorts the shader pass stack by index then by renderOrder property\r\n\r\n     params:\r\n     @passStack (array): which shader pass stack (scenePasses or renderPasses) to sort\r\n     ***/\r\n    sortShaderPassStack(passStack) {\r\n        passStack.sort((a, b) => a.index - b.index);\r\n        passStack.sort((a, b) => a.renderOrder - b.renderOrder);\r\n    }\r\n\r\n    /*** DRAWING SCENE ***/\r\n\r\n    /***\r\n     Enable the first Shader pass scene pass\r\n     ***/\r\n    enableShaderPass() {\r\n        if(this.stacks.scenePasses.length && this.stacks.renderPasses.length === 0 && this.renderer.planes.length) {\r\n            this.renderer.state.scenePassIndex = 0;\r\n            this.renderer.bindFrameBuffer(this.stacks.scenePasses[0].target);\r\n        }\r\n    }\r\n\r\n    /***\r\n     Draw the render passes\r\n     ***/\r\n    drawRenderPasses() {\r\n        // if we got one or multiple scene passes after the render passes, bind the first scene pass here\r\n        if(this.stacks.scenePasses.length && this.stacks.renderPasses.length && this.renderer.planes.length) {\r\n            this.renderer.state.scenePassIndex = 0;\r\n            this.renderer.bindFrameBuffer(this.stacks.scenePasses[0].target);\r\n        }\r\n\r\n        for(let i = 0; i < this.stacks.renderPasses.length; i++) {\r\n            this.stacks.renderPasses[i]._startDrawing();\r\n\r\n            // we need to clear our depth buffer to display previously drawn render passes\r\n            this.renderer.clearDepth();\r\n        }\r\n    }\r\n\r\n    /***\r\n     Draw the scene passes\r\n     ***/\r\n    drawScenePasses() {\r\n        // then the scene passes\r\n        for(let i = 0; i < this.stacks.scenePasses.length; i++) {\r\n            this.stacks.scenePasses[i]._startDrawing();\r\n        }\r\n    }\r\n\r\n    /***\r\n     Loop through the special ping pong planes stack and draw its planes\r\n     ***/\r\n    drawPingPongStack() {\r\n        for(let i = 0; i < this.stacks.pingPong.length; i++) {\r\n            const plane = this.stacks.pingPong[i];\r\n            // be sure the plane exists\r\n            if(plane) {\r\n                // draw the plane\r\n                plane._startDrawing();\r\n            }\r\n        }\r\n    }\r\n\r\n    /***\r\n     Loop through one of our stack (renderTargets, opaque or transparent objects) and draw its planes\r\n     ***/\r\n    drawStack(stackType) {\r\n        for(let i = 0; i < this.stacks[stackType].length; i++) {\r\n            const plane = this.stacks[stackType][i];\r\n            // be sure the plane exists\r\n            if(plane) {\r\n                // draw the plane\r\n                plane._startDrawing();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Draw our scene content\r\n     ***/\r\n    draw() {\r\n        // always draw our ping pong planes first!\r\n        this.drawPingPongStack();\r\n\r\n        // enable first frame buffer for shader passes if needed\r\n        this.enableShaderPass();\r\n\r\n        // our planes that are drawn onto a render target\r\n        this.drawStack(\"renderTargets\");\r\n\r\n        // then draw the content of our render targets render passes\r\n        this.drawRenderPasses();\r\n\r\n        // disable blending for the opaque planes\r\n        this.renderer.setBlending(false);\r\n\r\n        // loop on our stacked planes\r\n        this.drawStack(\"opaque\");\r\n\r\n        // set blending and draw transparents planes only if we have some\r\n        if(this.stacks.transparent.length) {\r\n            this.renderer.setBlending(true);\r\n\r\n            // draw the transparent planes\r\n            this.drawStack(\"transparent\");\r\n        }\r\n\r\n        // now draw the render targets scene passes\r\n        this.drawScenePasses();\r\n    }\r\n}","/***\r\n Here we create a CacheManager class object\r\n This will store geometries attributes arrays, textures and WebGL programs in arrays\r\n This helps speed up slow synchronous CPU operations such as WebGL shaders compilations, images decoding, etc.\r\n\r\n returns :\r\n @this: our CacheManager class object\r\n ***/\r\nexport class CacheManager {\r\n    constructor() {\r\n        // never clear cached geometries\r\n        this.geometries = [];\r\n\r\n        this.clear();\r\n    }\r\n\r\n    /***\r\n     Clear WebGL context depending cache arrays (used on init and context restoration)\r\n     ***/\r\n    clear() {\r\n        // only cache images textures for now\r\n        this.textures = [];\r\n\r\n        // cached programs\r\n        this.programs = [];\r\n    }\r\n\r\n\r\n    /*** GEOMETRIES ***/\r\n\r\n    /***\r\n     Check if this geometry is already in our cached geometries array\r\n\r\n     params:\r\n     @definitionID (integer): the geometry ID\r\n     ***/\r\n    getGeometryFromID(definitionID) {\r\n        return this.geometries.find(element => element.id === definitionID);\r\n    }\r\n\r\n    /***\r\n     Add a geometry to our cache if not already in it\r\n\r\n     params:\r\n     @definitionID  (integer): the geometry ID to add to our cache\r\n     @vertices (array): vertices coordinates array to add to our cache\r\n     @uvs (array): uvs coordinates array to add to our cache\r\n     ***/\r\n    addGeometry(definitionID, vertices, uvs) {\r\n        this.geometries.push({\r\n            id: definitionID,\r\n            vertices: vertices,\r\n            uvs: uvs\r\n        });\r\n    }\r\n\r\n\r\n    /*** PROGRAMS ***/\r\n\r\n    /***\r\n     Compare two shaders strings to detect whether they are equal or not\r\n\r\n     params:\r\n     @firstShader (string): shader code\r\n     @secondShader (string): shader code\r\n\r\n     returns:\r\n     @isSameShader (bool): whether both shaders are equal or not\r\n     ***/\r\n    isSameShader(firstShader, secondShader) {\r\n        return firstShader.localeCompare(secondShader) === 0;\r\n    }\r\n\r\n    /***\r\n     Returns a program from our cache if this program's vertex and fragment shaders code are the same as the one provided\r\n\r\n     params:\r\n     @vsCode (string): vertex shader code\r\n     @fsCode (string): fragment shader code\r\n\r\n     returns:\r\n     @program (Program class object or null): our program if it has been found\r\n     ***/\r\n    getProgramFromShaders(vsCode, fsCode) {\r\n        return this.programs.find((element) => {\r\n            return this.isSameShader(element.vsCode, vsCode) && this.isSameShader(element.fsCode, fsCode);\r\n        });\r\n    }\r\n\r\n    /***\r\n     Add a program to our cache\r\n\r\n     params :\r\n     @program (Program class object) : program to add to our cache\r\n     ***/\r\n    addProgram(program) {\r\n        this.programs.push(program);\r\n    }\r\n\r\n\r\n    /*** TEXTURES ***/\r\n\r\n    /***\r\n     Check if this source is already in our cached textures array\r\n\r\n     params :\r\n     @source (HTML element) : html image, video or canvas element (only images for now)\r\n     ***/\r\n    getTextureFromSource(source) {\r\n        const src = typeof source === \"string\" ? source : source.src;\r\n        // return the texture if the source is the same and if it's not the same texture\r\n        return this.textures.find(element => element.source && element.source.src === src);\r\n    }\r\n\r\n    /***\r\n     Add a texture to our cache if not already in it\r\n\r\n     params :\r\n     @texture (Texture class object) : texture to add to our cache\r\n     ***/\r\n    addTexture(texture) {\r\n        const cachedTexture = this.getTextureFromSource(texture.source);\r\n\r\n        if(!cachedTexture) {\r\n            this.textures.push(texture);\r\n        }\r\n    }\r\n\r\n    /***\r\n     Removes a texture from the cache array\r\n\r\n     params :\r\n     @texture (Texture class object) : texture to remove from our cache\r\n     ***/\r\n    removeTexture(texture) {\r\n        // remove from our textures array\r\n        this.textures = this.textures.filter(element => element.uuid !== texture.uuid);\r\n    }\r\n}","/***\r\n Here we create a CallbackQueueManager class object\r\n This allows to store callbacks in a queue array with a timeout of 0 to be executed on next render call\r\n\r\n returns:\r\n @this: our CallbackQueueManager class object\r\n ***/\r\nexport class CallbackQueueManager {\r\n    constructor() {\r\n        this.clear();\r\n    }\r\n\r\n    /***\r\n     Clears our queue array (used on init)\r\n     ***/\r\n    clear() {\r\n        this.queue = [];\r\n    }\r\n\r\n    /***\r\n     Adds a callback to our queue list with a timeout of 0\r\n\r\n     params:\r\n     @callback (function): the callback to execute on next render call\r\n     @keep (bool): whether to keep calling that callback on each rendering call or not (act as a setInterval). Default to false\r\n\r\n     returns:\r\n     @queueItem: the queue item. Allows to keep a track of it and set its keep property to false when needed\r\n     ***/\r\n    add(callback, keep = false) {\r\n        const queueItem = {\r\n            callback,\r\n            keep,\r\n            timeout: null, // keep a reference to the timeout so we can safely delete if afterwards\r\n        };\r\n        queueItem.timeout = setTimeout(() => {\r\n            this.queue.push(queueItem);\r\n        }, 0);\r\n\r\n        return queueItem;\r\n    }\r\n\r\n    /***\r\n     Executes all callbacks in the queue and remove the ones that have their keep property set to false.\r\n     Called at the beginning of each render call\r\n     ***/\r\n    execute() {\r\n        // execute queue callbacks list\r\n        this.queue.map((entry) => {\r\n            if(entry.callback) {\r\n                entry.callback();\r\n            }\r\n\r\n            // clear our timeout\r\n            clearTimeout(this.queue.timeout);\r\n        });\r\n\r\n        // remove all items that have their keep property set to false\r\n        this.queue = this.queue.filter((entry) => entry.keep);\r\n    }\r\n}","import {Scene} from \"./Scene.js\";\r\nimport {CacheManager} from \"../utils/CacheManager.js\";\r\nimport {CallbackQueueManager} from \"../utils/CallbackQueueManager.js\";\r\nimport {throwWarning} from '../utils/utils.js';\r\n\r\n\r\n/***\r\n Here we create our Renderer object\r\n It will create our WebGL context and handle everything that relates to it\r\n Will create a container, append a canvas, handle WebGL extensions, context lost/restoration events\r\n Will create a Scene class object that will keep tracks of all added objects\r\n Will also handle all global WebGL commands, like clearing scene, binding frame buffers, setting depth, blend func, etc.\r\n Will use a state object to handle all those commands and keep a track of what is being drawned to avoid redundant WebGL calls.\r\n\r\n params:\r\n @Curtainsparams see Curtains class object\r\n\r\n @onError (function): called when there has been an error while initiating the WebGL context\r\n @onSuccess (function): called when the WebGL context has been successfully created\r\n @onContextLost (function): called when the WebGL context is lost\r\n @onContextRestored (function): called when the WebGL context is restored\r\n @onSceneChange (function): called every time an object has been added/removed from the scene\r\n\r\n returns :\r\n @this: our Renderer\r\n ***/\r\n\r\nexport class Renderer {\r\n    constructor({\r\n        // inherited from Curtains class object\r\n        alpha,\r\n        antialias,\r\n        premultipliedAlpha,\r\n        depth,\r\n        failIfMajorPerformanceCaveat,\r\n        preserveDrawingBuffer,\r\n        stencil,\r\n        container,\r\n        pixelRatio,\r\n        renderingScale,\r\n        production,\r\n\r\n        // callbacks passed by the Curtains class object on instantiation\r\n        onError,\r\n        onSuccess,\r\n        onContextLost,\r\n        onContextRestored,\r\n        onDisposed,\r\n        onSceneChange,\r\n    }) {\r\n        this.type = \"Renderer\";\r\n        // context attributes\r\n        this.alpha = alpha;\r\n        this.antialias = antialias;\r\n        this.premultipliedAlpha = premultipliedAlpha;\r\n        this.depth = depth;\r\n        this.failIfMajorPerformanceCaveat = failIfMajorPerformanceCaveat;\r\n        this.preserveDrawingBuffer = preserveDrawingBuffer;\r\n        this.stencil = stencil;\r\n\r\n        this.container = container;\r\n\r\n        this.pixelRatio = pixelRatio;\r\n        this._renderingScale = renderingScale;\r\n\r\n        this.production = production;\r\n\r\n        // callbacks\r\n        this.onError = onError;\r\n        this.onSuccess = onSuccess;\r\n        this.onContextLost = onContextLost;\r\n        this.onContextRestored = onContextRestored;\r\n        this.onDisposed = onDisposed;\r\n\r\n        // keep sync between Curtains objects arrays and renderer objects arrays\r\n        this.onSceneChange = onSceneChange;\r\n\r\n        // managing our webgl draw states\r\n        this.initState();\r\n\r\n        // create the canvas\r\n        this.canvas = document.createElement(\"canvas\");\r\n\r\n        // set our webgl context\r\n        const glAttributes = {\r\n            alpha: this.alpha,\r\n            premultipliedAlpha: this.premultipliedAlpha,\r\n            antialias: this.antialias,\r\n            depth: this.depth,\r\n            failIfMajorPerformanceCaveat: this.failIfMajorPerformanceCaveat,\r\n            preserveDrawingBuffer: this.preserveDrawingBuffer,\r\n            stencil: this.stencil,\r\n        };\r\n\r\n        // try webgl2 context first\r\n        this.gl = this.canvas.getContext(\"webgl2\", glAttributes);\r\n        this._isWebGL2 = !!this.gl;\r\n        // fallback to webgl1\r\n        if(!this.gl) {\r\n            this.gl = this.canvas.getContext(\"webgl\", glAttributes) || this.canvas.getContext(\"experimental-webgl\", glAttributes);\r\n        }\r\n\r\n        // WebGL context could not be created\r\n        if(!this.gl) {\r\n            if(!this.production) throwWarning(this.type + \": WebGL context could not be created\");\r\n\r\n            this.state.isActive = false;\r\n\r\n            if(this.onError) {\r\n                this.onError();\r\n            }\r\n\r\n            return;\r\n        }\r\n        else if(this.onSuccess) {\r\n            this.onSuccess();\r\n        }\r\n\r\n        this.initRenderer();\r\n    }\r\n\r\n    /***\r\n     Set/reset our context state object\r\n     ***/\r\n    initState() {\r\n        this.state = {\r\n            // if we are currently rendering\r\n            isActive: true,\r\n            isContextLost: true,\r\n            drawingEnabled: true,\r\n            forceRender: false,\r\n\r\n            // current program ID\r\n            currentProgramID: null,\r\n\r\n            // current geometry drawn\r\n            currentGeometryID: null,\r\n            // whether we should force buffer bindings update\r\n            forceBufferUpdate: false,\r\n\r\n            // if we're using depth test or not\r\n            depthTest: null,\r\n            // blending\r\n            blending: null,\r\n            // face culling\r\n            cullFace: null,\r\n\r\n            // current frame buffer ID\r\n            frameBufferID: null,\r\n            // current scene pass ID\r\n            scenePassIndex: null,\r\n\r\n            // textures\r\n            activeTexture: null,\r\n            unpackAlignment: null,\r\n            flipY: null,\r\n            premultiplyAlpha: null,\r\n        };\r\n    }\r\n\r\n    /***\r\n     Add a callback queueing manager (execute functions on the next render call, see CallbackQueueManager class object)\r\n     ***/\r\n    initCallbackQueueManager() {\r\n        this.nextRender = new CallbackQueueManager();\r\n    }\r\n\r\n    /***\r\n     Init our renderer\r\n     ***/\r\n    initRenderer() {\r\n        this.planes = [];\r\n        this.renderTargets = [];\r\n        this.shaderPasses = [];\r\n\r\n        // context is not lost\r\n        this.state.isContextLost = false;\r\n        this.state.maxTextureSize = this.gl.getParameter(this.gl.MAX_TEXTURE_SIZE);\r\n\r\n        // callback queue\r\n        this.initCallbackQueueManager();\r\n\r\n        // set blend func\r\n        this.setBlendFunc();\r\n\r\n        // enable depth by default\r\n        this.setDepthFunc();\r\n        this.setDepthTest(true);\r\n\r\n        // texture cache\r\n        this.cache = new CacheManager();\r\n\r\n        // init our scene\r\n        this.scene = new Scene(this);\r\n\r\n        // get webgl extensions\r\n        this.getExtensions();\r\n\r\n        // handling context\r\n        this._contextLostHandler = this.contextLost.bind(this);\r\n        this.canvas.addEventListener(\"webglcontextlost\", this._contextLostHandler, false);\r\n\r\n        this._contextRestoredHandler = this.contextRestored.bind(this);\r\n        this.canvas.addEventListener(\"webglcontextrestored\", this._contextRestoredHandler, false);\r\n    }\r\n\r\n    /***\r\n     Get all available WebGL extensions based on WebGL used version\r\n     Called on init and on context restoration\r\n     ***/\r\n    getExtensions() {\r\n        this.extensions = [];\r\n        if(this._isWebGL2) {\r\n            this.extensions['EXT_color_buffer_float'] = this.gl.getExtension('EXT_color_buffer_float');\r\n            this.extensions['OES_texture_float_linear'] = this.gl.getExtension('OES_texture_float_linear');\r\n            this.extensions['EXT_texture_filter_anisotropic'] = this.gl.getExtension('EXT_texture_filter_anisotropic');\r\n            this.extensions['WEBGL_lose_context'] = this.gl.getExtension('WEBGL_lose_context');\r\n        } else {\r\n            this.extensions['OES_vertex_array_object'] = this.gl.getExtension('OES_vertex_array_object');\r\n            this.extensions['OES_texture_float'] = this.gl.getExtension('OES_texture_float');\r\n            this.extensions['OES_texture_float_linear'] = this.gl.getExtension('OES_texture_float_linear');\r\n            this.extensions['OES_texture_half_float'] = this.gl.getExtension('OES_texture_half_float');\r\n            this.extensions['OES_texture_half_float_linear'] = this.gl.getExtension('OES_texture_half_float_linear');\r\n            this.extensions['EXT_texture_filter_anisotropic'] = this.gl.getExtension('EXT_texture_filter_anisotropic');\r\n            this.extensions['OES_element_index_uint'] = this.gl.getExtension('OES_element_index_uint');\r\n            this.extensions['OES_standard_derivatives'] = this.gl.getExtension('OES_standard_derivatives');\r\n            this.extensions['EXT_sRGB'] = this.gl.getExtension('EXT_sRGB');\r\n            this.extensions['WEBGL_depth_texture'] = this.gl.getExtension('WEBGL_depth_texture');\r\n            this.extensions['WEBGL_draw_buffers'] = this.gl.getExtension('WEBGL_draw_buffers');\r\n            this.extensions['WEBGL_lose_context'] = this.gl.getExtension('WEBGL_lose_context');\r\n        }\r\n    }\r\n\r\n\r\n    /*** HANDLING CONTEXT LOST/RESTORE ***/\r\n\r\n    /***\r\n     Called when the WebGL context is lost\r\n     ***/\r\n    contextLost(event) {\r\n        this.state.isContextLost = true;\r\n\r\n        // do not try to restore the context if we're disposing everything!\r\n        if(!this.state.isActive) return;\r\n\r\n        event.preventDefault();\r\n\r\n        this.nextRender.add(() => this.onContextLost && this.onContextLost());\r\n    }\r\n\r\n\r\n    /***\r\n     Call this method to restore your context\r\n     ***/\r\n    restoreContext() {\r\n        // do not try to restore the context if we're disposing everything!\r\n        if(!this.state.isActive) return;\r\n\r\n        this.initState();\r\n\r\n        if(this.gl && this.extensions['WEBGL_lose_context']) {\r\n            this.extensions['WEBGL_lose_context'].restoreContext();\r\n        }\r\n        else {\r\n            if(!this.gl && !this.production) {\r\n                throwWarning(this.type + \": Could not restore the context because the context is not defined\");\r\n            }\r\n            else if(!this.extensions['WEBGL_lose_context'] && !this.production) {\r\n                throwWarning(this.type + \": Could not restore the context because the restore context extension is not defined\");\r\n            }\r\n\r\n            if(this.onError) {\r\n                this.onError();\r\n            }\r\n        }\r\n    }\r\n\r\n    /***\r\n     Check that all objects and textures have been restored\r\n\r\n     returns:\r\n     @isRestored (bool): whether everything has been restored or not\r\n     ***/\r\n    isContextexFullyRestored() {\r\n        let isRestored = true;\r\n        for(let i = 0; i < this.renderTargets.length; i++) {\r\n            if(!this.renderTargets[i].textures[0]._canDraw) {\r\n                isRestored = false;\r\n            }\r\n            break;\r\n        }\r\n\r\n        if(isRestored) {\r\n            for(let i = 0; i < this.planes.length; i++) {\r\n                if(!this.planes[i]._canDraw) {\r\n                    isRestored = false;\r\n                    break;\r\n                }\r\n                else {\r\n                    for(let j = 0; j < this.planes[i].textures.length; j++) {\r\n                        if(!this.planes[i].textures[j]._canDraw) {\r\n                            isRestored = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if(isRestored) {\r\n            for(let i = 0; i < this.shaderPasses.length; i++) {\r\n                if(!this.shaderPasses[i]._canDraw) {\r\n                    isRestored = false;\r\n                    break;\r\n                }\r\n                else {\r\n                    for(let j = 0; j < this.shaderPasses[i].textures.length; j++) {\r\n                        if(!this.shaderPasses[i].textures[j]._canDraw) {\r\n                            isRestored = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return isRestored;\r\n    }\r\n\r\n    /***\r\n     Called when the WebGL context is restored\r\n     ***/\r\n    contextRestored() {\r\n        this.getExtensions();\r\n\r\n        // set blend func\r\n        this.setBlendFunc();\r\n\r\n        // enable depth by default\r\n        this.setDepthFunc();\r\n        this.setDepthTest(true);\r\n\r\n        // clear texture and programs cache\r\n        this.cache.clear();\r\n\r\n        // reset draw stacks\r\n        this.scene.initStacks();\r\n\r\n        // we need to reset everything : planes programs, shaders, buffers and textures !\r\n        for(let i = 0; i < this.renderTargets.length; i++) {\r\n            this.renderTargets[i]._restoreContext();\r\n        }\r\n\r\n        for(let i = 0; i < this.planes.length; i++) {\r\n            this.planes[i]._restoreContext();\r\n        }\r\n\r\n        // same goes for shader passes\r\n        for(let i = 0; i < this.shaderPasses.length; i++) {\r\n            this.shaderPasses[i]._restoreContext();\r\n        }\r\n\r\n        // callback if everything is restored\r\n        const isRestoredQueue = this.nextRender.add(() => {\r\n            const isRestored = this.isContextexFullyRestored();\r\n            if(isRestored) {\r\n                isRestoredQueue.keep = false;\r\n\r\n                // start drawing again\r\n                this.state.isContextLost = false;\r\n\r\n                if(this.onContextRestored) {\r\n                    this.onContextRestored();\r\n                }\r\n\r\n                // we've changed the objects, keep Curtains class in sync with our renderer\r\n                this.onSceneChange();\r\n\r\n                // force next frame render whatever our drawing flag value\r\n                this.needRender();\r\n            }\r\n        }, true);\r\n    }\r\n\r\n\r\n    /*** SIZING ***/\r\n\r\n    /***\r\n     Updates pixelRatio property\r\n     ***/\r\n    setPixelRatio(pixelRatio) {\r\n        this.pixelRatio = pixelRatio;\r\n    }\r\n\r\n    /***\r\n     Set/reset container sizes and WebGL viewport sizes\r\n     ***/\r\n    setSize() {\r\n        if(!this.gl) return;\r\n\r\n        // get our container bounding client rectangle\r\n        const containerBoundingRect = this.container.getBoundingClientRect();\r\n\r\n        // use the bounding rect values\r\n        this._boundingRect = {\r\n            width: containerBoundingRect.width * this.pixelRatio,\r\n            height: containerBoundingRect.height * this.pixelRatio,\r\n            top: containerBoundingRect.top * this.pixelRatio,\r\n            left: containerBoundingRect.left * this.pixelRatio,\r\n        };\r\n\r\n        // iOS Safari > 8+ has a known bug due to navigation bar appearing/disappearing\r\n        // this causes wrong bounding client rect calculations, especially negative top value when it shouldn't\r\n        // to fix this we'll use a dirty but useful workaround\r\n\r\n        // first we check if we're on iOS Safari\r\n        const isSafari = !!navigator.userAgent.match(/Version\\/[\\d\\.]+.*Safari/);\r\n        const iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\r\n\r\n        if(isSafari && iOS) {\r\n            // if we are on iOS Safari we'll need a custom function to retrieve our container absolute top position\r\n            function getTopOffset(el) {\r\n                let topOffset = 0;\r\n                while(el && !isNaN(el.offsetTop)) {\r\n                    topOffset += el.offsetTop - el.scrollTop;\r\n                    el = el.offsetParent;\r\n                }\r\n                return topOffset;\r\n            }\r\n\r\n            // use it to update our top value\r\n            this._boundingRect.top = getTopOffset(this.container) * this.pixelRatio;\r\n        }\r\n\r\n        this.canvas.style.width  = Math.floor(this._boundingRect.width / this.pixelRatio) + \"px\";\r\n        this.canvas.style.height = Math.floor(this._boundingRect.height / this.pixelRatio) + \"px\";\r\n\r\n        this.canvas.width = Math.floor(this._boundingRect.width * this._renderingScale);\r\n        this.canvas.height = Math.floor(this._boundingRect.height * this._renderingScale);\r\n\r\n        this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\r\n    }\r\n\r\n    /***\r\n     Resize all our elements: planes, shader passes and render targets\r\n     Their textures will be resized as well\r\n     ***/\r\n    resize() {\r\n        // resize the planes only if they are fully initiated\r\n        for(let i = 0; i < this.planes.length; i++) {\r\n            if(this.planes[i]._canDraw) {\r\n                this.planes[i].resize();\r\n            }\r\n        }\r\n\r\n        // resize the shader passes only if they are fully initiated\r\n        for(let i = 0; i < this.shaderPasses.length; i++) {\r\n            if(this.shaderPasses[i]._canDraw) {\r\n                this.shaderPasses[i].resize();\r\n            }\r\n        }\r\n\r\n        // resize the render targets\r\n        for(let i = 0; i < this.renderTargets.length; i++) {\r\n            this.renderTargets[i].resize();\r\n        }\r\n\r\n        // be sure we'll update the scene even if drawing is disabled\r\n        this.needRender();\r\n    }\r\n\r\n\r\n    /*** CLEAR SCENE ***/\r\n\r\n    /***\r\n     Clear our WebGL scene colors and depth\r\n     ***/\r\n    clear() {\r\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    /***\r\n     Clear our WebGL scene depth\r\n     ***/\r\n    clearDepth() {\r\n        this.gl.clear(this.gl.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    /***\r\n     Clear our WebGL scene colors and depth\r\n     ***/\r\n    clearColor() {\r\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n    }\r\n\r\n\r\n    /*** FRAME BUFFER OBJECTS ***/\r\n\r\n    /***\r\n     Called to bind or unbind a FBO\r\n\r\n     params:\r\n     @frameBuffer (frameBuffer): if frameBuffer is not null, bind it, unbind it otherwise\r\n     @cancelClear (bool / undefined): if we should cancel clearing the frame buffer (typically on init & resize)\r\n     ***/\r\n    bindFrameBuffer(frameBuffer, cancelClear) {\r\n        let bufferId = null;\r\n        if(frameBuffer) {\r\n            bufferId = frameBuffer.index;\r\n\r\n            // new frame buffer, bind it\r\n            if(bufferId !== this.state.frameBufferID) {\r\n                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, frameBuffer._frameBuffer);\r\n\r\n                this.gl.viewport(0, 0, frameBuffer._size.width, frameBuffer._size.height);\r\n\r\n                // if we should clear the buffer content\r\n                if(frameBuffer._shouldClear && !cancelClear) {\r\n                    this.clear();\r\n                }\r\n            }\r\n        }\r\n        else if(this.state.frameBufferID !== null) {\r\n            this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\r\n            this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\r\n        }\r\n\r\n        this.state.frameBufferID = bufferId;\r\n    }\r\n\r\n\r\n    /*** DEPTH ***/\r\n\r\n    /***\r\n     Called to set whether the renderer will handle depth test or not\r\n     Depth test is enabled by default\r\n\r\n     params:\r\n     @setDepth (boolean): if we should enable or disable the depth test\r\n     ***/\r\n    setDepthTest(depthTest) {\r\n        if(depthTest && !this.state.depthTest) {\r\n            this.state.depthTest = depthTest;\r\n            // enable depth test\r\n            this.gl.enable(this.gl.DEPTH_TEST);\r\n        }\r\n        else if(!depthTest && this.state.depthTest) {\r\n            this.state.depthTest = depthTest;\r\n            // disable depth test\r\n            this.gl.disable(this.gl.DEPTH_TEST);\r\n        }\r\n    }\r\n\r\n    /***\r\n     Called to set the depth buffer behavior\r\n     Only available option is gl.LEQUAL at the moment\r\n     (see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/depthFunc)\r\n     ***/\r\n    setDepthFunc() {\r\n        this.gl.depthFunc(this.gl.LEQUAL);\r\n    }\r\n\r\n\r\n    /*** BLENDING ***/\r\n\r\n    /***\r\n     Whether we should enable or disable the blending state\r\n     Used to draw transparent planes\r\n\r\n     params:\r\n     @enableBlending (boolean): if we should enable or disable the blending (default to false)\r\n     ***/\r\n    setBlending(enableBlending = false) {\r\n        if(enableBlending && !this.state.blending) {\r\n            this.state.blending = enableBlending;\r\n            // enable blending\r\n            this.gl.enable(this.gl.BLEND);\r\n        }\r\n        else if(!enableBlending && this.state.blending) {\r\n            this.state.blending = enableBlending;\r\n            // disable blending\r\n            this.gl.disable(this.gl.BLEND);\r\n        }\r\n    }\r\n\r\n    /***\r\n     Called to set the blending function (transparency)\r\n     ***/\r\n    setBlendFunc() {\r\n        // allows transparency\r\n        // based on how three.js solves this\r\n        this.gl.enable(this.gl.BLEND);\r\n        if(this.premultipliedAlpha) {\r\n            this.gl.blendFuncSeparate(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\r\n        }\r\n        else {\r\n            this.gl.blendFuncSeparate(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\r\n        }\r\n    }\r\n\r\n\r\n    /*** FACE CULLING ***/\r\n\r\n    /***\r\n     Called to set whether we should cull an object face or not\r\n\r\n     params:\r\n     @cullFace (boolean): what face we should cull\r\n     ***/\r\n    setFaceCulling(cullFace) {\r\n        if(this.state.cullFace !== cullFace) {\r\n            this.state.cullFace = cullFace;\r\n\r\n            if(cullFace === \"none\") {\r\n                this.gl.disable(this.gl.CULL_FACE);\r\n            }\r\n            else {\r\n                // default to back face culling\r\n                const faceCulling = cullFace === \"front\" ? this.gl.FRONT : this.gl.BACK;\r\n\r\n                this.gl.enable(this.gl.CULL_FACE);\r\n                this.gl.cullFace(faceCulling);\r\n            }\r\n        }\r\n    }\r\n\r\n    /***\r\n     Tell WebGL to use the specified program if it's not already in use\r\n\r\n     params:\r\n     @program (object): a program object\r\n     ***/\r\n    useProgram(program) {\r\n        if(this.state.currentProgramID === null || this.state.currentProgramID !== program.id) {\r\n            this.gl.useProgram(program.program);\r\n            this.state.currentProgramID = program.id;\r\n        }\r\n    }\r\n\r\n\r\n    /*** PLANES ***/\r\n\r\n\r\n    /***\r\n     Removes a Plane element (that has already been disposed) from the scene and the planes array\r\n\r\n     params:\r\n     @plane (Plane object): the plane to remove\r\n     ***/\r\n    removePlane(plane) {\r\n        if(!this.gl) return;\r\n\r\n        // remove from our planes array\r\n        this.planes = this.planes.filter(element => element.uuid !== plane.uuid);\r\n\r\n        // remove from scene stacks\r\n        this.scene.removePlane(plane);\r\n\r\n        plane = null;\r\n\r\n        // clear the buffer to clean scene\r\n        if(this.gl) this.clear();\r\n\r\n        // we've removed an object, keep Curtains class in sync with our renderer\r\n        this.onSceneChange();\r\n    }\r\n\r\n\r\n    /*** POST PROCESSING ***/\r\n\r\n\r\n    /***\r\n     Completely remove a RenderTarget element\r\n\r\n     params:\r\n     @renderTarget (RenderTarget object): the render target to remove\r\n     ***/\r\n    removeRenderTarget(renderTarget) {\r\n        if(!this.gl) return;\r\n\r\n        let hasPlane = this.planes.find(plane => plane.type !== \"PingPongPlane\" && plane.target && plane.target.uuid === renderTarget.uuid);\r\n\r\n        // loop through all planes that might use that render target and reset it\r\n        for(let i = 0; i < this.planes.length; i++) {\r\n            if(this.planes[i].target && this.planes[i].target.uuid === renderTarget.uuid) {\r\n                this.planes[i].target = null;\r\n            }\r\n        }\r\n\r\n        this.renderTargets = this.renderTargets.filter(element => element.uuid !== renderTarget.uuid);\r\n\r\n        // update render target indexes\r\n        for(let i = 0; i < this.renderTargets.length; i++) {\r\n            this.renderTargets[i].index = i;\r\n        }\r\n\r\n        renderTarget = null;\r\n\r\n        // clear the buffer to clean scene\r\n        if(this.gl) this.clear();\r\n\r\n        // we had at least a plane that was rendered in this render targets stack\r\n        // re init stacks\r\n        if(hasPlane) {\r\n            this.scene.resetPlaneStacks();\r\n        }\r\n\r\n        // we've removed an object, keep Curtains class in sync with our renderer\r\n        this.onSceneChange();\r\n    }\r\n\r\n\r\n    /*** SHADER PASSES ***/\r\n\r\n\r\n    /***\r\n     Removes a ShaderPass element (that has already been disposed) from the scene and the shaderPasses array\r\n\r\n     params:\r\n     @shaderPass (ShaderPass object): the shader pass to remove\r\n     ***/\r\n    removeShaderPass(shaderPass) {\r\n        if(!this.gl) return;\r\n\r\n        // remove from shaderPasses our array\r\n        this.shaderPasses = this.shaderPasses.filter(element => element.uuid !== shaderPass.uuid);\r\n\r\n        // remove from scene stacks\r\n        this.scene.removeShaderPass(shaderPass);\r\n\r\n        shaderPass = null;\r\n\r\n        // clear the buffer to clean scene\r\n        if(this.gl) this.clear();\r\n\r\n        // we've removed an object, keep Curtains class in sync with our renderer\r\n        this.onSceneChange();\r\n    }\r\n\r\n\r\n    /***\r\n     Enables the render loop\r\n     ***/\r\n    enableDrawing() {\r\n        this.state.drawingEnabled = true;\r\n    }\r\n\r\n    /***\r\n     Disables the render loop\r\n     ***/\r\n    disableDrawing() {\r\n        this.state.drawingEnabled = false;\r\n    }\r\n\r\n    /***\r\n     Forces the rendering of the next frame, even if disabled\r\n     ***/\r\n    needRender() {\r\n        this.state.forceRender = true;\r\n    }\r\n\r\n    /***\r\n     Called at each draw call to render our scene and its content\r\n     Also execute our nextRender callback queue\r\n     ***/\r\n    render() {\r\n        if(!this.gl) return;\r\n\r\n        // clear scene first\r\n        this.clear();\r\n\r\n        // reset attributes buffer state\r\n        this.state.currentGeometryID = null;\r\n\r\n        // draw our scene content\r\n        this.scene.draw();\r\n    }\r\n\r\n\r\n    /*** DISPOSING ***/\r\n\r\n    /***\r\n     Delete all cached programs\r\n     ***/\r\n    deletePrograms() {\r\n        // delete all programs from manager\r\n        for(let i = 0; i < this.cache.programs.length; i++) {\r\n            const program = this.cache.programs[i];\r\n            this.gl.deleteProgram(program.program);\r\n        }\r\n    }\r\n\r\n    /***\r\n     Dispose our WebGL context and all its objects\r\n     ***/\r\n    dispose() {\r\n        if(!this.gl) return;\r\n\r\n        this.state.isActive = false;\r\n\r\n        // be sure to delete all planes\r\n        while(this.planes.length > 0) {\r\n            this.removePlane(this.planes[0]);\r\n        }\r\n\r\n        // we need to delete the shader passes also\r\n        while(this.shaderPasses.length > 0) {\r\n            this.removeShaderPass(this.shaderPasses[0]);\r\n        }\r\n\r\n        // finally we need to delete the render targets\r\n        while(this.renderTargets.length > 0) {\r\n            this.removeRenderTarget(this.renderTargets[0]);\r\n        }\r\n\r\n        // wait for all planes to be deleted before stopping everything\r\n        let disposeQueue = this.nextRender.add(() => {\r\n            if(this.planes.length === 0 && this.shaderPasses.length === 0 && this.renderTargets.length === 0) {\r\n                // clear from callback queue\r\n                disposeQueue.keep = false;\r\n\r\n                this.deletePrograms();\r\n\r\n                // clear the buffer to clean scene\r\n                this.clear();\r\n\r\n                this.canvas.removeEventListener(\"webgllost\", this._contextLostHandler, false);\r\n                this.canvas.removeEventListener(\"webglrestored\", this._contextRestoredHandler, false);\r\n\r\n                // lose context\r\n                if(this.gl && this.extensions['WEBGL_lose_context']) {\r\n                    this.extensions['WEBGL_lose_context'].loseContext();\r\n                }\r\n\r\n                // clear canvas state\r\n                this.canvas.width = this.canvas.width;\r\n\r\n                this.gl = null;\r\n\r\n                // remove canvas from DOM\r\n                this.container.removeChild(this.canvas);\r\n\r\n                this.container = null;\r\n                this.canvas = null;\r\n\r\n                this.onDisposed && this.onDisposed();\r\n            }\r\n        }, true);\r\n    }\r\n}","/***\r\n Here we create a ScrollManager class object\r\n This keeps track of our scroll position, scroll deltas and triggers an onScroll callback\r\n Could either listen to the native scroll event or be hooked to any scroll (natural or virtual) scroll event\r\n\r\n params:\r\n @xOffset (float): scroll along X axis\r\n @yOffset (float): scroll along Y axis\r\n @lastXDelta (float): last scroll delta along X axis\r\n @lastYDelta (float): last scroll delta along Y axis\r\n\r\n @shouldWatch (bool): if the scroll manager should listen to the scroll event or not. Default to true.\r\n\r\n @onScroll (function): callback to execute each time the scroll values changed\r\n\r\n returns:\r\n @this: our ScrollManager class object\r\n ***/\r\nexport class ScrollManager {\r\n    constructor({\r\n        xOffset = 0,\r\n        yOffset = 0,\r\n        lastXDelta = 0,\r\n        lastYDelta = 0,\r\n\r\n        shouldWatch = true,\r\n\r\n        onScroll = () => {},\r\n    } = {}) {\r\n        this.xOffset = xOffset;\r\n        this.yOffset = yOffset;\r\n        this.lastXDelta = lastXDelta;\r\n        this.lastYDelta = lastYDelta;\r\n        this.shouldWatch = shouldWatch;\r\n\r\n        this.onScroll = onScroll;\r\n\r\n        // keep a ref to our scroll event\r\n        this.handler = this.scroll.bind(this, true);\r\n        if(this.shouldWatch) {\r\n            window.addEventListener(\"scroll\", this.handler, {\r\n                passive: true\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Called by the scroll event listener\r\n     ***/\r\n    scroll() {\r\n        this.updateScrollValues(window.pageXOffset, window.pageYOffset)\r\n    }\r\n\r\n\r\n    /***\r\n     Updates the scroll manager X and Y scroll values as well as last X and Y deltas\r\n     Internally called by the scroll handler\r\n     Could be called externally as well if the user wants to handle the scroll by himself\r\n\r\n     params:\r\n     @x (float): scroll value along X axis\r\n     @y (float): scroll value along Y axis\r\n     ***/\r\n    updateScrollValues(x, y) {\r\n        // get our scroll delta values\r\n        const lastScrollXValue = this.xOffset;\r\n        this.xOffset = x;\r\n        this.lastXDelta = lastScrollXValue - this.xOffset;\r\n\r\n        const lastScrollYValue = this.yOffset;\r\n        this.yOffset = y;\r\n        this.lastYDelta = lastScrollYValue - this.yOffset;\r\n\r\n        if(this.onScroll) {\r\n            this.onScroll(this.lastXDelta, this.lastYDelta);\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Dispose our scroll manager (just remove our event listner if it had been added previously)\r\n     ***/\r\n    dispose() {\r\n        if(this.shouldWatch) {\r\n            window.removeEventListener(\"scroll\", this.handler, {\r\n                passive: true\r\n            });\r\n        }\r\n    }\r\n}","const precisionMedium = `\r\nprecision mediump float;\r\n`;\r\nexport default precisionMedium.replace(/\\n/g, '');","const defaultAttributes = `\r\nattribute vec3 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\n`;\r\nexport default defaultAttributes.replace(/\\n/g, '');","const defaultVaryings = `\r\nvarying vec3 vVertexPosition;\r\nvarying vec2 vTextureCoord;\r\n`;\r\nexport default defaultVaryings.replace(/\\n/g, '');","import precisionMedium from './chunks/precision.medium.glsl.js';\r\nimport defaultAttributes from './chunks/default.attributes.glsl.js';\r\nimport defaultVaryings from './chunks/default.varyings.glsl.js';\r\n\r\nconst planeVS = precisionMedium + defaultAttributes + defaultVaryings + `\r\nuniform mat4 uMVMatrix;\r\nuniform mat4 uPMatrix;\r\n\r\nvoid main() {\r\n    vTextureCoord = aTextureCoord;\r\n    vVertexPosition = aVertexPosition;\r\n    \r\n    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\r\n}\r\n`;\r\nexport default planeVS.replace(/\\n/g, '');","import precisionMedium from './chunks/precision.medium.glsl.js';\r\nimport defaultVaryings from './chunks/default.varyings.glsl.js';\r\n\r\nconst planeFS = precisionMedium + defaultVaryings + `\r\nvoid main() {\r\n    gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n}\r\n`;\r\nexport default planeFS.replace(/\\n/g, '');","import precisionMedium from './chunks/precision.medium.glsl.js';\r\nimport defaultAttributes from './chunks/default.attributes.glsl.js';\r\nimport defaultVaryings from './chunks/default.varyings.glsl.js';\r\n\r\nconst shaderPassVS = precisionMedium + defaultAttributes + defaultVaryings + `\r\nvoid main() {\r\n    vTextureCoord = aTextureCoord;\r\n    vVertexPosition = aVertexPosition;\r\n    \r\n    gl_Position = vec4(aVertexPosition, 1.0);\r\n}\r\n`;\r\nexport default shaderPassVS.replace(/\\n/g, '');","import precisionMedium from './chunks/precision.medium.glsl.js';\r\nimport defaultVaryings from './chunks/default.varyings.glsl.js';\r\n\r\nconst shaderPassFS = precisionMedium + defaultVaryings + `\r\nuniform sampler2D uRenderTexture;\r\n\r\nvoid main() {\r\n    gl_FragColor = texture2D(uRenderTexture, vTextureCoord);\r\n}\r\n`;\r\nexport default shaderPassFS.replace(/\\n/g, '');","/***\r\n Here we create a Mat4 class object\r\n This is a really basic Matrix4 class used for matrix calculations\r\n Highly based on https://github.com/mrdoob/three.js/blob/dev/src/math/Matrix4.js and http://glmatrix.net/docs/mat4.js.html\r\n\r\n params :\r\n @elements (Float32Array of length 16): our matrix array. Default to identity matrix.\r\n\r\n returns :\r\n @this: our Mat4 class object\r\n ***/\r\n\r\n// TODO lot of (unused at the time) methods are missing\r\n\r\nexport class Mat4 {\r\n    constructor(\r\n        elements = new Float32Array([\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1\r\n        ]),\r\n    ) {\r\n        this.type = \"Mat4\";\r\n        this.elements = elements;\r\n    }\r\n\r\n    /***\r\n     Sets the matrix values from an array\r\n\r\n     params:\r\n     @array (array): an array of at least 16 elements\r\n\r\n     returns:\r\n     @this (Mat4 class object): this matrix after being set\r\n     ***/\r\n    setFromArray(array) {\r\n        for(let i = 0; i < this.elements.length; i++) {\r\n            this.elements[i] = array[i];\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /***\r\n     Copy another Mat4\r\n\r\n     params:\r\n     @matrix (Mat4 class object): matrix to copy\r\n\r\n     returns:\r\n     @this (Mat4 class object): this matrix after copy\r\n     ***/\r\n    copy(matrix) {\r\n        const array = matrix.elements;\r\n        this.elements[0] = array[0];\r\n        this.elements[1] = array[1];\r\n        this.elements[2] = array[2];\r\n        this.elements[3] = array[3];\r\n        this.elements[4] = array[4];\r\n        this.elements[5] = array[5];\r\n        this.elements[6] = array[6];\r\n        this.elements[7] = array[7];\r\n        this.elements[8] = array[8];\r\n        this.elements[9] = array[9];\r\n        this.elements[10] = array[10];\r\n        this.elements[11] = array[11];\r\n        this.elements[12] = array[12];\r\n        this.elements[13] = array[13];\r\n        this.elements[14] = array[14];\r\n        this.elements[15] = array[15];\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Clone a matrix\r\n\r\n     returns:\r\n     @clonedMatrix (Mat4 object): cloned matrix\r\n     ***/\r\n    clone() {\r\n        return new Mat4().copy(this);\r\n    }\r\n\r\n    /***\r\n     Simple matrix multiplication helper\r\n\r\n     params:\r\n     @matrix (Mat4 class object): Mat4 to multiply with\r\n\r\n     returns:\r\n     @result (Mat4 class object): Mat4 after multiplication\r\n     ***/\r\n    multiply(matrix) {\r\n        const a = this.elements;\r\n        const b = matrix.elements;\r\n\r\n        let result = new Mat4();\r\n\r\n        result.elements[0] = b[0] * a[0] + b[1] * a[4] + b[2] * a[8] + b[3] * a[12];\r\n        result.elements[1] = b[0] * a[1] + b[1] * a[5] + b[2] * a[9] + b[3] * a[13];\r\n        result.elements[2] = b[0] * a[2] + b[1] * a[6] + b[2] * a[10] + b[3] * a[14];\r\n        result.elements[3] = b[0] * a[3] + b[1] * a[7] + b[2] * a[11] + b[3] * a[15];\r\n\r\n        result.elements[4] = b[4] * a[0] + b[5] * a[4] + b[6] * a[8] + b[7] * a[12];\r\n        result.elements[5] = b[4] * a[1] + b[5] * a[5] + b[6] * a[9] + b[7] * a[13];\r\n        result.elements[6] = b[4] * a[2] + b[5] * a[6] + b[6] * a[10] + b[7] * a[14];\r\n        result.elements[7] = b[4] * a[3] + b[5] * a[7] + b[6] * a[11] + b[7] * a[15];\r\n\r\n        result.elements[8] = b[8] * a[0] + b[9] * a[4] + b[10] * a[8] + b[11] * a[12];\r\n        result.elements[9] = b[8] * a[1] + b[9] * a[5] + b[10] * a[9] + b[11] * a[13];\r\n        result.elements[10] = b[8] * a[2] + b[9] * a[6] + b[10] * a[10] + b[11] * a[14];\r\n        result.elements[11] = b[8] * a[3] + b[9] * a[7] + b[10] * a[11] + b[11] * a[15];\r\n\r\n        result.elements[12] = b[12] * a[0] + b[13] * a[4] + b[14] * a[8] + b[15] * a[12];\r\n        result.elements[13] = b[12] * a[1] + b[13] * a[5] + b[14] * a[9] + b[15] * a[13];\r\n        result.elements[14] = b[12] * a[2] + b[13] * a[6] + b[14] * a[10] + b[15] * a[14];\r\n        result.elements[15] = b[12] * a[3] + b[13] * a[7] + b[14] * a[11] + b[15] * a[15];\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    /***\r\n     Get matrix inverse\r\n\r\n     returns:\r\n     @result (Mat4 class object): inverted Mat4\r\n     ***/\r\n    getInverse() {\r\n        const te = this.elements;\r\n        const out = new Mat4();\r\n        const oe = out.elements;\r\n\r\n        let a00 = te[0],\r\n            a01 = te[1],\r\n            a02 = te[2],\r\n            a03 = te[3];\r\n\r\n        let a10 = te[4],\r\n            a11 = te[5],\r\n            a12 = te[6],\r\n            a13 = te[7];\r\n\r\n        let a20 = te[8],\r\n            a21 = te[9],\r\n            a22 = te[10],\r\n            a23 = te[11];\r\n\r\n        let a30 = te[12],\r\n            a31 = te[13],\r\n            a32 = te[14],\r\n            a33 = te[15];\r\n\r\n        let b00 = a00 * a11 - a01 * a10;\r\n        let b01 = a00 * a12 - a02 * a10;\r\n        let b02 = a00 * a13 - a03 * a10;\r\n        let b03 = a01 * a12 - a02 * a11;\r\n        let b04 = a01 * a13 - a03 * a11;\r\n        let b05 = a02 * a13 - a03 * a12;\r\n        let b06 = a20 * a31 - a21 * a30;\r\n        let b07 = a20 * a32 - a22 * a30;\r\n        let b08 = a20 * a33 - a23 * a30;\r\n        let b09 = a21 * a32 - a22 * a31;\r\n        let b10 = a21 * a33 - a23 * a31;\r\n        let b11 = a22 * a33 - a23 * a32;\r\n\r\n        // Calculate the determinant\r\n\r\n        let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n        if (!det) {\r\n            return null;\r\n        }\r\n        det = 1 / det;\r\n\r\n        oe[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        oe[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        oe[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        oe[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n        oe[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        oe[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        oe[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        oe[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n        oe[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n        oe[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n        oe[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n        oe[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n        oe[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n        oe[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n        oe[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n        oe[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n        return out;\r\n    }\r\n\r\n\r\n    /***\r\n     Simple Mat4 scaling helper\r\n\r\n     params :\r\n     @vector (Vec3 class object): Vec3 representing scale along X, Y and Z axis\r\n\r\n     returns :\r\n     @result (Mat4 class object): Mat4 after scaling\r\n     ***/\r\n    scale(vector) {\r\n        let a = this.elements;\r\n\r\n        a[0] *= vector.x;\r\n        a[1] *= vector.x;\r\n        a[2] *= vector.x;\r\n        a[3] *= vector.x;\r\n        a[4] *= vector.y;\r\n        a[5] *= vector.y;\r\n        a[6] *= vector.y;\r\n        a[7] *= vector.y;\r\n        a[8] *= vector.z;\r\n        a[9] *= vector.z;\r\n        a[10] *= vector.z;\r\n        a[11] *= vector.z;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n     Equivalent for applying translation, rotation and scale matrices but much faster\r\n     Source code from: http://glmatrix.net/docs/mat4.js.html\r\n\r\n     params :\r\n     @translation (Vec3 class object): translation vector\r\n     @quaternion (Quat class object): rotation quaternion\r\n     @scale (Vec3 class object): scale vector\r\n\r\n     returns :\r\n     @this (Mat4 class object): matrix after transformations\r\n     ***/\r\n    compose(translation, quaternion, scale) {\r\n        let matrix = this.elements;\r\n\r\n        // Quaternion math\r\n        const x = quaternion.elements[0], y = quaternion.elements[1], z = quaternion.elements[2], w = quaternion.elements[3];\r\n\r\n        const x2 = x + x;\r\n        const y2 = y + y;\r\n        const z2 = z + z;\r\n        const xx = x * x2;\r\n        const xy = x * y2;\r\n        const xz = x * z2;\r\n        const yy = y * y2;\r\n        const yz = y * z2;\r\n        const zz = z * z2;\r\n        const wx = w * x2;\r\n        const wy = w * y2;\r\n        const wz = w * z2;\r\n        const sx = scale.x;\r\n        const sy = scale.y;\r\n        const sz = scale.z;\r\n\r\n        matrix[0] = (1 - (yy + zz)) * sx;\r\n        matrix[1] = (xy + wz) * sx;\r\n        matrix[2] = (xz - wy) * sx;\r\n        matrix[3] = 0;\r\n        matrix[4] = (xy - wz) * sy;\r\n        matrix[5] = (1 - (xx + zz)) * sy;\r\n        matrix[6] = (yz + wx) * sy;\r\n        matrix[7] = 0;\r\n        matrix[8] = (xz + wy) * sz;\r\n        matrix[9] = (yz - wx) * sz;\r\n        matrix[10] = (1 - (xx + yy)) * sz;\r\n        matrix[11] = 0;\r\n        matrix[12] = translation.x;\r\n        matrix[13] = translation.y;\r\n        matrix[14] = translation.z;\r\n        matrix[15] = 1;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n     Equivalent for applying translation, rotation and scale matrices but much faster\r\n     Source code from: http://glmatrix.net/docs/mat4.js.html\r\n\r\n     params :\r\n     @translation (Vec3 class object): translation vector\r\n     @quaternion (Quat class object): rotation quaternion\r\n     @scale (Vec3 class object): scale vector\r\n     @origin (Vec3 class object): origin vector around which to scale and rotate\r\n\r\n     returns :\r\n     @this (Mat4 class object): matrix after transformations\r\n     ***/\r\n    composeFromOrigin(translation, quaternion, scale, origin) {\r\n        let matrix = this.elements;\r\n\r\n        // Quaternion math\r\n        const x = quaternion.elements[0], y = quaternion.elements[1], z = quaternion.elements[2], w = quaternion.elements[3];\r\n\r\n        const x2 = x + x;\r\n        const y2 = y + y;\r\n        const z2 = z + z;\r\n\r\n        const xx = x * x2;\r\n        const xy = x * y2;\r\n        const xz = x * z2;\r\n        const yy = y * y2;\r\n        const yz = y * z2;\r\n        const zz = z * z2;\r\n\r\n        const wx = w * x2;\r\n        const wy = w * y2;\r\n        const wz = w * z2;\r\n\r\n        const sx = scale.x;\r\n        const sy = scale.y;\r\n        const sz = scale.z; // scale along Z is always equal to 1 anyway\r\n\r\n        const ox = origin.x;\r\n        const oy = origin.y;\r\n        const oz = origin.z;\r\n\r\n        const out0 = (1 - (yy + zz)) * sx;\r\n        const out1 = (xy + wz) * sx;\r\n        const out2 = (xz - wy) * sx;\r\n        const out4 = (xy - wz) * sy;\r\n        const out5 = (1 - (xx + zz)) * sy;\r\n        const out6 = (yz + wx) * sy;\r\n        const out8 = (xz + wy) * sz;\r\n        const out9 = (yz - wx) * sz;\r\n        const out10 = (1 - (xx + yy)) * sz;\r\n\r\n        matrix[0] = out0;\r\n        matrix[1] = out1;\r\n        matrix[2] = out2;\r\n        matrix[3] = 0;\r\n        matrix[4] = out4;\r\n        matrix[5] = out5;\r\n        matrix[6] = out6;\r\n        matrix[7] = 0;\r\n        matrix[8] = out8;\r\n        matrix[9] = out9;\r\n        matrix[10] = out10;\r\n        matrix[11] = 0;\r\n        matrix[12] = translation.x + ox - (out0 * ox + out4 * oy + out8 * oz);\r\n        matrix[13] = translation.y + oy - (out1 * ox + out5 * oy + out9 * oz);\r\n        matrix[14] = translation.z + oz - (out2 * ox + out6 * oy + out10 * oz);\r\n        matrix[15] = 1;\r\n\r\n        return this;\r\n    }\r\n}","/***\r\n Here we create a Vec2 class object\r\n This is a really basic Vector2 class used for vector calculations\r\n Highly based on https://github.com/mrdoob/three.js/blob/dev/src/math/Vector2.js and http://glmatrix.net/docs/vec2.js.html\r\n\r\n params :\r\n @x (float): X component of our vector\r\n @y (float): Y component of our vector\r\n\r\n returns :\r\n @this: our Vec2 class object\r\n ***/\r\n\r\n// TODO lot of (unused at the time) methods are missing\r\n\r\nexport class Vec2 {\r\n    constructor(\r\n        x = 0,\r\n        y = x,\r\n    ) {\r\n        this.type = \"Vec2\";\r\n\r\n        this._x = x;\r\n        this._y = y;\r\n    }\r\n\r\n    /***\r\n     Getters and setters (with onChange callback)\r\n     ***/\r\n    get x() {\r\n        return this._x;\r\n    }\r\n\r\n    get y() {\r\n        return this._y;\r\n    }\r\n\r\n    set x(value) {\r\n        const changed = value !== this._x;\r\n        this._x = value;\r\n        changed && this._onChangeCallback && this._onChangeCallback();\r\n    }\r\n\r\n    set y(value) {\r\n        const changed = value !== this._y;\r\n        this._y = value;\r\n        changed && this._onChangeCallback && this._onChangeCallback();\r\n    }\r\n\r\n    onChange(callback) {\r\n        if(callback) {\r\n            this._onChangeCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /***\r\n     Sets the vector from values\r\n\r\n     params:\r\n     @x (float): X component of our vector\r\n     @y (float): Y component of our vector\r\n\r\n     returns:\r\n     @this (Vec2): this vector after being set\r\n     ***/\r\n    set(x, y) {\r\n        this._x = x;\r\n        this._y = y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /***\r\n     Adds a vector to this vector\r\n\r\n     params:\r\n     @vector (Vec2): vector to add\r\n\r\n     returns:\r\n     @this (Vec2): this vector after addition\r\n     ***/\r\n    add(vector) {\r\n        this._x += vector.x;\r\n        this._y += vector.y;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Adds a scalar to this vector\r\n\r\n     params:\r\n     @value (float): number to add\r\n\r\n     returns:\r\n     @this (Vec2): this vector after addition\r\n     ***/\r\n    addScalar(value) {\r\n        this._x += value;\r\n        this._y += value;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Subtracts a vector from this vector\r\n\r\n     params:\r\n     @vector (Vec2): vector to use for subtraction\r\n\r\n     returns:\r\n     @this (Vec2): this vector after subtraction\r\n     ***/\r\n    sub(vector) {\r\n        this._x -= vector.x;\r\n        this._y -= vector.y;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Subtracts a scalar to this vector\r\n\r\n     params:\r\n     @value (float): number to use for subtraction\r\n\r\n     returns:\r\n     @this (Vec2): this vector after subtraction\r\n     ***/\r\n    subScalar(value) {\r\n        this._x -= value;\r\n        this._y -= value;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Multiplies a vector with this vector\r\n\r\n     params:\r\n     @vector (Vec2): vector to use for multiplication\r\n\r\n     returns:\r\n     @this (Vec2): this vector after multiplication\r\n     ***/\r\n    multiply(vector) {\r\n        this._x *= vector.x;\r\n        this._y *= vector.y;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Multiplies a scalar with this vector\r\n\r\n     params:\r\n     @value (float): number to use for multiplication\r\n\r\n     returns:\r\n     @this (Vec2): this vector after multiplication\r\n     ***/\r\n    multiplyScalar(value) {\r\n        this._x *= value;\r\n        this._y *= value;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Copy a vector into this vector\r\n\r\n     params:\r\n     @vector (Vec2): vector to copy\r\n\r\n     returns:\r\n     @this (Vec2): this vector after copy\r\n     ***/\r\n    copy(vector) {\r\n        this._x = vector.x;\r\n        this._y = vector.y;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Clone this vector\r\n\r\n     returns:\r\n     @vector (Vec2): cloned vector\r\n     ***/\r\n    clone() {\r\n        return new Vec2(this._x, this._y);\r\n    }\r\n\r\n\r\n    /***\r\n     Merges this vector with a vector when values are NaN. Mostly used internally.\r\n\r\n     params:\r\n     @vector (Vec2): vector to use for sanitization\r\n\r\n     returns:\r\n     @vector (Vec2): sanitized vector\r\n     ***/\r\n    sanitizeNaNValuesWith(vector) {\r\n        this._x = isNaN(this._x) ? vector.x : parseFloat(this._x);\r\n        this._y = isNaN(this._y) ? vector.y : parseFloat(this._y);\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Apply max values to this vector\r\n\r\n     params:\r\n     @vector (Vec2): vector representing max values\r\n\r\n     returns:\r\n     @vector (Vec2): vector with max values applied\r\n     ***/\r\n    max(vector) {\r\n        this._x = Math.max(this._x, vector.x);\r\n        this._y = Math.max(this._y, vector.y);\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Apply min values to this vector\r\n\r\n     params:\r\n     @vector (Vec2): vector representing min values\r\n\r\n     returns:\r\n     @vector (Vec2): vector with min values applied\r\n     ***/\r\n    min(vector) {\r\n        this._x = Math.min(this._x, vector.x);\r\n        this._y = Math.min(this._y, vector.y);\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Checks if 2 vectors are equal\r\n\r\n     params:\r\n     @vector (Vec2): vector to compare\r\n\r\n     returns:\r\n     @isEqual (bool): whether the vectors are equals or not\r\n     ***/\r\n    equals(vector) {\r\n        return this._x === vector.x && this._y === vector.y;\r\n    }\r\n\r\n\r\n    /***\r\n     Normalize this vector\r\n\r\n     returns:\r\n     @this (Vec2): normalized vector\r\n     ***/\r\n    normalize() {\r\n        // normalize\r\n        let len = this._x * this._x + this._y * this._y;\r\n        if (len > 0) {\r\n            len = 1 / Math.sqrt(len);\r\n        }\r\n        this._x *= len;\r\n        this._y *= len;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Calculates the dot product of 2 vectors\r\n\r\n     params:\r\n     @vector (Vec2): vector to use for dot product\r\n\r\n     returns:\r\n     @dotProduct (float): dot product of the 2 vectors\r\n     ***/\r\n    dot(vector) {\r\n        return this._x * vector.x + this._y * vector.y;\r\n    }\r\n}","/***\r\n Here we create a Vec3 class object\r\n This is a really basic Vector3 class used for vector calculations\r\n Highly based on https://github.com/mrdoob/three.js/blob/dev/src/math/Vector3.js and http://glmatrix.net/docs/vec3.js.html\r\n\r\n params :\r\n @x (float): X component of our vector\r\n @y (float): Y component of our vector\r\n @z (float): Z component of our vector\r\n\r\n returns :\r\n @this: our Vec3 class object\r\n ***/\r\n\r\n// TODO lot of (unused at the time) methods are missing\r\n\r\nexport class Vec3 {\r\n    constructor(\r\n        x = 0,\r\n        y = x,\r\n        z = x,\r\n    ) {\r\n        this.type = \"Vec3\";\r\n\r\n        this._x = x;\r\n        this._y = y;\r\n        this._z = z;\r\n    }\r\n\r\n    /***\r\n     Getters and setters (with onChange callback)\r\n     ***/\r\n    get x() {\r\n        return this._x;\r\n    }\r\n\r\n    get y() {\r\n        return this._y;\r\n    }\r\n\r\n    get z() {\r\n        return this._z;\r\n    }\r\n\r\n    set x(value) {\r\n        const changed = value !== this._x;\r\n        this._x = value;\r\n        changed && this._onChangeCallback && this._onChangeCallback();\r\n    }\r\n\r\n    set y(value) {\r\n        const changed = value !== this._y;\r\n        this._y = value;\r\n        changed && this._onChangeCallback && this._onChangeCallback();\r\n    }\r\n\r\n    set z(value) {\r\n        const changed = value !== this._z;\r\n        this._z = value;\r\n        changed && this._onChangeCallback && this._onChangeCallback();\r\n    }\r\n\r\n    onChange(callback) {\r\n        if(callback) {\r\n            this._onChangeCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /***\r\n     Sets the vector from values\r\n\r\n     params:\r\n     @x (float): X component of our vector\r\n     @y (float): Y component of our vector\r\n     @z (float): Z component of our vector\r\n\r\n     returns:\r\n     @this (Vec2): this vector after being set\r\n     ***/\r\n    set(x, y, z) {\r\n        this._x = x;\r\n        this._y = y;\r\n        this._z = z;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Adds a vector to this vector\r\n\r\n     params:\r\n     @vector (Vec3): vector to add\r\n\r\n     returns:\r\n     @this (Vec3): this vector after addition\r\n     ***/\r\n    add(vector) {\r\n        this._x += vector.x;\r\n        this._y += vector.y;\r\n        this._z += vector.z;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Adds a scalar to this vector\r\n\r\n     params:\r\n     @value (float): number to add\r\n\r\n     returns:\r\n     @this (Vec3): this vector after addition\r\n     ***/\r\n    addScalar(value) {\r\n        this._x += value;\r\n        this._y += value;\r\n        this._z += value;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Subtracts a vector from this vector\r\n\r\n     params:\r\n     @vector (Vec3): vector to use for subtraction\r\n\r\n     returns:\r\n     @this (Vec3): this vector after subtraction\r\n     ***/\r\n    sub(vector) {\r\n        this._x -= vector.x;\r\n        this._y -= vector.y;\r\n        this._z -= vector.z;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Subtracts a scalar to this vector\r\n\r\n     params:\r\n     @value (float): number to use for subtraction\r\n\r\n     returns:\r\n     @this (Vec3): this vector after subtraction\r\n     ***/\r\n    subScalar(value) {\r\n        this._x -= value;\r\n        this._y -= value;\r\n        this._z -= value;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Multiplies a vector with this vector\r\n\r\n     params:\r\n     @vector (Vec3): vector to use for multiplication\r\n\r\n     returns:\r\n     @this (Vec3): this vector after multiplication\r\n     ***/\r\n    multiply(vector) {\r\n        this._x *= vector.x;\r\n        this._y *= vector.y;\r\n        this._z *= vector.z;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Multiplies a scalar with this vector\r\n\r\n     params:\r\n     @value (float): number to use for multiplication\r\n\r\n     returns:\r\n     @this (Vec3): this vector after multiplication\r\n     ***/\r\n    multiplyScalar(value) {\r\n        this._x *= value;\r\n        this._y *= value;\r\n        this._z *= value;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Copy a vector into this vector\r\n\r\n     params:\r\n     @vector (Vec3): vector to copy\r\n\r\n     returns:\r\n     @this (Vec3): this vector after copy\r\n     ***/\r\n    copy(vector) {\r\n        this._x = vector.x;\r\n        this._y = vector.y;\r\n        this._z = vector.z;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Clone this vector\r\n\r\n     returns:\r\n     @vector (Vec3): cloned vector\r\n     ***/\r\n    clone() {\r\n        return new Vec3(this._x, this._y, this._z);\r\n    }\r\n\r\n\r\n    /***\r\n     Merges this vector with a vector when values are NaN. Mostly used internally.\r\n\r\n     params:\r\n     @vector (Vec3): vector to use for sanitization\r\n\r\n     returns:\r\n     @vector (Vec3): sanitized vector\r\n     ***/\r\n    sanitizeNaNValuesWith(vector) {\r\n        this._x = isNaN(this._x) ? vector.x : parseFloat(this._x);\r\n        this._y = isNaN(this._y) ? vector.y : parseFloat(this._y);\r\n        this._z = isNaN(this._z) ? vector.z : parseFloat(this._z);\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Apply max values to this vector\r\n\r\n     params:\r\n     @vector (Vec3): vector representing max values\r\n\r\n     returns:\r\n     @vector (Vec3): vector with max values applied\r\n     ***/\r\n    max(vector) {\r\n        this._x = Math.max(this._x, vector.x);\r\n        this._y = Math.max(this._y, vector.y);\r\n        this._z = Math.max(this._z, vector.z);\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Apply min values to this vector\r\n\r\n     params:\r\n     @vector (Vec3): vector representing min values\r\n\r\n     returns:\r\n     @vector (Vec3): vector with min values applied\r\n     ***/\r\n    min(vector) {\r\n        this._x = Math.min(this._x, vector.x);\r\n        this._y = Math.min(this._y, vector.y);\r\n        this._z = Math.min(this._z, vector.z);\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Checks if 2 vectors are equal\r\n\r\n     returns:\r\n     @isEqual (bool): whether the vectors are equals or not\r\n     ***/\r\n    equals(vector) {\r\n        return this._x === vector.x && this._y === vector.y && this._z === vector.z;\r\n    }\r\n\r\n\r\n    /***\r\n     Normalize this vector\r\n\r\n     returns:\r\n     @this (Vec3): normalized vector\r\n     ***/\r\n    normalize() {\r\n        // normalize\r\n        let len = this._x * this._x + this._y * this._y + this._z * this._z;\r\n        if (len > 0) {\r\n            len = 1 / Math.sqrt(len);\r\n        }\r\n        this._x *= len;\r\n        this._y *= len;\r\n        this._z *= len;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Calculates the dot product of 2 vectors\r\n\r\n     returns:\r\n     @dotProduct (float): dot product of the 2 vectors\r\n     ***/\r\n    dot(vector) {\r\n        return this._x * vector.x + this._y * vector.y + this._z * vector.z;\r\n    }\r\n\r\n\r\n\r\n    /***\r\n     Apply a matrix 4 to a point (vec3)\r\n     Useful to convert a point position from plane local world to webgl space using projection view matrix for example\r\n     Source code from: http://glmatrix.net/docs/vec3.js.html\r\n\r\n     params :\r\n     @matrix (array): 4x4 matrix used\r\n\r\n     returns :\r\n     @this (Vec3): this vector after matrix application\r\n     ***/\r\n    applyMat4(matrix) {\r\n        const x = this._x, y = this._y, z = this._z;\r\n        const mArray = matrix.elements;\r\n\r\n        let w = mArray[3] * x + mArray[7] * y + mArray[11] * z + mArray[15];\r\n        w = w || 1;\r\n\r\n        this._x = (mArray[0] * x + mArray[4] * y + mArray[8] * z + mArray[12]) / w;\r\n        this._y = (mArray[1] * x + mArray[5] * y + mArray[9] * z + mArray[13]) / w;\r\n        this._z = (mArray[2] * x + mArray[6] * y + mArray[10] * z + mArray[14]) / w;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Apply a quaternion (rotation in 3D space) to this vector\r\n\r\n     params :\r\n     @quaternion (Quat): quaternion to use\r\n\r\n     returns :\r\n     @this (Vec3): this vector after applying the transformation\r\n     ***/\r\n    applyQuat(quaternion) {\r\n        const x = this._x, y = this._y, z = this._z;\r\n        const qx = quaternion.elements[0], qy = quaternion.elements[1], qz = quaternion.elements[2], qw = quaternion.elements[3];\r\n\r\n        // calculate quat * vector\r\n\r\n        const ix = qw * x + qy * z - qz * y;\r\n        const iy = qw * y + qz * x - qx * z;\r\n        const iz = qw * z + qx * y - qy * x;\r\n        const iw = - qx * x - qy * y - qz * z;\r\n\r\n        // calculate result * inverse quat\r\n\r\n        this._x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\r\n        this._y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\r\n        this._z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Project 3D coordinate to 2D point\r\n\r\n     params:\r\n     @camera (Camera): camera to use for projection\r\n     ***/\r\n    project(camera) {\r\n        this.applyMat4(camera.viewMatrix).applyMat4(camera.projectionMatrix);\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Unproject 2D point to 3D coordinate\r\n\r\n     params:\r\n     @camera (Camera): camera to use for projection\r\n     ***/\r\n    unproject(camera) {\r\n        this.applyMat4(camera.projectionMatrix.getInverse()).applyMat4(camera.worldMatrix);\r\n        return this;\r\n    }\r\n}","import {Mat4} from '../math/Mat4.js';\r\nimport {Vec2} from '../math/Vec2.js';\r\nimport {Vec3} from '../math/Vec3.js';\r\nimport {generateUUID, throwError, throwWarning, isPowerOf2} from '../utils/utils.js';\r\n\r\n/***\r\n Texture class objects used by render targets, shader passes and planes.\r\n\r\n params:\r\n @renderer (Curtains renderer or Renderer class object): our curtains object OR our curtains renderer object\r\n\r\n @isFBOTexture (bool): Whether this texture is used by a render target/frame buffer object. Default to false\r\n @fromTexture (bool): Whether this texture should copy another texture right from init (and avoid creating a new webgl texture). Default to false\r\n @loader (TextureLoader class object): loader used to create that texture and load its source. Default to null\r\n\r\n @sampler (string): the texture sampler's name that will be used in the shaders\r\n\r\n @floatingPoint (string): texture floating point to apply. Could be \"float\", \"half-float\" or \"none\". Default to \"none\"\r\n\r\n @premultiplyAlpha (bool): Whether this texture should handle premultiplied alpha. Default to false\r\n @anisotropy (int): Texture anisotropy (see https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic). Default to 1\r\n @generateMipmap (bool): Whether to generate texture mipmaps (see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/generateMipmap). Default to true except for frame buffer objects textures.\r\n\r\n see https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/samplerParameter\r\n @wrapS (GLenum): WebGL constant specifying the texture wrapping function for the texture coordinate S\r\n @wrapT (GLenum): WebGL constant specifying the texture wrapping function for the texture coordinate T\r\n @minFilter (GLenum): WebGL constant specifying the texture minification filter\r\n @magFilter (GLenum): WebGL constant specifying the texture magnification filter\r\n\r\n returns:\r\n @this: our newly created Texture class object\r\n ***/\r\n\r\n// avoid reinstancing those during runtime\r\nconst tempVec2 = new Vec2();\r\nconst tempVec3 = new Vec3();\r\n\r\nconst textureTranslation = new Mat4();\r\n\r\nexport class Texture {\r\n    constructor(renderer, {\r\n        isFBOTexture = false,\r\n        fromTexture = false,\r\n        loader,\r\n\r\n        // texture sampler name\r\n        sampler,\r\n\r\n        // floating point textures\r\n        floatingPoint = \"none\",\r\n\r\n        // texture parameters\r\n        premultiplyAlpha = false,\r\n        anisotropy = 1,\r\n        generateMipmap = null,\r\n\r\n        wrapS,\r\n        wrapT,\r\n        minFilter,\r\n        magFilter,\r\n    } = {}) {\r\n        this.type = \"Texture\";\r\n\r\n        // we could pass our curtains object OR our curtains renderer object\r\n        renderer = renderer && renderer.renderer || renderer;\r\n\r\n        if(!renderer || renderer.type !== \"Renderer\") {\r\n            throwError(this.type + \": Renderer not passed as first argument\", renderer);\r\n        }\r\n        else if(!renderer.gl) {\r\n            if(!renderer.production) throwError(this.type + \": Unable to create a \" + this.type + \" because the Renderer WebGL context is not defined\");\r\n\r\n            // return if no gl context\r\n            return;\r\n        }\r\n        this.renderer = renderer;\r\n        this.gl = this.renderer.gl;\r\n\r\n        this.uuid = generateUUID();\r\n\r\n        // texture parameters\r\n        this._globalParameters = {\r\n            // global gl context parameters\r\n            unpackAlignment: 4,\r\n            flipY: !isFBOTexture,\r\n            premultiplyAlpha: false,\r\n            shouldPremultiplyAlpha: premultiplyAlpha,\r\n\r\n            // texImage2D properties\r\n            floatingPoint: floatingPoint,\r\n            type: this.gl.UNSIGNED_BYTE,\r\n            internalFormat: this.gl.RGBA,\r\n            format: this.gl.RGBA,\r\n        };\r\n\r\n        this.parameters = {\r\n            // per texture parameters\r\n            anisotropy,\r\n            generateMipmap: generateMipmap,\r\n\r\n            wrapS: wrapS || this.gl.CLAMP_TO_EDGE,\r\n            wrapT: wrapT || this.gl.CLAMP_TO_EDGE,\r\n            minFilter: minFilter || this.gl.LINEAR,\r\n            magFilter: magFilter || this.gl.LINEAR,\r\n\r\n            _shouldUpdate: true,\r\n        };\r\n\r\n        // per texture state\r\n        this._initState();\r\n\r\n        // is it a frame buffer object texture?\r\n        // if it's not, type will change when the source will be loaded\r\n        this.sourceType = isFBOTexture ? \"fbo\" : \"empty\";\r\n\r\n        // whether to use cache for image textures\r\n        this._useCache = true;\r\n\r\n        this._samplerName = sampler;\r\n\r\n        // prepare texture sampler\r\n        this._sampler = {\r\n            isActive: false,\r\n            isTextureBound: false,\r\n            texture: this.gl.createTexture(), // always create a gl texture\r\n        };\r\n\r\n        // we will always declare a texture matrix\r\n        this._textureMatrix = {\r\n            matrix: new Mat4(),\r\n            isActive: false\r\n        };\r\n\r\n        // actual size will be set later on\r\n        this._size = {\r\n            width: 1,\r\n            height: 1,\r\n        };\r\n\r\n        this.scale = new Vec2(1);\r\n        this.scale.onChange(() => this.resize());\r\n\r\n        this.offset = new Vec2();\r\n        this.offset.onChange(() => this.resize());\r\n\r\n        // source loading and GPU uploading flags\r\n        this._loader = loader;\r\n        this._sourceLoaded = false;\r\n        this._uploaded = false;\r\n\r\n        // _willUpdate and shouldUpdate property are set to false by default\r\n        // we will handle that in the setSource() method for videos and canvases\r\n        this._willUpdate = false;\r\n        this.shouldUpdate = false;\r\n\r\n        // if we need to force a texture update\r\n        this._forceUpdate = false;\r\n\r\n        // custom user properties\r\n        this.userData = {};\r\n\r\n        // useful flag to avoid binding texture that does not belong to current context\r\n        this._canDraw = false;\r\n\r\n        // is it set from an existing texture?\r\n        if(fromTexture) {\r\n            this._copyOnInit = true;\r\n            this._copiedFrom = fromTexture;\r\n\r\n            // everything else will be done when adding a parent to that texture\r\n            return;\r\n        }\r\n\r\n        this._copyOnInit = false;\r\n\r\n        // init our texture\r\n        this._initTexture();\r\n    }\r\n\r\n\r\n    /***\r\n     Init per-texture parameters state\r\n     Called on init and on context restoration to force parameters settings\r\n     ***/\r\n    _initState() {\r\n        this._state = {\r\n            anisotropy: 1,\r\n            generateMipmap: false,\r\n\r\n            wrapS: null,\r\n            wrapT: null,\r\n            minFilter: null,\r\n            magFilter: this.gl.LINEAR, // default to gl.LINEAR\r\n        };\r\n    }\r\n\r\n    /***\r\n     Init our texture object\r\n     ***/\r\n    _initTexture() {\r\n        // bind the texture the target (TEXTURE_2D) of the active texture unit.\r\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this._sampler.texture);\r\n\r\n        if(this.sourceType === \"empty\") {\r\n            // avoid flipY on non DOM elements\r\n            this._globalParameters.flipY = false;\r\n            // update global parameters before drawing an empty texture\r\n            this._updateGlobalTexParameters();\r\n\r\n            // draw a black plane before the real texture's content has been loaded\r\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, 1, 1, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 0, 255]));\r\n\r\n            this._canDraw = true;\r\n        }\r\n    }\r\n\r\n\r\n    /*** RESTORING CONTEXT ***/\r\n\r\n    /***\r\n     Restore a WebGL texture that is a copy\r\n     Depending on whether it's a copy from start or not, just reset its uniforms or run the full init\r\n     And finally copy our original texture back again\r\n     ***/\r\n    _restoreFromTexture() {\r\n        // init again if needed\r\n        if(!this._copyOnInit) {\r\n            this._initTexture();\r\n        }\r\n\r\n        // a texture shouldn't be restored if it does not have a parent\r\n        // since it's always the parent that calls the _restoreContext() method\r\n        if(this._parent) {\r\n            // set uniforms again\r\n            this._setTextureUniforms();\r\n\r\n            // update the texture matrix uniform as well\r\n            this._setSize();\r\n        }\r\n\r\n        // copy our texture again\r\n        this.copy(this._copiedFrom);\r\n\r\n        this._canDraw = true;\r\n    }\r\n\r\n\r\n    /***\r\n     Restore our WebGL texture\r\n     If it is an original texture, just re run the init function and eventually reset its source\r\n     If it is a texture set from another texture, wait for the original texture to be ready first\r\n     ***/\r\n    _restoreContext() {\r\n        // avoid binding that texture before reseting it\r\n        this._canDraw = false;\r\n\r\n        // reinit sampler and texture matrix\r\n        this._sampler.texture = this.gl.createTexture();\r\n        this._sampler.isActive = false;\r\n        this._sampler.isTextureBound = false;\r\n\r\n        this._textureMatrix.isActive = false;\r\n\r\n        this._initState();\r\n\r\n        // force mip map regeneration if needed\r\n        this._state.generateMipmap = false;\r\n        this.parameters._shouldUpdate = true;\r\n\r\n        // this is an original texture, reset it right away\r\n        if(!this._copiedFrom) {\r\n            this._initTexture();\r\n\r\n            if(this._parent) {\r\n                this._setParent();\r\n            }\r\n\r\n            if(this.source) {\r\n                this.setSource(this.source);\r\n\r\n                // cache again if it is an image\r\n                // also since it's an image it has been uploaded in setSource()\r\n                if(this.sourceType === \"image\") {\r\n                    this.renderer.cache.addTexture(this);\r\n                }\r\n                else {\r\n                    // force update\r\n                    this.needUpdate();\r\n                }\r\n            }\r\n\r\n            this._canDraw = true;\r\n        }\r\n        else {\r\n            // wait for the original texure to be ready before attempting to restore the copy\r\n            const queue = this.renderer.nextRender.add(() => {\r\n                if(this._copiedFrom._canDraw) {\r\n                    this._restoreFromTexture();\r\n                    // remove from callback queue\r\n                    queue.keep = false;\r\n                }\r\n            }, true);\r\n        }\r\n    }\r\n\r\n\r\n    /*** ADD PARENT ***/\r\n\r\n    /***\r\n     Adds a parent to a texture\r\n     Sets its index, its parent and add it to the parent textures array as well\r\n     Then runs _setParent() to set the size and uniforms if needed\r\n     ***/\r\n    addParent(parent) {\r\n        if(!parent || (parent.type !== \"Plane\" && parent.type !== \"PingPongPlane\" && parent.type !== \"ShaderPass\" && parent.type !== \"RenderTarget\")) {\r\n            if(!this.renderer.production) {\r\n                throwWarning(this.type + \": cannot add texture as a child of \", parent, \" because it is not a valid parent\");\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // add parent property\r\n        this._parent = parent;\r\n        // update parent textures array\r\n        this.index = this._parent.textures.length;\r\n        this._parent.textures.push(this);\r\n\r\n        // now set its parent for real\r\n        this._setParent();\r\n    }\r\n\r\n\r\n    /***\r\n     Sets the parent\r\n     Basically sets the uniforms names and locations and sizes\r\n     ***/\r\n    _setParent() {\r\n        // prepare texture sampler\r\n        this._sampler.name = this._samplerName || \"uSampler\" + this.index;\r\n\r\n        // we will always declare a texture matrix\r\n        this._textureMatrix.name = this._samplerName ? this._samplerName + \"Matrix\" : \"uTextureMatrix\" + this.index;\r\n\r\n        // if the parent has a program it means its not a render target texture\r\n        if(this._parent._program) {\r\n            if(!this._parent._program.compiled) {\r\n                if(!this.renderer.production) {\r\n                    throwWarning(this.type + \": Unable to create the texture because the program is not valid\");\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            // set uniform\r\n            this._setTextureUniforms();\r\n\r\n            if(this._copyOnInit) {\r\n                // wait for original texture to be ready before copying it\r\n                const waitForOriginalTexture = this.renderer.nextRender.add(() => {\r\n                    if(this._copiedFrom._canDraw && this._copiedFrom._uploaded) {\r\n                        this.copy(this._copiedFrom);\r\n                        waitForOriginalTexture.keep = false;\r\n                    }\r\n                }, true);\r\n\r\n                // we're done!\r\n                return;\r\n            }\r\n\r\n            if(!this.source) {\r\n                // set its size based on parent element size for now\r\n                this._size = {\r\n                    width: this._parent._boundingRect.document.width,\r\n                    height: this._parent._boundingRect.document.height,\r\n                };\r\n            }\r\n            else if(this._parent.loader) {\r\n                // we're adding a parent to a texture that already has a source\r\n                // it means the source should have been loaded before the parent was set\r\n                // add it to the right asset array if needed\r\n                this._parent.loader._addSourceToParent(this.source, this.sourceType);\r\n            }\r\n\r\n            this._setSize();\r\n        }\r\n        else if(this._parent.type === \"RenderTarget\") {\r\n            // its a render target texture, it has no uniform location and no texture matrix\r\n            this._size = {\r\n                width: this._parent._size && this._parent._size.width || this.renderer._boundingRect.width,\r\n                height: this._parent._size && this._parent._size.height || this.renderer._boundingRect.height,\r\n            };\r\n\r\n            // updload to gpu\r\n            this._upload();\r\n\r\n            // update render texture parameters because it will never be drawn (hence not called)\r\n            this._updateTexParameters();\r\n\r\n            this._canDraw = true;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Checks if this texture has a parent\r\n\r\n     return:\r\n     @hasParent (bool): whether this texture has a parent or not\r\n     ***/\r\n    hasParent() {\r\n        return !!this._parent;\r\n    }\r\n\r\n\r\n    /*** SEND DATA TO THE GPU ***/\r\n\r\n    /***\r\n     Check if our textures is effectively used in our shaders\r\n     If so, set it to active, get its uniform locations and bind it to our texture unit\r\n     ***/\r\n    _setTextureUniforms() {\r\n        // check if our texture is used in our program shaders\r\n        // if so, get its uniform locations and bind it to our program\r\n        const activeUniforms = this._parent._program.activeUniforms;\r\n\r\n        for(let i = 0; i < activeUniforms.textures.length; i++) {\r\n            if(activeUniforms.textures[i] === this._sampler.name) {\r\n                // this texture is active\r\n                this._sampler.isActive = true;\r\n\r\n                // use the program and get our sampler and texture matrices uniforms\r\n                this.renderer.useProgram(this._parent._program);\r\n\r\n                // set our texture sampler uniform\r\n                this._sampler.location = this.gl.getUniformLocation(this._parent._program.program, this._sampler.name);\r\n\r\n                // set texture matrix uniform location only if active\r\n                const isTextureMatrixActive = activeUniforms.textureMatrices.find(textureMatrix =>\r\n                    textureMatrix === this._textureMatrix.name\r\n                );\r\n\r\n                if(isTextureMatrixActive) {\r\n                    this._textureMatrix.isActive = true;\r\n                    this._textureMatrix.location = this.gl.getUniformLocation(this._parent._program.program, this._textureMatrix.name);\r\n                }\r\n\r\n                // tell the shader we bound the texture to our indexed texture unit\r\n                this.gl.uniform1i(this._sampler.location, this.index);\r\n            }\r\n        }\r\n    }\r\n\r\n    /***\r\n     This copies an already existing Texture object to our texture\r\n\r\n     params:\r\n     @texture (Texture): texture to set from\r\n     ***/\r\n    copy(texture) {\r\n        if(!texture || texture.type !== \"Texture\") {\r\n            if(!this.renderer.production) {\r\n                throwWarning(this.type + \": Unable to set the texture from texture:\", texture);\r\n            }\r\n            return;\r\n        }\r\n\r\n        // copy states\r\n        this._globalParameters = Object.assign({}, texture._globalParameters);\r\n        this._state = Object.assign({}, texture._state);\r\n\r\n        // regenerate mips if needed\r\n        this.parameters.generateMipmap = texture.parameters.generateMipmap;\r\n        this._state.generateMipmap = null;\r\n\r\n        // copy source\r\n        this._size = texture._size;\r\n\r\n        // trigger loaded callback if needed\r\n        if(!this._sourceLoaded && texture._sourceLoaded) {\r\n            this._onSourceLoadedCallback && this._onSourceLoadedCallback();\r\n        }\r\n\r\n        this._sourceLoaded = texture._sourceLoaded;\r\n\r\n        // trigger uploaded callback if needed\r\n        if(!this._uploaded && texture._uploaded) {\r\n            this._onSourceUploadedCallback && this._onSourceUploadedCallback();\r\n        }\r\n\r\n        this._uploaded = texture._uploaded;\r\n\r\n        this.sourceType = texture.sourceType;\r\n        this.source = texture.source;\r\n        this._videoFrameCallbackID = texture._videoFrameCallbackID;\r\n\r\n        // copy texture\r\n        this._sampler.texture = texture._sampler.texture;\r\n\r\n        // keep a track from the original one\r\n        this._copiedFrom = texture;\r\n\r\n        // update its texture matrix if needed and we're good to go!\r\n        if(this._parent && this._parent._program && (!this._canDraw || !this._textureMatrix.matrix)) {\r\n            this._setSize();\r\n\r\n            this._canDraw = true;\r\n        }\r\n\r\n        this._updateTexParameters();\r\n\r\n        // force rendering\r\n        this.renderer.needRender();\r\n    }\r\n\r\n\r\n    /*** LOADING SOURCES ***/\r\n\r\n    /***\r\n     This uses our source as texture\r\n\r\n     params:\r\n     @source (images/video/canvas): either an image, a video or a canvas\r\n     ***/\r\n    setSource(source) {\r\n        // fire callback during load (useful for a loader)\r\n        if(!this._sourceLoaded) {\r\n            // texture source loaded callback\r\n            this.renderer.nextRender.add(() => this._onSourceLoadedCallback && this._onSourceLoadedCallback());\r\n        }\r\n\r\n        // get new source type based on source tag\r\n        const sourceType = source.tagName.toUpperCase() === \"IMG\" ? \"image\" : source.tagName.toLowerCase();\r\n\r\n        // somehow if the texture type changes from image to video or canvas, the cache won't work anymore\r\n        if(sourceType === \"video\" || sourceType === \"canvas\") {\r\n            this._useCache = false;\r\n        }\r\n\r\n        // check for cache\r\n        if(this._useCache) {\r\n            const cachedTexture = this.renderer.cache.getTextureFromSource(source);\r\n\r\n            // if we have a cached texture, just copy it\r\n            if (cachedTexture && cachedTexture.uuid !== this.uuid) {\r\n                // force texture uploaded callback\r\n                if (!this._uploaded) {\r\n                    // GPU uploading callback\r\n                    this.renderer.nextRender.add(() => this._onSourceUploadedCallback && this._onSourceUploadedCallback());\r\n\r\n                    this._uploaded = true;\r\n                }\r\n\r\n                this.copy(cachedTexture);\r\n\r\n                this.resize();\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        if(this.sourceType === \"empty\" || this.sourceType !== sourceType) {\r\n            if(sourceType === \"video\") {\r\n                // a video should be updated by default\r\n                this._willUpdate = false;\r\n                this.shouldUpdate = true;\r\n            }\r\n            else if(sourceType === \"canvas\") {\r\n                // a canvas could change each frame so we need to update it by default\r\n                this._willUpdate = true;\r\n                this.shouldUpdate = true;\r\n            }\r\n            else if(sourceType === \"image\") {\r\n                this._willUpdate = false;\r\n                this.shouldUpdate = false;\r\n            }\r\n            else {\r\n                if(!this.renderer.production) {\r\n                    throwWarning(this.type + \": this HTML tag could not be converted into a texture:\", source.tagName);\r\n                }\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        // set new source\r\n        this.source = source;\r\n        this.sourceType = sourceType;\r\n\r\n        this._size = {\r\n            width: this.source.naturalWidth || this.source.width || this.source.videoWidth,\r\n            height: this.source.naturalHeight || this.source.height || this.source.videoHeight,\r\n        };\r\n\r\n        // our source is loaded now\r\n        this._sourceLoaded = true;\r\n\r\n        // no need to set WebGL active texture unit here, we'll do it at run time for each texture\r\n        // binding the texture is enough\r\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this._sampler.texture);\r\n\r\n        this.resize();\r\n\r\n        this._globalParameters.flipY = true;\r\n        this._globalParameters.premultiplyAlpha = this._globalParameters.shouldPremultiplyAlpha;\r\n\r\n        // upload our webgl texture only if it is an image\r\n        // canvas and video textures will be updated anyway in the rendering loop\r\n        // thanks to the shouldUpdate and _willUpdate flags\r\n        if(this.sourceType === \"image\") {\r\n            // generate mip maps if they have not been explicitly disabled\r\n            this.parameters.generateMipmap = this.parameters.generateMipmap || this.parameters.generateMipmap === null;\r\n            this.parameters._shouldUpdate = this.parameters.generateMipmap;\r\n            this._state.generateMipmap = false;\r\n\r\n            this._upload();\r\n        }\r\n\r\n        // update scene\r\n        this.renderer.needRender();\r\n    }\r\n\r\n\r\n    /*** TEXTURE PARAMETERS ***/\r\n\r\n    /***\r\n     Updates textures parameters that depends on global WebGL context state\r\n     Typically unpacking, flipY and premultiplied alpha\r\n     Usually called before uploading a texture to the GPU\r\n     ***/\r\n    _updateGlobalTexParameters() {\r\n        // unpack alignment\r\n        if(this.renderer.state.unpackAlignment !== this._globalParameters.unpackAlignment) {\r\n            this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT, this._globalParameters.unpackAlignment);\r\n            this.renderer.state.unpackAlignment = this._globalParameters.unpackAlignment;\r\n        }\r\n\r\n        // flip Y only if source is not empty\r\n        if(this.renderer.state.flipY !== this._globalParameters.flipY) {\r\n            this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, this._globalParameters.flipY);\r\n            this.renderer.state.flipY = this._globalParameters.flipY;\r\n        }\r\n\r\n        // premultiplied alpha only if source is not empty\r\n        if(this.renderer.state.premultiplyAlpha !== this._globalParameters.premultiplyAlpha) {\r\n            this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this._globalParameters.premultiplyAlpha);\r\n            this.renderer.state.premultiplyAlpha = this._globalParameters.premultiplyAlpha;\r\n        }\r\n\r\n        // floating point textures\r\n        if(this._globalParameters.floatingPoint === \"half-float\") {\r\n            if(this.renderer._isWebGL2 && this.renderer.extensions['EXT_color_buffer_float']) {\r\n                this._globalParameters.internalFormat = this.gl.RGBA16F;\r\n                this._globalParameters.type = this.gl.HALF_FLOAT;\r\n            }\r\n            else if(this.renderer.extensions['OES_texture_half_float']) {\r\n                this._globalParameters.type = this.renderer.extensions['OES_texture_half_float'].HALF_FLOAT_OES;\r\n            }\r\n            else if(!this.renderer.production) {\r\n                throwWarning(this.type + \": could not use half-float textures because the extension is not available\");\r\n            }\r\n        }\r\n        else if(this._globalParameters.floatingPoint === \"float\") {\r\n            if(this.renderer._isWebGL2 && this.renderer.extensions['EXT_color_buffer_float']) {\r\n                this._globalParameters.internalFormat = this.gl.RGBA16F;\r\n                this._globalParameters.type = this.gl.FLOAT;\r\n            }\r\n            else if(this.renderer.extensions['OES_texture_float']) {\r\n                this._globalParameters.type = this.renderer.extensions['OES_texture_half_float'].FLOAT;\r\n            }\r\n            else if(!this.renderer.production) {\r\n                throwWarning(this.type + \": could not use float textures because the extension is not available\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /***\r\n     Updates per-textures parameters\r\n     Wrapping, filters, anisotropy and mipmaps generation\r\n     Usually called after uploading a texture to the GPU\r\n     ***/\r\n    _updateTexParameters() {\r\n        // be sure we're updating the right texture\r\n        if(this.index && this.renderer.state.activeTexture !== this.index) {\r\n            this._bindTexture();\r\n        }\r\n\r\n        // wrapS\r\n        if(this.parameters.wrapS !== this._state.wrapS) {\r\n            if(!this.renderer._isWebGL2 && (!isPowerOf2(this._size.width) || !isPowerOf2(this._size.height))) {\r\n                this.parameters.wrapS = this.gl.CLAMP_TO_EDGE;\r\n            }\r\n\r\n            // handle wrong wrapS values\r\n            if(\r\n                this.parameters.wrapS !== this.gl.REPEAT\r\n                && this.parameters.wrapS !== this.gl.CLAMP_TO_EDGE\r\n                && this.parameters.wrapS !== this.gl.MIRRORED_REPEAT\r\n            ) {\r\n                if(!this.renderer.production) {\r\n                    throwWarning(this.type + \": Wrong wrapS value\", this.parameters.wrapS, \"for this texture:\", this, \"\\ngl.CLAMP_TO_EDGE wrapping will be used instead\");\r\n                }\r\n                this.parameters.wrapS = this.gl.CLAMP_TO_EDGE;\r\n            }\r\n\r\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.parameters.wrapS);\r\n            this._state.wrapS = this.parameters.wrapS;\r\n        }\r\n\r\n        // wrapT\r\n        if(this.parameters.wrapT !== this._state.wrapT) {\r\n            if(!this.renderer._isWebGL2 && (!isPowerOf2(this._size.width) || !isPowerOf2(this._size.height))) {\r\n                this.parameters.wrapT = this.gl.CLAMP_TO_EDGE;\r\n            }\r\n\r\n            // handle wrong wrapT values\r\n            if(\r\n                this.parameters.wrapT !== this.gl.REPEAT\r\n                && this.parameters.wrapT !== this.gl.CLAMP_TO_EDGE\r\n                && this.parameters.wrapT !== this.gl.MIRRORED_REPEAT\r\n            ) {\r\n                if(!this.renderer.production) {\r\n                    throwWarning(this.type + \": Wrong wrapT value\", this.parameters.wrapT, \"for this texture:\", this, \"\\ngl.CLAMP_TO_EDGE wrapping will be used instead\");\r\n                }\r\n                this.parameters.wrapT = this.gl.CLAMP_TO_EDGE;\r\n            }\r\n\r\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.parameters.wrapT);\r\n            this._state.wrapT = this.parameters.wrapT;\r\n        }\r\n\r\n        // generate mip map only if it has a source\r\n        if(this.parameters.generateMipmap && !this._state.generateMipmap && this.source) {\r\n            if(!this.renderer._isWebGL2 && (!isPowerOf2(this._size.width) || !isPowerOf2(this._size.height))) {\r\n                this.parameters.generateMipmap = false;\r\n            }\r\n            else {\r\n                this.gl.generateMipmap(this.gl.TEXTURE_2D);\r\n            }\r\n\r\n            this._state.generateMipmap = this.parameters.generateMipmap;\r\n        }\r\n\r\n        // min filter\r\n        if(this.parameters.minFilter !== this._state.minFilter) {\r\n            // WebGL1 and non PO2\r\n            if(!this.renderer._isWebGL2 && (!isPowerOf2(this._size.width) || !isPowerOf2(this._size.height))) {\r\n                this.parameters.minFilter = this.gl.LINEAR;\r\n            }\r\n\r\n            // at this point if generateMipmap is null it means we will generate them later on\r\n            if(!this.parameters.generateMipmap && this.parameters.generateMipmap !== null) {\r\n                this.parameters.minFilter = this.gl.LINEAR;\r\n            }\r\n\r\n            // handle wrong minFilter values\r\n            if(\r\n                this.parameters.minFilter !== this.gl.LINEAR\r\n                && this.parameters.minFilter !== this.gl.NEAREST\r\n                && this.parameters.minFilter !== this.gl.NEAREST_MIPMAP_NEAREST\r\n                && this.parameters.minFilter !== this.gl.LINEAR_MIPMAP_NEAREST\r\n                && this.parameters.minFilter !== this.gl.NEAREST_MIPMAP_LINEAR\r\n                && this.parameters.minFilter !== this.gl.LINEAR_MIPMAP_LINEAR\r\n            ) {\r\n                if(!this.renderer.production) {\r\n                    throwWarning(this.type + \": Wrong minFilter value\", this.parameters.minFilter, \"for this texture:\", this, \"\\ngl.LINEAR filtering will be used instead\");\r\n                }\r\n                this.parameters.minFilter = this.gl.LINEAR;\r\n            }\r\n\r\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.parameters.minFilter);\r\n            this._state.minFilter = this.parameters.minFilter;\r\n        }\r\n\r\n        // mag filter\r\n        if(this.parameters.magFilter !== this._state.magFilter) {\r\n            if(!this.renderer._isWebGL2 && (!isPowerOf2(this._size.width) || !isPowerOf2(this._size.height))) {\r\n                this.parameters.magFilter = this.gl.LINEAR;\r\n            }\r\n\r\n            // handle wrong magFilter values\r\n            if(\r\n                this.parameters.magFilter !== this.gl.LINEAR\r\n                && this.parameters.magFilter !== this.gl.NEAREST\r\n            ) {\r\n                if(!this.renderer.production) {\r\n                    throwWarning(this.type + \": Wrong magFilter value\", this.parameters.magFilter, \"for this texture:\", this, \"\\ngl.LINEAR filtering will be used instead\");\r\n                }\r\n                this.parameters.magFilter = this.gl.LINEAR;\r\n            }\r\n\r\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.parameters.magFilter);\r\n            this._state.magFilter = this.parameters.magFilter;\r\n        }\r\n\r\n        // anisotropy\r\n        const anisotropyExt = this.renderer.extensions['EXT_texture_filter_anisotropic'];\r\n        if(anisotropyExt && this.parameters.anisotropy !== this._state.anisotropy) {\r\n            const max = this.gl.getParameter(anisotropyExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\r\n            this.parameters.anisotropy = Math.max(1, Math.min(this.parameters.anisotropy, max));\r\n\r\n            this.gl.texParameterf(this.gl.TEXTURE_2D, anisotropyExt.TEXTURE_MAX_ANISOTROPY_EXT, this.parameters.anisotropy);\r\n            this._state.anisotropy = this.parameters.anisotropy;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Sets the texture wrapping for the texture coordinate S\r\n\r\n     params:\r\n     @wrapS (GLenum): WebGL constant specifying the texture wrapping function for the texture coordinate S\r\n     ***/\r\n    setWrapS(wrapS) {\r\n        if(this.parameters.wrapS !== wrapS) {\r\n            this.parameters.wrapS = wrapS;\r\n            this.parameters._shouldUpdate = true;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Sets the texture wrapping for the texture coordinate T\r\n\r\n     params:\r\n     @wrapT (GLenum): WebGL constant specifying the texture wrapping function for the texture coordinate T\r\n     ***/\r\n    setWrapT(wrapT) {\r\n        if(this.parameters.wrapT !== wrapT) {\r\n            this.parameters.wrapT = wrapT;\r\n            this.parameters._shouldUpdate = true;\r\n        }\r\n    }\r\n\r\n    /***\r\n     Sets the texture minifaction filter value\r\n\r\n     params:\r\n     @minFilter (GLenum): WebGL constant specifying the texture minification filter\r\n     ***/\r\n    setMinFilter(minFilter) {\r\n        if(this.parameters.minFilter !== minFilter) {\r\n            this.parameters.minFilter = minFilter;\r\n            this.parameters._shouldUpdate = true;\r\n        }\r\n    }\r\n\r\n    /***\r\n     Sets the texture magnifaction filter value\r\n\r\n     params:\r\n     @magFilter (GLenum): WebGL constant specifying the texture magnifaction filter\r\n     ***/\r\n    setMagFilter(magFilter) {\r\n        if(this.parameters.magFilter !== magFilter) {\r\n            this.parameters.magFilter = magFilter;\r\n            this.parameters._shouldUpdate = true;\r\n        }\r\n    }\r\n\r\n    /***\r\n     Sets the texture anisotropy\r\n\r\n     params:\r\n     @anisotropy (int): Texture anisotropy value\r\n     ***/\r\n    setAnisotropy(anisotropy) {\r\n        anisotropy = isNaN(anisotropy) ? this.parameters.anisotropy : anisotropy;\r\n\r\n        if(this.parameters.anisotropy !== anisotropy) {\r\n            this.parameters.anisotropy = anisotropy;\r\n            this.parameters._shouldUpdate = true;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This forces a texture to be updated on the next draw call\r\n     ***/\r\n    needUpdate() {\r\n        this._forceUpdate = true;\r\n    }\r\n\r\n\r\n    /***\r\n     This uses the requestVideoFrameCallback API to update the texture each time a new frame is displayed\r\n     ***/\r\n    _videoFrameCallback() {\r\n        this._willUpdate = true;\r\n        this.source.requestVideoFrameCallback(() => this._videoFrameCallback());\r\n    }\r\n\r\n\r\n    /***\r\n     This updloads our texture to the GPU\r\n     Called on init or inside our drawing loop if shouldUpdate property is set to true\r\n     Typically used by videos or canvas\r\n     ***/\r\n    _upload() {\r\n        // set parameters that need to be set before texture uploading\r\n        this._updateGlobalTexParameters();\r\n\r\n        if(this.source) {\r\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this._globalParameters.internalFormat, this._globalParameters.format, this._globalParameters.type, this.source);\r\n        }\r\n        else if(this.sourceType === \"fbo\") {\r\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this._globalParameters.internalFormat, this._size.width, this._size.height, 0, this._globalParameters.format, this._globalParameters.type, this.source || null);\r\n        }\r\n\r\n        // texture has been uploaded\r\n        if(!this._uploaded) {\r\n            // GPU uploading callback\r\n            this.renderer.nextRender.add(() => this._onSourceUploadedCallback && this._onSourceUploadedCallback());\r\n\r\n            this._uploaded = true;\r\n        }\r\n    }\r\n\r\n\r\n    /*** TEXTURE SIZINGS ***/\r\n\r\n\r\n    /***\r\n     This is used to calculate how to crop/center an texture\r\n\r\n     returns:\r\n     @sizes (obj): an object containing plane sizes, source sizes and x and y offset to center the source in the plane\r\n     ***/\r\n    _getSizes() {\r\n        // if this is a fbo texture, its size is the same as its parent\r\n        if(this.sourceType === \"fbo\") {\r\n            return {\r\n                parentWidth: this._parent._boundingRect.document.width,\r\n                parentHeight: this._parent._boundingRect.document.height,\r\n                sourceWidth: this._parent._boundingRect.document.width,\r\n                sourceHeight: this._parent._boundingRect.document.height,\r\n                xOffset: 0,\r\n                yOffset: 0,\r\n            };\r\n        }\r\n\r\n        // remember our ShaderPass objects don't have a scale property\r\n        const scale = this._parent.scale ? tempVec2.set(this._parent.scale.x, this._parent.scale.y) : tempVec2.set(1, 1);\r\n\r\n        const parentWidth  = this._parent._boundingRect.document.width * scale.x;\r\n        const parentHeight = this._parent._boundingRect.document.height * scale.y;\r\n\r\n        const sourceWidth = this._size.width;\r\n        const sourceHeight = this._size.height;\r\n\r\n        const sourceRatio = sourceWidth / sourceHeight;\r\n        const parentRatio = parentWidth / parentHeight;\r\n\r\n        // center image in its container\r\n        let xOffset = 0;\r\n        let yOffset = 0;\r\n\r\n        if(parentRatio > sourceRatio) { // means parent is larger\r\n            yOffset = Math.min(0, parentHeight - (parentWidth * (1 / sourceRatio)));\r\n        }\r\n        else if(parentRatio < sourceRatio) { // means parent is taller\r\n            xOffset = Math.min(0, parentWidth - (parentHeight * sourceRatio));\r\n        }\r\n\r\n        return {\r\n            parentWidth: parentWidth,\r\n            parentHeight: parentHeight,\r\n            sourceWidth: sourceWidth,\r\n            sourceHeight: sourceHeight,\r\n            xOffset: xOffset,\r\n            yOffset: yOffset,\r\n        };\r\n    }\r\n\r\n\r\n    /***\r\n     Set the texture scale and then update its matrix\r\n\r\n     params:\r\n     @scale (Vec2 object): scale to apply on X and Y axes\r\n     ***/\r\n    setScale(scale) {\r\n        if(!scale.type || scale.type !== \"Vec2\") {\r\n            if(!this.renderer.production) {\r\n                throwWarning(this.type + \": Cannot set scale because the parameter passed is not of Vec2 type:\", scale);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        scale.sanitizeNaNValuesWith(this.scale).max(tempVec2.set(0.001, 0.001));\r\n\r\n        if(!scale.equals(this.scale)) {\r\n            this.scale.copy(scale);\r\n\r\n            this.resize();\r\n        }\r\n    }\r\n\r\n    setOffset(offset) {\r\n        if(!offset.type || offset.type !== \"Vec2\") {\r\n            if(!this.renderer.production) {\r\n                throwWarning(this.type + \": Cannot set offset because the parameter passed is not of Vec2 type:\", scale);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        offset.sanitizeNaNValuesWith(this.offset);\r\n\r\n        if(!offset.equals(this.offset)) {\r\n            this.offset.copy(offset);\r\n\r\n            this.resize();\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Gets our texture and parent sizes and tells our texture matrix to update based on those values\r\n     ***/\r\n    _setSize() {\r\n        // if we need to update the texture matrix uniform\r\n        if(this._parent && this._parent._program) {\r\n            const sizes = this._getSizes();\r\n\r\n            // always update texture matrix anyway\r\n            this._updateTextureMatrix(sizes);\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This is used to crop/center a texture\r\n     If the texture is using texture matrix then we just have to update its matrix\r\n     If it is a render pass texture we also upload the texture with its new size on the GPU\r\n     ***/\r\n    resize() {\r\n        if(this.sourceType === \"fbo\") {\r\n            // update size based on parent sizes (RenderTarget or ShaderPass)\r\n            this._size = {\r\n                width: this._parent._size && this._parent._size.width || this._parent._boundingRect.document.width,\r\n                height: this._parent._size && this._parent._size.height || this._parent._boundingRect.document.height,\r\n            };\r\n\r\n            // reupload only if its not a texture set from another texture (means its a RenderTarget texture)\r\n            if(!this._copiedFrom) {\r\n                this.gl.bindTexture(this.gl.TEXTURE_2D, this._sampler.texture);\r\n                this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this._globalParameters.internalFormat, this._size.width, this._size.height, 0, this._globalParameters.format, this._globalParameters.type, null);\r\n            }\r\n        }\r\n        else if(this.source) {\r\n            // reset texture sizes (useful for canvas because their dimensions might change on resize)\r\n            this._size = {\r\n                width: this.source.naturalWidth || this.source.width || this.source.videoWidth,\r\n                height: this.source.naturalHeight || this.source.height || this.source.videoHeight,\r\n            };\r\n        }\r\n\r\n        this._setSize();\r\n    }\r\n\r\n    /***\r\n     This updates our textures matrix uniform based on plane and sources sizes\r\n\r\n     params:\r\n     @sizes (object): object containing plane sizes, source sizes and x and y offset to center the source in the plane\r\n     ***/\r\n    _updateTextureMatrix(sizes) {\r\n        // calculate scale to apply to the matrix\r\n        const textureScale = tempVec3.set(\r\n            sizes.parentWidth / (sizes.parentWidth - sizes.xOffset),\r\n            sizes.parentHeight / (sizes.parentHeight - sizes.yOffset),\r\n            1\r\n        );\r\n\r\n        // apply texture scale\r\n        textureScale.x /= this.scale.x;\r\n        textureScale.y /= this.scale.y;\r\n\r\n        // translate and scale texture to center it\r\n        // equivalent (but faster) than applying those steps to an identity matrix:\r\n        // translate from [(1 - textureScale.x) / 2 + this.offset.x, (1 - textureScale.y) / 2 + this.offset.y, 0]\r\n        // then apply a scale of [textureScale.x, textureScale.y, 1]\r\n        this._textureMatrix.matrix = textureTranslation.setFromArray([\r\n            textureScale.x, 0, 0, 0,\r\n            0, textureScale.y, 0, 0,\r\n            0, 0, 1, 0,\r\n            (1 - textureScale.x) / 2 + this.offset.x, (1 - textureScale.y) / 2 + this.offset.y, 0, 1\r\n        ]);\r\n\r\n        // update the texture matrix uniform\r\n        this._updateMatrixUniform();\r\n    }\r\n\r\n\r\n    /***\r\n     This updates our textures matrix GL uniform\r\n     ***/\r\n    _updateMatrixUniform() {\r\n        if(this._textureMatrix.isActive) {\r\n            this.renderer.useProgram(this._parent._program);\r\n            this.gl.uniformMatrix4fv(this._textureMatrix.location, false, this._textureMatrix.matrix.elements);\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This calls our loading callback and set our media as texture source\r\n     ***/\r\n    _onSourceLoaded(source) {\r\n        // set the media as our texture source\r\n        this.setSource(source);\r\n\r\n        // add to the cache if needed\r\n        if(this.sourceType === \"image\") {\r\n            this.renderer.cache.addTexture(this);\r\n        }\r\n    }\r\n\r\n\r\n    /*** DRAWING ***/\r\n\r\n    /***\r\n     This is used to set the WebGL context active texture and bind it\r\n\r\n     params:\r\n     @texture (texture object): Our texture object containing our WebGL texture and its index\r\n     ***/\r\n    _bindTexture() {\r\n        if(this._canDraw) {\r\n            if(this.renderer.state.activeTexture !== this.index) {\r\n                // tell WebGL we want to affect the texture at the plane's index unit\r\n                this.gl.activeTexture(this.gl.TEXTURE0 + this.index);\r\n                this.renderer.state.activeTexture = this.index;\r\n            }\r\n\r\n            // bind the texture to the plane's index unit\r\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this._sampler.texture);\r\n\r\n            // check for texture binding until we got one\r\n            if(!this._sampler.isTextureBound) {\r\n                this._sampler.isTextureBound = !!this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\r\n\r\n                // force render\r\n                this._sampler.isTextureBound && this.renderer.needRender();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This is called to draw the texture\r\n     ***/\r\n    _draw() {\r\n        // only draw if the texture is active (used in the shader)\r\n        if(this._sampler.isActive) {\r\n            // bind the texture\r\n            this._bindTexture();\r\n\r\n            // if no videoFrameCallback check if the video is actually really playing\r\n            if(this.sourceType === \"video\" && this.source && !this._videoFrameCallbackID && this.source.readyState >= this.source.HAVE_CURRENT_DATA && !this.source.paused) {\r\n                this._willUpdate = true;\r\n            }\r\n\r\n            if(this._forceUpdate || (this._willUpdate && this.shouldUpdate)) {\r\n                // force mipmaps regeneration if needed\r\n                this._state.generateMipmap = false;\r\n                this._upload();\r\n            }\r\n\r\n            // reset the video willUpdate flag\r\n            if(this.sourceType === \"video\") {\r\n                this._willUpdate = false;\r\n            }\r\n\r\n            this._forceUpdate = false;\r\n        }\r\n\r\n        // set parameters that need to be set after texture uploading\r\n        if(this.parameters._shouldUpdate) {\r\n            this._updateTexParameters();\r\n            this.parameters._shouldUpdate = false;\r\n        }\r\n    }\r\n\r\n\r\n    /*** EVENTS ***/\r\n\r\n    /***\r\n     This is called each time a source has been loaded for the first time\r\n     TODO useless?\r\n\r\n     params :\r\n     @callback (function) : a function to execute\r\n\r\n     returns :\r\n     @this: our texture to handle chaining\r\n     ***/\r\n    onSourceLoaded(callback) {\r\n        if(callback) {\r\n            this._onSourceLoadedCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /***\r\n     This is called each time a texture has been uploaded to the GPU for the first time\r\n\r\n     params :\r\n     @callback (function) : a function to execute\r\n\r\n     returns :\r\n     @this: our texture to handle chaining\r\n     ***/\r\n    onSourceUploaded(callback) {\r\n        if(callback) {\r\n            this._onSourceUploadedCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /*** DESTROYING ***/\r\n\r\n    /***\r\n     This is used to destroy a texture and free the memory space\r\n     Usually used on a plane/shader pass/render target removal\r\n\r\n     params:\r\n     @force (bool, optional): force the texture to be deleted even if cached\r\n     ***/\r\n    _dispose(force = false) {\r\n        if(this.sourceType === \"video\" || this.sourceType === \"image\" && !this.renderer.state.isActive) {\r\n            // remove event listeners\r\n            if(this._loader) {\r\n                this._loader._removeSource(this);\r\n            }\r\n\r\n            // clear source\r\n            this.source = null;\r\n        }\r\n        else if(this.sourceType === \"canvas\") {\r\n            // clear all canvas states\r\n            this.source.width = this.source.width;\r\n\r\n            // clear source\r\n            this.source = null;\r\n        }\r\n\r\n        // remove its parent\r\n        this._parent = null;\r\n\r\n        // do not delete original texture if this texture is a copy, or image texture if we're not destroying the context\r\n        const shouldDelete = this.gl && !this._copiedFrom && (force || this.sourceType !== \"image\" || !this.renderer.state.isActive);\r\n\r\n        if(shouldDelete) {\r\n            this._canDraw = false;\r\n\r\n            // if the texture is in our textures cache array, remove it\r\n            this.renderer.cache.removeTexture(this);\r\n\r\n            this.gl.activeTexture(this.gl.TEXTURE0 + this.index);\r\n            this.gl.bindTexture(this.gl.TEXTURE_2D, null);\r\n            this.gl.deleteTexture(this._sampler.texture);\r\n        }\r\n    }\r\n}","import {Mesh} from './Mesh.js';\r\nimport {Vec2} from '../math/Vec2.js';\r\nimport {throwWarning} from '../utils/utils.js';\r\n\r\n/***\r\n Here we create our DOMGLObject object\r\n We will extend our Mesh class object by adding HTML sizes helpers (bounding boxes getter/setter and mouse to mesh positioning)\r\n\r\n params:\r\n @renderer (Curtains renderer or Renderer class object): our curtains object OR our curtains renderer object\r\n @plane (html element): the html element that we will use for our DOMMesh object\r\n @type (string): Object type (should be either \"Plane\" or \"ShaderPass\")\r\n @Meshparams (object): see Mesh class object\r\n \r\n returns:\r\n @this: our BasePlane element\r\n ***/\r\n\r\n// avoid reinstancing those during runtime\r\nconst tempVec2a = new Vec2();\r\nconst tempVec2b = new Vec2();\r\n\r\nexport class DOMMesh extends Mesh {\r\n    constructor(renderer, htmlElement, type = \"DOMMesh\", {\r\n        // Mesh params\r\n        widthSegments,\r\n        heightSegments,\r\n        renderOrder,\r\n        depthTest,\r\n        cullFace,\r\n        uniforms,\r\n        vertexShaderID,\r\n        fragmentShaderID,\r\n        vertexShader,\r\n        fragmentShader,\r\n        texturesOptions,\r\n        crossOrigin,\r\n    } = {}) {\r\n        // handling HTML shaders scripts\r\n        vertexShaderID = vertexShaderID || htmlElement && htmlElement.getAttribute(\"data-vs-id\");\r\n        fragmentShaderID = fragmentShaderID || htmlElement && htmlElement.getAttribute(\"data-fs-id\");\r\n\r\n        super(renderer, type, {\r\n            widthSegments,\r\n            heightSegments,\r\n            renderOrder,\r\n            depthTest,\r\n            cullFace,\r\n            uniforms,\r\n            vertexShaderID,\r\n            fragmentShaderID,\r\n            vertexShader,\r\n            fragmentShader,\r\n            texturesOptions,\r\n            crossOrigin,\r\n        });\r\n\r\n        // return if no gl context\r\n        if(!this.gl) {\r\n            return;\r\n        }\r\n\r\n        // our HTML element\r\n        this.htmlElement = htmlElement;\r\n\r\n        if(!this.htmlElement || this.htmlElement.length === 0) {\r\n            if(!this.renderer.production) throwWarning(this.type + \": The HTML element you specified does not currently exists in the DOM\");\r\n        }\r\n\r\n        // set plane sizes\r\n        this._setDocumentSizes();\r\n    }\r\n\r\n\r\n    /*** PLANE SIZES ***/\r\n\r\n    /***\r\n     Set our plane dimensions and positions relative to document\r\n     Triggers reflow!\r\n     ***/\r\n    _setDocumentSizes() {\r\n        // set our basic initial infos\r\n        let planeBoundingRect = this.htmlElement.getBoundingClientRect();\r\n\r\n        if(!this._boundingRect) this._boundingRect = {};\r\n\r\n        // set plane dimensions in document space\r\n        this._boundingRect.document = {\r\n            width: planeBoundingRect.width * this.renderer.pixelRatio,\r\n            height: planeBoundingRect.height * this.renderer.pixelRatio,\r\n            top: planeBoundingRect.top * this.renderer.pixelRatio,\r\n            left: planeBoundingRect.left * this.renderer.pixelRatio,\r\n        };\r\n    };\r\n\r\n\r\n    /*** BOUNDING BOXES GETTERS ***/\r\n\r\n    /***\r\n     Useful to get our plane HTML element bounding rectangle without triggering a reflow/layout\r\n\r\n     returns :\r\n     @boundingRectangle (obj): an object containing our plane HTML element bounding rectangle (width, height, top, bottom, right and left properties)\r\n     ***/\r\n    getBoundingRect() {\r\n        return {\r\n            width: this._boundingRect.document.width,\r\n            height: this._boundingRect.document.height,\r\n            top: this._boundingRect.document.top,\r\n            left: this._boundingRect.document.left,\r\n\r\n            // right = left + width, bottom = top + height\r\n            right: this._boundingRect.document.left + this._boundingRect.document.width,\r\n            bottom: this._boundingRect.document.top + this._boundingRect.document.height,\r\n        };\r\n    }\r\n\r\n\r\n    /***\r\n     Handles each plane resizing\r\n     used internally when our container is resized\r\n     ***/\r\n    resize() {\r\n        // reset plane dimensions\r\n        this._setDocumentSizes();\r\n\r\n        // if this is a Plane object we need to update its perspective and positions\r\n        if(this.type === \"Plane\") {\r\n            // reset perspective\r\n            this.setPerspective(this.camera.fov, this.camera.near, this.camera.far);\r\n\r\n            // apply new position\r\n            this._setWorldSizes();\r\n            this._applyWorldPositions();\r\n        }\r\n\r\n        // resize all textures\r\n        for(let i = 0; i < this.textures.length; i++) {\r\n            this.textures[i].resize();\r\n        }\r\n\r\n        // handle our after resize event\r\n        this.renderer.nextRender.add(() => this._onAfterResizeCallback && this._onAfterResizeCallback());\r\n    }\r\n\r\n\r\n\r\n    /*** INTERACTION ***/\r\n\r\n    /***\r\n     This function takes the mouse position relative to the document and returns it relative to our plane\r\n     It ranges from -1 to 1 on both axis\r\n\r\n     params :\r\n     @mouseCoordinates (Vec2 object): coordinates of the mouse\r\n\r\n     returns :\r\n     @mousePosition (Vec2 object): the mouse position relative to our plane in WebGL space coordinates\r\n     ***/\r\n    mouseToPlaneCoords(mouseCoordinates) {\r\n        // remember our ShaderPass objects don't have a scale property\r\n        const scale = this.scale ? this.scale : tempVec2b.set(1, 1);\r\n\r\n        // we need to adjust our plane document bounding rect to it's webgl scale\r\n        const scaleAdjustment = tempVec2a.set(\r\n            (this._boundingRect.document.width - this._boundingRect.document.width * scale.x) / 2,\r\n            (this._boundingRect.document.height - this._boundingRect.document.height * scale.y) / 2,\r\n        );\r\n\r\n        // also we need to divide by pixel ratio\r\n        const planeBoundingRect = {\r\n            width: (this._boundingRect.document.width * scale.x) / this.renderer.pixelRatio,\r\n            height: (this._boundingRect.document.height * scale.y) / this.renderer.pixelRatio,\r\n            top: (this._boundingRect.document.top + scaleAdjustment.y) / this.renderer.pixelRatio,\r\n            left: (this._boundingRect.document.left + scaleAdjustment.x) / this.renderer.pixelRatio,\r\n        };\r\n\r\n        // mouse position conversion from document to plane space\r\n        return tempVec2a.set(\r\n            (((mouseCoordinates.x - planeBoundingRect.left) / planeBoundingRect.width) * 2) - 1,\r\n            1 - (((mouseCoordinates.y - planeBoundingRect.top) / planeBoundingRect.height) * 2)\r\n        );\r\n    }\r\n\r\n\r\n    /*** EVENTS ***/\r\n\r\n\r\n    /***\r\n     This is called each time a plane has been resized\r\n\r\n     params :\r\n     @callback (function) : a function to execute\r\n\r\n     returns :\r\n     @this: our plane to handle chaining\r\n     ***/\r\n    onAfterResize(callback) {\r\n        if(callback) {\r\n            this._onAfterResizeCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n}","/***\r\n Here we create a Quat class object\r\n This is a really basic Quaternion class used for rotation calculations\r\n Highly based on https://github.com/mrdoob/three.js/blob/dev/src/math/Quaternion.js\r\n\r\n params :\r\n @elements (Float32Array of length 4): our quaternion array. Default to identity quaternion.\r\n\r\n returns :\r\n @this: our Quat class object\r\n ***/\r\n\r\n// TODO lot of (unused at the time) methods are missing\r\n\r\nexport class Quat {\r\n    constructor(\r\n        elements = new Float32Array([0, 0, 0, 1]),\r\n        axisOrder = \"XYZ\"\r\n    ) {\r\n        this.type = \"Quat\";\r\n        this.elements = elements;\r\n        // rotation axis order\r\n        this.axisOrder = axisOrder;\r\n    }\r\n\r\n    /***\r\n     Sets the quaternion values from an array\r\n\r\n     params:\r\n     @array (array): an array of at least 4 elements\r\n\r\n     returns:\r\n     @this (Quat class object): this quaternion after being set\r\n     ***/\r\n    setFromArray(array) {\r\n        this.elements[0] = array[0];\r\n        this.elements[1] = array[1];\r\n        this.elements[2] = array[2];\r\n        this.elements[3] = array[3];\r\n\r\n        return this;\r\n    }\r\n\r\n    /***\r\n     Sets the quaternion axis order\r\n\r\n     params:\r\n     @axisOrder (string): an array of at least 4 elements\r\n\r\n     returns:\r\n     @this (Quat class object): this quaternion after axis order has been set\r\n     ***/\r\n    setAxisOrder(axisOrder) {\r\n        // force uppercase for strict equality tests\r\n        axisOrder = axisOrder.toUpperCase();\r\n\r\n        switch (axisOrder) {\r\n            case \"XYZ\" :\r\n            case \"YXZ\" :\r\n            case \"ZXY\" :\r\n            case \"ZYX\" :\r\n            case \"YZX\" :\r\n            case \"XZY\" :\r\n                this.axisOrder = axisOrder;\r\n                break;\r\n            default :\r\n                // apply a default axis order\r\n                this.axisOrder = \"XYZ\";\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Copy a quaternion into this quaternion\r\n\r\n     params:\r\n     @vector (Quat): quaternion to copy\r\n\r\n     returns:\r\n     @this (Quat): this quaternion after copy\r\n     ***/\r\n    copy(quaternion) {\r\n        this.elements = quaternion.elements;\r\n        this.axisOrder = quaternion.axisOrder;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     Clone a quaternion\r\n\r\n     returns:\r\n     @clonedQuaternion (Quat): cloned quaternion\r\n     ***/\r\n    clone() {\r\n        return new Quat().copy(this);\r\n    }\r\n\r\n\r\n    /***\r\n     Checks if 2 quaternions are equal\r\n\r\n     returns:\r\n     @isEqual (bool): whether the quaternions are equals or not\r\n     ***/\r\n    equals(quaternion) {\r\n        return this.elements[0] === quaternion.elements[0]\r\n            && this.elements[1] === quaternion.elements[1]\r\n            && this.elements[2] === quaternion.elements[2]\r\n            && this.elements[3] === quaternion.elements[3]\r\n            && this.axisOrder === quaternion.axisOrder;\r\n    }\r\n\r\n    /***\r\n     Sets a rotation quaternion using Euler angles and its axis order\r\n\r\n     params:\r\n     @vector (Vec3 class object): rotation vector to set our quaternion from\r\n\r\n     returns :\r\n     @this (Quat class object): quaternion after having applied the rotation\r\n     ***/\r\n    setFromVec3(vector) {\r\n        const ax = vector.x * 0.5;\r\n        const ay = vector.y * 0.5;\r\n        const az = vector.z * 0.5;\r\n\r\n        const cosx = Math.cos(ax);\r\n        const cosy = Math.cos(ay);\r\n        const cosz = Math.cos(az);\r\n        const sinx = Math.sin(ax);\r\n        const siny = Math.sin(ay);\r\n        const sinz = Math.sin(az);\r\n\r\n        // XYZ order\r\n        if(this.axisOrder === \"XYZ\") {\r\n            this.elements[0] = sinx * cosy * cosz + cosx * siny * sinz;\r\n            this.elements[1] = cosx * siny * cosz - sinx * cosy * sinz;\r\n            this.elements[2] = cosx * cosy * sinz + sinx * siny * cosz;\r\n            this.elements[3] = cosx * cosy * cosz - sinx * siny * sinz;\r\n        }\r\n        else if(this.axisOrder === \"YXZ\") {\r\n            this.elements[0] = sinx * cosy * cosz + cosx * siny * sinz;\r\n            this.elements[1] = cosx * siny * cosz - sinx * cosy * sinz;\r\n            this.elements[2] = cosx * cosy * sinz - sinx * siny * cosz;\r\n            this.elements[3] = cosx * cosy * cosz + sinx * siny * sinz;\r\n        }\r\n        else if(this.axisOrder === \"ZXY\") {\r\n            this.elements[0] = sinx * cosy * cosz - cosx * siny * sinz;\r\n            this.elements[1] = cosx * siny * cosz + sinx * cosy * sinz;\r\n            this.elements[2] = cosx * cosy * sinz + sinx * siny * cosz;\r\n            this.elements[3] = cosx * cosy * cosz - sinx * siny * sinz;\r\n        }\r\n        else if(this.axisOrder === \"ZYX\") {\r\n            this.elements[0] = sinx * cosy * cosz - cosx * siny * sinz;\r\n            this.elements[1] = cosx * siny * cosz + sinx * cosy * sinz;\r\n            this.elements[2] = cosx * cosy * sinz - sinx * siny * cosz;\r\n            this.elements[3] = cosx * cosy * cosz + sinx * siny * sinz;\r\n        }\r\n        else if(this.axisOrder === \"YZX\") {\r\n            this.elements[0] = sinx * cosy * cosz + cosx * siny * sinz;\r\n            this.elements[1] = cosx * siny * cosz + sinx * cosy * sinz;\r\n            this.elements[2] = cosx * cosy * sinz - sinx * siny * cosz;\r\n            this.elements[3] = cosx * cosy * cosz - sinx * siny * sinz;\r\n        }\r\n        else if(this.axisOrder === \"XZY\") {\r\n            this.elements[0] = sinx * cosy * cosz - cosx * siny * sinz;\r\n            this.elements[1] = cosx * siny * cosz - sinx * cosy * sinz;\r\n            this.elements[2] = cosx * cosy * sinz + sinx * siny * cosz;\r\n            this.elements[3] = cosx * cosy * cosz + sinx * siny * sinz;\r\n        }\r\n\r\n        return this;\r\n    }\r\n}","import {DOMMesh} from \"./DOMMesh.js\";\r\nimport {Camera} from \"../camera/Camera.js\";\r\nimport {Mat4} from '../math/Mat4.js';\r\nimport {Vec2} from '../math/Vec2.js';\r\nimport {Vec3} from '../math/Vec3.js';\r\nimport {Quat} from '../math/Quat.js';\r\nimport {throwWarning} from '../utils/utils.js';\r\n\r\n/***\r\n Here we create our Plane object\r\n We will extend our DOMMesh class that handles all the WebGL part and basic HTML sizings\r\n\r\n Plane class will add:\r\n - sizing and positioning and everything that relates to the DOM like draw checks (frustum culling) and reenter/leave events\r\n - projection (using Camera class object) and view matrices and everything that is related like perspective, scale, rotation...\r\n\r\n params :\r\n @renderer (Curtains renderer or Renderer class object): our curtains object OR our curtains renderer object\r\n @plane (html element): the html element that we will use for our Plane object\r\n\r\n @Meshparams (object): see Mesh class object\r\n\r\n @alwaysDraw (boolean, optionnal): if the plane should always be drawn or if it should use frustum culling. Default to false.\r\n @visible (boolean, optional): if the plane should be drawn or not. Default to true.\r\n @transparent (boolean, optional): if the plane should handle transparency. Default to false.\r\n @drawCheckMargins (object, optional): defines the margins in pixels to add to the frustum culling check to determine if the plane should be drawn. Default to 0.\r\n @autoloadSources (boolean, optional): if the sources should be loaded on init automatically. Default to true\r\n @watchScroll (boolean, optional): if the plane should auto update its position based on the scroll value. Default to true.\r\n @fov (float, optional): defines the perspective field of view used by the camera. Default to 50.\r\n\r\n returns :\r\n @this: our Plane\r\n ***/\r\n\r\n// avoid reinstancing those during runtime\r\nconst tempScale = new Vec2();\r\n\r\n// positions\r\nconst tempWorldPos1 = new Vec3();\r\nconst tempWorldPos2 = new Vec3();\r\n\r\n// frustum culling\r\nconst tempCorner1 = new Vec3();\r\nconst tempCorner2 = new Vec3();\r\nconst tempCorner3 = new Vec3();\r\nconst tempCorner4 = new Vec3();\r\nconst tempCulledCorner1 = new Vec3();\r\nconst tempCulledCorner2 = new Vec3();\r\n\r\n// raycasting\r\nconst identityQuat = new Quat();\r\nconst defaultTransformOrigin = new Vec3(0.5, 0.5, 0);\r\nconst tempRayDirection = new Vec3();\r\nconst tempNormals = new Vec3();\r\nconst tempRotatedOrigin = new Vec3();\r\nconst tempRaycast = new Vec3();\r\nconst castedMouseCoords = new Vec2();\r\n\r\nexport class Plane extends DOMMesh {\r\n    constructor(renderer, htmlElement, {\r\n        // Mesh params\r\n        widthSegments,\r\n        heightSegments,\r\n        renderOrder,\r\n        depthTest,\r\n        cullFace,\r\n        uniforms,\r\n        vertexShaderID,\r\n        fragmentShaderID,\r\n        vertexShader,\r\n        fragmentShader,\r\n        texturesOptions,\r\n        crossOrigin,\r\n\r\n        // Plane specific params\r\n        alwaysDraw = false,\r\n        visible = true,\r\n        transparent = false,\r\n        drawCheckMargins = {\r\n            top: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            left: 0,\r\n        },\r\n        autoloadSources = true,\r\n        watchScroll = true,\r\n        fov = 50,\r\n    } = {}) {\r\n        super(renderer, htmlElement, \"Plane\", {\r\n            widthSegments,\r\n            heightSegments,\r\n            renderOrder,\r\n            depthTest,\r\n            cullFace,\r\n            uniforms,\r\n            vertexShaderID,\r\n            fragmentShaderID,\r\n            vertexShader,\r\n            fragmentShader,\r\n            texturesOptions,\r\n            crossOrigin,\r\n        });\r\n\r\n        // return if no gl context\r\n        if(!this.gl) {\r\n            return;\r\n        }\r\n\r\n        this.index = this.renderer.planes.length;\r\n\r\n        // used for FBOs\r\n        this.target = null;\r\n\r\n        // use frustum culling or not\r\n        this.alwaysDraw = alwaysDraw;\r\n        // should draw is set to true by default, we'll check it later\r\n        this._shouldDraw = true;\r\n\r\n        this.visible = visible;\r\n\r\n        // if the plane has transparency\r\n        this._transparent = transparent;\r\n\r\n        // draw check margins in pixels\r\n        // positive numbers means it can be displayed even when outside the viewport\r\n        // negative numbers means it can be hidden even when inside the viewport\r\n        this.drawCheckMargins = drawCheckMargins;\r\n\r\n        // if we decide to load all sources on init or let the user do it manually\r\n        this.autoloadSources = autoloadSources;\r\n\r\n        // if we should watch scroll\r\n        this.watchScroll = watchScroll;\r\n\r\n        // define if we should update the plane's matrices when called in the draw loop\r\n        this._updateMVMatrix = false;\r\n\r\n        // init camera\r\n        this.camera = new Camera({\r\n            fov: fov,\r\n            width: this.renderer._boundingRect.width,\r\n            height: this.renderer._boundingRect.height,\r\n            pixelRatio: this.renderer.pixelRatio,\r\n        });\r\n\r\n        // if program is valid, go on\r\n        if(this._program.compiled) {\r\n            // init our plane\r\n            this._initPlane();\r\n\r\n            // add our plane to the scene stack and the renderer array\r\n            this.renderer.scene.addPlane(this);\r\n            this.renderer.planes.push(this);\r\n        }\r\n    }\r\n\r\n\r\n    /*** RESTORING CONTEXT ***/\r\n\r\n    /***\r\n     Used internally to handle context restoration after the program has been successfully compiled again\r\n     ***/\r\n    _programRestored() {\r\n        if(this.target) {\r\n            // reset its render target if needed\r\n            this.setRenderTarget(this.renderer.renderTargets[this.target.index]);\r\n        }\r\n\r\n        this._initMatrices();\r\n\r\n        // set our initial perspective matrix\r\n        this.setPerspective(this.camera.fov, this.camera.near, this.camera.far);\r\n\r\n        this._setWorldSizes();\r\n        this._applyWorldPositions();\r\n\r\n        // add the plane to our draw stack again as it have been emptied\r\n        this.renderer.scene.addPlane(this);\r\n\r\n        // reset textures\r\n        for(let i = 0; i < this.textures.length; i++) {\r\n            this.textures[i]._parent = this;\r\n            this.textures[i]._restoreContext();\r\n        }\r\n\r\n        this._canDraw = true;\r\n    }\r\n\r\n    /***\r\n     Init our basic plane values (transformations, positions, camera, sources)\r\n     ***/\r\n    _initPlane() {\r\n        // init transformation values\r\n        this._initTransformValues();\r\n\r\n        // init its position values\r\n        this._initPositions();\r\n        // set camera values\r\n        this.setPerspective(this.camera.fov, this.camera.near, this.camera.far);\r\n        // load sources\r\n        this._initSources();\r\n    }\r\n\r\n\r\n    /*** TRANSFORMATIONS, PROJECTION & MATRICES ***/\r\n\r\n    /***\r\n     Set/reset plane's transformation values: rotation, scale, translation, transform origin\r\n     ***/\r\n    _initTransformValues() {\r\n        this.rotation = new Vec3();\r\n        this.rotation.onChange(() => this._applyRotation());\r\n\r\n        // initial quaternion\r\n        this.quaternion = new Quat();\r\n\r\n        // translation in viewport coordinates\r\n        this.relativeTranslation = new Vec3();\r\n        this.relativeTranslation.onChange(() => this._setTranslation());\r\n\r\n        // translation in webgl coordinates\r\n        this._translation = new Vec3();\r\n\r\n        // scale is a Vec3 with z always equal to 1\r\n        this.scale = new Vec3(1);\r\n        this.scale.onChange(() => {\r\n            this.scale.z = 1;\r\n            this._applyScale();\r\n        });\r\n\r\n        // set plane transform origin to center\r\n        this.transformOrigin = new Vec3(0.5, 0.5, 0);\r\n        this.transformOrigin.onChange(() => {\r\n            // set transformation origin relative to world space as well\r\n            this._setWorldTransformOrigin();\r\n            this._updateMVMatrix = true;\r\n        });\r\n    }\r\n\r\n\r\n    /***\r\n     Reset our plane transformation values and HTML element if specified (and valid)\r\n\r\n     params :\r\n     @htmlElement (HTML element, optional) : if provided, new HTML element to use as a reference for sizes and position syncing.\r\n     ***/\r\n    resetPlane(htmlElement) {\r\n        this._initTransformValues();\r\n\r\n        // reset transformation origin relative to world space as well\r\n        this._setWorldTransformOrigin();\r\n\r\n        if(htmlElement !== null && !!htmlElement) {\r\n            this.htmlElement = htmlElement;\r\n\r\n            this.resize();\r\n        }\r\n        else if(!htmlElement && !this.renderer.production) {\r\n            throwWarning(this.type + \": You are trying to reset a plane with a HTML element that does not exist. The old HTML element will be kept instead.\");\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This function removes the plane current render target\r\n     ***/\r\n    removeRenderTarget() {\r\n        if(this.target) {\r\n            // reset our planes stacks\r\n            this.renderer.scene.removePlane(this);\r\n            this.target = null;\r\n            this.renderer.scene.addPlane(this);\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     Init our plane position: set its matrices, its position and perspective\r\n     ***/\r\n    _initPositions() {\r\n        // set its matrices\r\n        this._initMatrices();\r\n\r\n        // apply our css positions\r\n        this._setWorldSizes();\r\n        this._applyWorldPositions();\r\n    }\r\n\r\n\r\n    /***\r\n     Init our plane model view and projection matrices and set their uniform locations\r\n     ***/\r\n    _initMatrices() {\r\n        // create our matrices, they will be set after\r\n        const matrix = new Mat4();\r\n        this._matrices = {\r\n            world: {\r\n                // world matrix (global transformation)\r\n                matrix: matrix,\r\n            },\r\n            modelView: {\r\n                // model view matrix (world matrix multiplied by camera view matrix)\r\n                name: \"uMVMatrix\",\r\n                matrix: matrix,\r\n                location: this.gl.getUniformLocation(this._program.program, \"uMVMatrix\"),\r\n            },\r\n            projection: {\r\n                // camera projection matrix\r\n                name: \"uPMatrix\",\r\n                matrix: matrix,\r\n                location: this.gl.getUniformLocation(this._program.program, \"uPMatrix\"),\r\n            },\r\n            modelViewProjection: {\r\n                // model view projection matrix (model view matrix multiplied by projection)\r\n                matrix: matrix,\r\n            }\r\n        };\r\n    }\r\n\r\n\r\n    /*** PLANES PERSPECTIVES, SCALES AND ROTATIONS ***/\r\n\r\n    /***\r\n     This will set our perspective matrix and update our perspective matrix uniform\r\n     used internally at each draw call if needed\r\n     ***/\r\n    _setPerspectiveMatrix() {\r\n        // update our matrix uniform if we actually have updated its values\r\n        if(this.camera._shouldUpdate) {\r\n            this.renderer.useProgram(this._program);\r\n            this.gl.uniformMatrix4fv(this._matrices.projection.location, false, this._matrices.projection.matrix.elements);\r\n        }\r\n\r\n        // reset camera shouldUpdate flag\r\n        this.camera.cancelUpdate();\r\n    }\r\n\r\n\r\n    /***\r\n     This will set our perspective matrix new parameters (fov, near plane and far plane)\r\n     used internally but can be used externally as well to change fov for example\r\n\r\n     params :\r\n     @fov (float): the field of view\r\n     @near (float): the nearest point where object are displayed\r\n     @far (float): the farthest point where object are displayed\r\n     ***/\r\n    setPerspective(fov, near, far) {\r\n        this.camera.setPerspective(fov, near, far, this.renderer._boundingRect.width, this.renderer._boundingRect.height, this.renderer.pixelRatio);\r\n\r\n        // force camera update on context restoration\r\n        if(this.renderer.state.isContextLost) {\r\n            this.camera.forceUpdate();\r\n        }\r\n\r\n        this._matrices.projection.matrix = this.camera.projectionMatrix;\r\n\r\n        if(this.camera._shouldUpdate) {\r\n            // we changed the fov, update world sizes and world positions\r\n            this._setWorldSizes();\r\n            this._applyWorldPositions();\r\n\r\n            // translation along the Z axis is dependant of camera CSSPerspective\r\n            // we're computing it here because it changes when the fov changes\r\n            this._translation.z = this.relativeTranslation.z / this.camera.CSSPerspective;\r\n        }\r\n\r\n        // if camera settings changed update the mvMatrix as well cause we need to update z translation based on new fov\r\n        this._updateMVMatrix = this.camera._shouldUpdate;\r\n    }\r\n\r\n\r\n    /***\r\n     This will set our model view matrix\r\n     used internally at each draw call if needed\r\n     It will calculate our matrix based on its plane translation, rotation and scale\r\n     ***/\r\n    _setMVMatrix() {\r\n        if(this._updateMVMatrix) {\r\n            // compose our world transformation matrix from custom origin\r\n            this._matrices.world.matrix = this._matrices.world.matrix.composeFromOrigin(this._translation, this.quaternion, this.scale, this._boundingRect.world.transformOrigin);\r\n\r\n            // we need to scale our planes, from a square to a right sized rectangle\r\n            // we're doing this after our transformation matrix because this scale transformation always have the same origin\r\n            this._matrices.world.matrix.scale({\r\n                x: this._boundingRect.world.width,\r\n                y: this._boundingRect.world.height,\r\n                z: 1\r\n            });\r\n\r\n\r\n            // our model view matrix is our world matrix multiplied with our camera view matrix\r\n            // in our case we're just subtracting the camera Z position to our world matrix\r\n            this._matrices.modelView.matrix.copy(this._matrices.world.matrix);\r\n            this._matrices.modelView.matrix.elements[14] -= this.camera.position.z;\r\n\r\n            // our modelViewProjection matrix, useful for bounding box calculations and frustum culling\r\n            // this is the result of our projection matrix multiplied by our modelView matrix\r\n            this._matrices.modelViewProjection.matrix = this._matrices.projection.matrix.multiply(this._matrices.modelView.matrix);\r\n\r\n            // check if we should draw the plane but only if everything has been initialized\r\n            if(!this.alwaysDraw) {\r\n                this._shouldDrawCheck();\r\n            }\r\n\r\n            // update our matrix uniform\r\n            this.renderer.useProgram(this._program);\r\n            this.gl.uniformMatrix4fv(this._matrices.modelView.location, false, this._matrices.modelView.matrix.elements);\r\n        }\r\n\r\n        // reset our flag\r\n        this._updateMVMatrix = false;\r\n    }\r\n\r\n\r\n    /*** SCREEN TO WORLD CALCS ***/\r\n\r\n    /***\r\n     Convert our transform origin point from plane space to world space\r\n     ***/\r\n    _setWorldTransformOrigin() {\r\n        // set transformation origin relative to world space as well\r\n        this._boundingRect.world.transformOrigin = new Vec3(\r\n            (this.transformOrigin.x * 2 - 1) // between -1 and 1\r\n            * this._boundingRect.world.width,\r\n            -(this.transformOrigin.y * 2 - 1) // between -1 and 1\r\n            * this._boundingRect.world.height,\r\n            this.transformOrigin.z\r\n        );\r\n    }\r\n\r\n\r\n    /***\r\n     This function takes pixel values along X and Y axis and convert them to world space coordinates\r\n\r\n     params :\r\n     @vector (Vec3): position to convert on X, Y and Z axes\r\n\r\n     returns :\r\n     @worldPosition: plane's position in WebGL space\r\n     ***/\r\n    _documentToWorldSpace(vector) {\r\n        return tempWorldPos2.set(\r\n            (vector.x * this.renderer.pixelRatio / this.renderer._boundingRect.width) * this._boundingRect.world.ratios.width,\r\n            -(vector.y * this.renderer.pixelRatio / this.renderer._boundingRect.height) * this._boundingRect.world.ratios.height,\r\n            vector.z,\r\n        );\r\n    }\r\n\r\n    /***\r\n     Set our plane dimensions relative to clip spaces\r\n     ***/\r\n    _setWorldSizes() {\r\n        const ratios = this.camera.getScreenRatiosFromFov();\r\n\r\n        // our plane world informations\r\n        // since our vertices values range from -1 to 1, it is supposed to draw a square\r\n        // we need to scale them under the hood relatively to our canvas\r\n        // to display an accurately sized plane\r\n        this._boundingRect.world = {\r\n            width: (this._boundingRect.document.width / this.renderer._boundingRect.width) * ratios.width / 2,\r\n            height: (this._boundingRect.document.height / this.renderer._boundingRect.height) * ratios.height / 2,\r\n            ratios\r\n        };\r\n\r\n        // set transformation origin relative to world space as well\r\n        this._setWorldTransformOrigin();\r\n    }\r\n\r\n\r\n    /***\r\n     Set our plane position relative to clip spaces\r\n     ***/\r\n    _setWorldPosition() {\r\n        // dimensions and positions of our plane in the document and clip spaces\r\n        // don't forget translations in webgl space are referring to the center of our plane and canvas\r\n        const planeCenter = {\r\n            x: (this._boundingRect.document.width / 2) + this._boundingRect.document.left,\r\n            y: (this._boundingRect.document.height / 2) + this._boundingRect.document.top,\r\n        };\r\n\r\n        const containerCenter = {\r\n            x: (this.renderer._boundingRect.width / 2) + this.renderer._boundingRect.left,\r\n            y: (this.renderer._boundingRect.height / 2) + this.renderer._boundingRect.top,\r\n        };\r\n\r\n        this._boundingRect.world.top = ((containerCenter.y - planeCenter.y) / this.renderer._boundingRect.height) * this._boundingRect.world.ratios.height;\r\n        this._boundingRect.world.left = ((planeCenter.x - containerCenter.x) / this.renderer._boundingRect.width) * this._boundingRect.world.ratios.width;\r\n    }\r\n\r\n\r\n    /*** TRANSFORMATIONS ***/\r\n\r\n    /***\r\n     This will set our plane scale\r\n     used internally but can be used externally as well\r\n\r\n     params :\r\n     @scale (Vec2 object): scale to apply on X and Y axes\r\n     ***/\r\n    setScale(scale) {\r\n        if(!scale.type || scale.type !== \"Vec2\") {\r\n            if(!this.renderer.production) {\r\n                throwWarning(this.type + \": Cannot set scale because the parameter passed is not of Vec2 type:\", scale);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        scale.sanitizeNaNValuesWith(this.scale).max(tempScale.set(0.001, 0.001));\r\n\r\n        // only apply if values changed\r\n        if(scale.x !== this.scale.x || scale.y !== this.scale.y) {\r\n            this.scale.set(scale.x, scale.y, 1);\r\n\r\n            this._applyScale();\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This will apply our scale and tells our model view matrix to update\r\n     ***/\r\n    _applyScale() {\r\n        // adjust textures size\r\n        for(let i = 0; i < this.textures.length; i++) {\r\n            this.textures[i].resize();\r\n        }\r\n\r\n        // we should update the plane mvMatrix\r\n        this._updateMVMatrix = true;\r\n    }\r\n\r\n\r\n    /***\r\n     This will set our plane rotation\r\n     used internally but can be used externally as well\r\n\r\n     params :\r\n     @rotation (Vec3 object): rotation to apply on X, Y and Z axes (in radians)\r\n     ***/\r\n    setRotation(rotation) {\r\n        if(!rotation.type || rotation.type !== \"Vec3\") {\r\n            if(!this.renderer.production) {\r\n                throwWarning(this.type + \": Cannot set rotation because the parameter passed is not of Vec3 type:\", rotation);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        rotation.sanitizeNaNValuesWith(this.rotation);\r\n\r\n        // only apply if values changed\r\n        if(!rotation.equals(this.rotation)) {\r\n            this.rotation.copy(rotation);\r\n\r\n            this._applyRotation();\r\n        }\r\n    }\r\n\r\n    /***\r\n     This will apply our rotation and tells our model view matrix to update\r\n     ***/\r\n    _applyRotation() {\r\n        this.quaternion.setFromVec3(this.rotation);\r\n        // we should update the plane mvMatrix\r\n        this._updateMVMatrix = true;\r\n    }\r\n\r\n\r\n    /***\r\n     This will set our plane transform origin\r\n     (0, 0, 0) means plane's top left corner\r\n     (1, 1, 0) means plane's bottom right corner\r\n     (0.5, 0.5, -1) means behind plane's center\r\n\r\n     params :\r\n     @origin (Vec3 object): coordinate of transformation origin X, Y and Z axes\r\n     ***/\r\n    setTransformOrigin(origin) {\r\n        if(!origin.type || origin.type !== \"Vec3\") {\r\n            if(!this.renderer.production) {\r\n                throwWarning(this.type + \": Cannot set transform origin because the parameter passed is not of Vec3 type:\", origin);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        origin.sanitizeNaNValuesWith(this.transformOrigin);\r\n\r\n        if(!origin.equals(this.transformOrigin)) {\r\n            this.transformOrigin.copy(origin);\r\n\r\n            // set transformation origin relative to world space as well\r\n            this._setWorldTransformOrigin();\r\n\r\n            this._updateMVMatrix = true;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This will set our plane translation by adding plane computed bounding box values and computed relative position values\r\n     ***/\r\n    _setTranslation() {\r\n        // avoid unnecessary calculations if we don't have a users set relative position\r\n        let worldPosition = tempWorldPos1.set(0, 0, 0);\r\n        if(!this.relativeTranslation.equals(worldPosition)) {\r\n            worldPosition = this._documentToWorldSpace(this.relativeTranslation);\r\n        }\r\n\r\n        this._translation.set(\r\n            this._boundingRect.world.left + worldPosition.x,\r\n            this._boundingRect.world.top + worldPosition.y,\r\n            //this._translation.z,\r\n            this.relativeTranslation.z / this.camera.CSSPerspective\r\n        );\r\n\r\n        // we should update the plane mvMatrix\r\n        this._updateMVMatrix = true;\r\n    }\r\n\r\n\r\n    /***\r\n     This function takes pixel values along X and Y axis and convert them to clip space coordinates, and then apply the corresponding translation\r\n\r\n     params :\r\n     @translation (Vec3): translation to apply on X, Y and Z axes\r\n     ***/\r\n    setRelativeTranslation(translation) {\r\n        if(!translation.type || translation.type !== \"Vec3\") {\r\n            if(!this.renderer.production) {\r\n                throwWarning(this.type + \": Cannot set translation because the parameter passed is not of Vec3 type:\", translation);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        translation.sanitizeNaNValuesWith(this.relativeTranslation);\r\n\r\n        // only apply if values changed\r\n        if(!translation.equals(this.relativeTranslation)) {\r\n            this.relativeTranslation.copy(translation);\r\n\r\n            this._setTranslation();\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This function uses our plane HTML Element bounding rectangle values and convert them to the world clip space coordinates, and then apply the corresponding translation\r\n     ***/\r\n    _applyWorldPositions() {\r\n        // set our plane sizes and positions relative to the world clipspace\r\n        this._setWorldPosition();\r\n\r\n        // set the translation values\r\n        this._setTranslation();\r\n    }\r\n\r\n\r\n    /***\r\n     This function updates the plane position based on its CSS positions and transformations values.\r\n     Useful if the HTML element has been moved while the container size has not changed.\r\n     ***/\r\n    updatePosition() {\r\n        // set the new plane sizes and positions relative to document by triggering getBoundingClientRect()\r\n        this._setDocumentSizes();\r\n\r\n        // apply them\r\n        this._applyWorldPositions();\r\n    }\r\n\r\n\r\n    /***\r\n     This function updates the plane position based on the Curtains class scroll manager values\r\n\r\n     params:\r\n     @lastXDelta (float): last scroll value along X axis\r\n     @lastYDelta (float): last scroll value along Y axis\r\n     ***/\r\n    updateScrollPosition(lastXDelta, lastYDelta) {\r\n        // actually update the plane position only if last X delta or last Y delta is not equal to 0\r\n        if(lastXDelta || lastYDelta) {\r\n            // set new positions based on our delta without triggering reflow\r\n            this._boundingRect.document.top += lastYDelta * this.renderer.pixelRatio;\r\n            this._boundingRect.document.left += lastXDelta * this.renderer.pixelRatio;\r\n\r\n            // apply them\r\n            this._applyWorldPositions();\r\n        }\r\n    }\r\n\r\n\r\n    /*** FRUSTUM CULLING (DRAW CHECK) ***/\r\n\r\n\r\n    /***\r\n     Find the intersection point by adding a vector starting from a corner till we reach the near plane\r\n\r\n     params:\r\n     @refPoint (Vec3 class object): corner of the plane from which we start to iterate from\r\n     @secondPoint (Vec3 class object): second point near the refPoint to get a direction to use for iteration\r\n\r\n     returns:\r\n     @intersection (Vec3 class object): intersection between our plane and the camera near plane\r\n     ***/\r\n    _getIntersection(refPoint, secondPoint) {\r\n        // direction vector to add\r\n        let direction = secondPoint.clone().sub(refPoint);\r\n\r\n        // copy our corner refpoint\r\n        let intersection = refPoint.clone();\r\n        // iterate till we reach near plane\r\n        while(intersection.z > -1) {\r\n            intersection.add(direction);\r\n        }\r\n\r\n        return intersection;\r\n    }\r\n\r\n    /***\r\n     Get intersection points between a plane and the camera near plane\r\n     When a plane gets clipped by the camera near plane, the clipped corner projected coords returned by _applyMat4() are erronate\r\n     We need to find the intersection points using another approach\r\n     Here I chose to use non clipped corners projected coords and a really small vector parallel to the plane's side\r\n     We're adding that vector again and again to our corner projected coords until the Z coordinate matches the near plane: we got our intersection\r\n\r\n     params:\r\n     @corners (array): our original corners vertices coordinates\r\n     @mvpCorners (array): the projected corners of our plane\r\n     @clippedCorners (array): index of the corners that are clipped\r\n\r\n     returns:\r\n     @mvpCorners (array): the corrected projected corners of our plane\r\n     ***/\r\n    _getNearPlaneIntersections(corners, mvpCorners, clippedCorners) {\r\n        // rebuild the clipped corners based on non clipped ones\r\n        const mVPMatrix = this._matrices.modelViewProjection.matrix;\r\n\r\n        if(clippedCorners.length === 1) {\r\n            // we will have 5 corners to check so we'll need to push a new entry in our mvpCorners array\r\n            if(clippedCorners[0] === 0) {\r\n                // top left is culled\r\n                // get intersection iterating from top right\r\n                mvpCorners[0] = this._getIntersection(mvpCorners[1], tempCulledCorner1.set(0.95, 1, 0).applyMat4(mVPMatrix));\r\n\r\n                // get intersection iterating from bottom left\r\n                mvpCorners.push(this._getIntersection(mvpCorners[3], tempCulledCorner2.set(-1, -0.95, 0).applyMat4(mVPMatrix)));\r\n            }\r\n            else if(clippedCorners[0] === 1) {\r\n                // top right is culled\r\n                // get intersection iterating from top left\r\n                mvpCorners[1] = this._getIntersection(mvpCorners[0], tempCulledCorner1.set(-0.95, 1, 0).applyMat4(mVPMatrix));\r\n\r\n                // get intersection iterating from bottom right\r\n                mvpCorners.push(this._getIntersection(mvpCorners[2], tempCulledCorner2.set(1, -0.95, 0).applyMat4(mVPMatrix)));\r\n            }\r\n            else if(clippedCorners[0] === 2) {\r\n                // bottom right is culled\r\n                // get intersection iterating from bottom left\r\n                mvpCorners[2] = this._getIntersection(mvpCorners[3], tempCulledCorner1.set(-0.95, -1, 0).applyMat4(mVPMatrix));\r\n\r\n                // get intersection iterating from top right\r\n                mvpCorners.push(this._getIntersection(mvpCorners[1], tempCulledCorner2.set(1, 0.95, 0).applyMat4(mVPMatrix)));\r\n            }\r\n            else if(clippedCorners[0] === 3) {\r\n                // bottom left is culled\r\n                // get intersection iterating from bottom right\r\n                mvpCorners[3] = this._getIntersection(mvpCorners[2], tempCulledCorner1.set(0.95, -1, 0).applyMat4(mVPMatrix));\r\n\r\n                // get intersection iterating from top left\r\n                mvpCorners.push(this._getIntersection(mvpCorners[0], tempCulledCorner2.set( -1, 0.95, 0).applyMat4(mVPMatrix)));\r\n            }\r\n        }\r\n        else if(clippedCorners.length === 2) {\r\n            if(clippedCorners[0] === 0 && clippedCorners[1] === 1) {\r\n                // top part of the plane is culled by near plane\r\n                // find intersection using bottom corners\r\n                mvpCorners[0] = this._getIntersection(mvpCorners[3], tempCulledCorner1.set(-1, -0.95, 0).applyMat4(mVPMatrix));\r\n                mvpCorners[1] = this._getIntersection(mvpCorners[2], tempCulledCorner2.set( 1, -0.95, 0).applyMat4(mVPMatrix));\r\n            }\r\n            else if(clippedCorners[0] === 1 && clippedCorners[1] === 2) {\r\n                // right part of the plane is culled by near plane\r\n                // find intersection using left corners\r\n                mvpCorners[1] = this._getIntersection(mvpCorners[0], tempCulledCorner1.set(-0.95, 1, 0).applyMat4(mVPMatrix));\r\n                mvpCorners[2] = this._getIntersection(mvpCorners[3], tempCulledCorner2.set(-0.95, -1, 0).applyMat4(mVPMatrix));\r\n            }\r\n            else if(clippedCorners[0] === 2 && clippedCorners[1] === 3) {\r\n                // bottom part of the plane is culled by near plane\r\n                // find intersection using top corners\r\n                mvpCorners[2] = this._getIntersection(mvpCorners[1], tempCulledCorner1.set(1, 0.95, 0).applyMat4(mVPMatrix));\r\n                mvpCorners[3] = this._getIntersection(mvpCorners[0], tempCulledCorner2.set(-1, 0.95, 0).applyMat4(mVPMatrix));\r\n            }\r\n            else if(clippedCorners[0] === 0 && clippedCorners[1] === 3) {\r\n                // left part of the plane is culled by near plane\r\n                // find intersection using right corners\r\n                mvpCorners[0] = this._getIntersection(mvpCorners[1], tempCulledCorner1.set(0.95, 1, 0).applyMat4(mVPMatrix));\r\n                mvpCorners[3] = this._getIntersection(mvpCorners[2], tempCulledCorner2.set(0.95, -1, 0).applyMat4(mVPMatrix));\r\n            }\r\n        }\r\n        else if(clippedCorners.length === 3) {\r\n            // get the corner that is not clipped\r\n            let nonClippedCorner = 0;\r\n            for(let i = 0; i < corners.length; i++) {\r\n                if(!clippedCorners.includes(i)) {\r\n                    nonClippedCorner = i;\r\n                }\r\n            }\r\n\r\n            // we will have just 3 corners so reset our mvpCorners array with just the visible corner\r\n            mvpCorners = [\r\n                mvpCorners[nonClippedCorner]\r\n            ];\r\n            if(nonClippedCorner === 0) {\r\n                // from top left corner to right\r\n                mvpCorners.push(this._getIntersection(mvpCorners[0], tempCulledCorner1.set(-0.95, 1, 0).applyMat4(mVPMatrix)));\r\n                // from top left corner to bottom\r\n                mvpCorners.push(this._getIntersection(mvpCorners[0], tempCulledCorner2.set(-1, 0.95, 0).applyMat4(mVPMatrix)));\r\n            }\r\n            else if(nonClippedCorner === 1) {\r\n                // from top right corner to left\r\n                mvpCorners.push(this._getIntersection(mvpCorners[0], tempCulledCorner1.set(0.95, 1, 0).applyMat4(mVPMatrix)));\r\n                // from top right corner to bottom\r\n                mvpCorners.push(this._getIntersection(mvpCorners[0], tempCulledCorner2.set(1, 0.95, 0).applyMat4(mVPMatrix)));\r\n            }\r\n            else if(nonClippedCorner === 2) {\r\n                // from bottom right corner to left\r\n                mvpCorners.push(this._getIntersection(mvpCorners[0], tempCulledCorner1.set(0.95, -1, 0).applyMat4(mVPMatrix)));\r\n                // from bottom right corner to top\r\n                mvpCorners.push(this._getIntersection(mvpCorners[0], tempCulledCorner2.set(1,-0.95, 0).applyMat4(mVPMatrix)));\r\n            }\r\n            else if(nonClippedCorner === 3) {\r\n                // from bottom left corner to right\r\n                mvpCorners.push(this._getIntersection(mvpCorners[0], tempCulledCorner1.set(-0.95, -1, 0).applyMat4(mVPMatrix)));\r\n                // from bottom left corner to top\r\n                mvpCorners.push(this._getIntersection(mvpCorners[0], tempCulledCorner2.set(-1 -0.95, 0).applyMat4(mVPMatrix)));\r\n            }\r\n        }\r\n        else {\r\n            // all 4 corners are culled! artificially apply wrong coords to force plane culling\r\n            for(let i = 0; i < corners.length; i++) {\r\n                mvpCorners[i][0] = 10000;\r\n                mvpCorners[i][1] = 10000;\r\n            }\r\n        }\r\n\r\n        return mvpCorners;\r\n    };\r\n\r\n\r\n    /***\r\n     Useful to get our WebGL plane bounding box in the world space\r\n     Takes all transformations into account\r\n     Used internally for frustum culling\r\n\r\n     returns :\r\n     @boundingRectangle (obj): an object containing our plane WebGL element 4 corners coordinates: top left corner is [-1, 1] and bottom right corner is [1, -1]\r\n     ***/\r\n    _getWorldCoords() {\r\n        const corners = [\r\n            tempCorner1.set(-1, 1, 0), // plane's top left corner\r\n            tempCorner2.set(1, 1, 0), // plane's top right corner\r\n            tempCorner3.set(1, -1, 0), // plane's bottom right corner\r\n            tempCorner4.set(-1, -1, 0), // plane's bottom left corner\r\n        ];\r\n\r\n        // corners with model view projection matrix applied\r\n        let mvpCorners = [];\r\n        // eventual clipped corners\r\n        let clippedCorners = [];\r\n\r\n        // we are going to get our plane's four corners relative to our model view projection matrix\r\n        for(let i = 0; i < corners.length; i++) {\r\n            const mvpCorner = corners[i].applyMat4(this._matrices.modelViewProjection.matrix);\r\n            mvpCorners.push(mvpCorner);\r\n\r\n            // Z position is > 1 or < -1 means the corner is clipped\r\n            if(Math.abs(mvpCorner.z) > 1) {\r\n                clippedCorners.push(i);\r\n            }\r\n        }\r\n\r\n        // near plane is clipping, get intersections between plane and near plane\r\n        if(clippedCorners.length) {\r\n            mvpCorners = this._getNearPlaneIntersections(corners, mvpCorners, clippedCorners);\r\n        }\r\n\r\n        // we need to check for the X and Y min and max values\r\n        // use arbitrary integers that will be overriden anyway\r\n        let minX = Infinity;\r\n        let maxX = -Infinity;\r\n\r\n        let minY = Infinity;\r\n        let maxY = -Infinity;\r\n\r\n        for(let i = 0; i < mvpCorners.length; i++) {\r\n            const corner = mvpCorners[i];\r\n\r\n            if(corner.x < minX) {\r\n                minX = corner.x;\r\n            }\r\n            if(corner.x > maxX) {\r\n                maxX = corner.x;\r\n            }\r\n\r\n            if(corner.y < minY) {\r\n                minY = corner.y;\r\n            }\r\n            if(corner.y > maxY) {\r\n                maxY = corner.y;\r\n            }\r\n        }\r\n\r\n        return {\r\n            top: maxY,\r\n            right: maxX,\r\n            bottom: minY,\r\n            left: minX,\r\n        };\r\n    };\r\n\r\n\r\n    /***\r\n     Transpose our plane corners coordinates from world space to document space\r\n     Sets an object with the accurate plane WebGL bounding rect relative to document\r\n     ***/\r\n    _computeWebGLBoundingRect() {\r\n        // get our world space bouding rect\r\n        const worldBBox = this._getWorldCoords();\r\n\r\n        // normalize worldBBox to (0 -> 1) screen coordinates with [0, 0] being the top left corner and [1, 1] being the bottom right\r\n        let screenBBox = {\r\n            top: 1 - (worldBBox.top + 1) / 2,\r\n            right: (worldBBox.right + 1) / 2,\r\n            bottom: 1 - (worldBBox.bottom + 1) / 2,\r\n            left: (worldBBox.left + 1) / 2,\r\n        };\r\n\r\n        screenBBox.width = screenBBox.right - screenBBox.left;\r\n        screenBBox.height = screenBBox.bottom - screenBBox.top;\r\n\r\n        // return our values ranging from 0 to 1 multiplied by our canvas sizes + canvas top and left offsets\r\n        this._boundingRect.worldToDocument = {\r\n            width: screenBBox.width * this.renderer._boundingRect.width,\r\n            height: screenBBox.height * this.renderer._boundingRect.height,\r\n            top: screenBBox.top * this.renderer._boundingRect.height + this.renderer._boundingRect.top,\r\n            left: screenBBox.left * this.renderer._boundingRect.width + this.renderer._boundingRect.left,\r\n\r\n            // add left and width to get right property\r\n            right: screenBBox.left * this.renderer._boundingRect.width + this.renderer._boundingRect.left + screenBBox.width * this.renderer._boundingRect.width,\r\n            // add top and height to get bottom property\r\n            bottom: screenBBox.top * this.renderer._boundingRect.height + this.renderer._boundingRect.top + screenBBox.height * this.renderer._boundingRect.height,\r\n        };\r\n    }\r\n\r\n\r\n    /***\r\n     Returns our plane WebGL bounding rect relative to document\r\n\r\n     returns :\r\n     @boundingRectangle (obj): an object containing our plane WebGL element bounding rectangle (width, height, top, bottom, right and left properties)\r\n     ***/\r\n    getWebGLBoundingRect() {\r\n        if(!this._matrices.modelViewProjection) {\r\n            return this._boundingRect.document;\r\n        }\r\n        else if(!this._boundingRect.worldToDocument || this.alwaysDraw) {\r\n            this._computeWebGLBoundingRect();\r\n        }\r\n\r\n        return this._boundingRect.worldToDocument;\r\n    }\r\n\r\n\r\n    /***\r\n     Returns our plane WebGL bounding rectangle in document coordinates including additional drawCheckMargins\r\n\r\n     returns :\r\n     @boundingRectangle (obj): an object containing our plane WebGL element bounding rectangle including the draw check margins (top, bottom, right and left properties)\r\n     ***/\r\n    _getWebGLDrawRect() {\r\n        this._computeWebGLBoundingRect();\r\n\r\n        return {\r\n            top: this._boundingRect.worldToDocument.top - this.drawCheckMargins.top,\r\n            right: this._boundingRect.worldToDocument.right + this.drawCheckMargins.right,\r\n            bottom: this._boundingRect.worldToDocument.bottom + this.drawCheckMargins.bottom,\r\n            left: this._boundingRect.worldToDocument.left - this.drawCheckMargins.left,\r\n        };\r\n    }\r\n\r\n\r\n    /***\r\n     This function checks if the plane is currently visible in the canvas and sets _shouldDraw property according to this test\r\n     This is our real frustum culling check\r\n     ***/\r\n    _shouldDrawCheck() {\r\n        // get plane bounding rect\r\n        const actualPlaneBounds = this._getWebGLDrawRect();\r\n\r\n        // if we decide to draw the plane only when visible inside the canvas\r\n        // we got to check if its actually inside the canvas\r\n        if(\r\n            Math.round(actualPlaneBounds.right) <= this.renderer._boundingRect.left\r\n            || Math.round(actualPlaneBounds.left) >= this.renderer._boundingRect.left + this.renderer._boundingRect.width\r\n            || Math.round(actualPlaneBounds.bottom) <= this.renderer._boundingRect.top\r\n            || Math.round(actualPlaneBounds.top) >= this.renderer._boundingRect.top + this.renderer._boundingRect.height\r\n        ) {\r\n            if(this._shouldDraw) {\r\n                this._shouldDraw = false;\r\n                // callback for leaving view\r\n                this.renderer.nextRender.add(() => this._onLeaveViewCallback && this._onLeaveViewCallback());\r\n            }\r\n        }\r\n        else {\r\n            if(!this._shouldDraw) {\r\n                // callback for entering view\r\n                this.renderer.nextRender.add(() => this._onReEnterViewCallback && this._onReEnterViewCallback());\r\n            }\r\n            this._shouldDraw = true;\r\n        }\r\n    }\r\n\r\n\r\n    /***\r\n     This function returns if the plane is actually drawn (ie fully initiated, visible property set to true and not culled)\r\n     ***/\r\n    isDrawn() {\r\n        return this._canDraw && this.visible && (this._shouldDraw || this.alwaysDraw);\r\n    }\r\n\r\n\r\n    /*** DEPTH AND RENDER ORDER ***/\r\n\r\n    /***\r\n     This function set/unset the depth test for that plane\r\n\r\n     params :\r\n     @shouldEnableDepthTest (bool): enable/disable depth test for that plane\r\n     ***/\r\n    enableDepthTest(shouldEnableDepthTest) {\r\n        this._depthTest = shouldEnableDepthTest;\r\n    }\r\n\r\n\r\n    /*** SOURCES ***/\r\n\r\n    /***\r\n     Load our initial sources if needed and calls onReady callback\r\n     ***/\r\n    _initSources() {\r\n        // finally load every sources already in our plane html element\r\n        // load plane sources\r\n        let loaderSize = 0;\r\n        if(this.autoloadSources) {\r\n            const images = this.htmlElement.getElementsByTagName(\"img\");\r\n            const videos = this.htmlElement.getElementsByTagName(\"video\");\r\n            const canvases = this.htmlElement.getElementsByTagName(\"canvas\");\r\n\r\n            // load images\r\n            if(images.length) {\r\n                this.loadImages(images);\r\n            }\r\n\r\n            // load videos\r\n            if(videos.length) {\r\n                this.loadVideos(videos);\r\n            }\r\n\r\n            // load canvases\r\n            if(canvases.length) {\r\n                this.loadCanvases(canvases);\r\n            }\r\n\r\n            loaderSize = images.length + videos.length + canvases.length;\r\n        }\r\n\r\n        this.loader._setLoaderSize(loaderSize);\r\n\r\n        this._canDraw = true;\r\n    }\r\n\r\n\r\n    /*** DRAWING ***/\r\n\r\n    /***\r\n     Specific instructions for the Plane class to execute before drawing it\r\n     ***/\r\n    _startDrawing() {\r\n        // check if our plane is ready to draw\r\n        if(this._canDraw) {\r\n            // even if our plane should not be drawn we still execute its onRender callback and update its uniforms\r\n            if(this._onRenderCallback) {\r\n                this._onRenderCallback();\r\n            }\r\n\r\n            // to improve webgl pipeline performace, we might want to update each texture that needs an update here\r\n            // see https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#texImagetexSubImage_uploads_particularly_with_videos_can_cause_pipeline_flushes\r\n\r\n\r\n            // if we should render to a render target\r\n            if(this.target) {\r\n                this.renderer.bindFrameBuffer(this.target);\r\n            }\r\n            else if(this.renderer.state.scenePassIndex === null) {\r\n                this.renderer.bindFrameBuffer(null);\r\n            }\r\n\r\n            // update our perspective matrix\r\n            this._setPerspectiveMatrix();\r\n\r\n            // update our mv matrix\r\n            this._setMVMatrix();\r\n\r\n            // now check if we really need to draw it and its textures\r\n            if((this.alwaysDraw || this._shouldDraw) && this.visible) {\r\n                this._draw();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /*** INTERACTION ***/\r\n\r\n    /***\r\n     This function takes the mouse position relative to the document and returns it relative to our plane\r\n     It ranges from -1 to 1 on both axis\r\n\r\n     params :\r\n     @mouseCoordinates (Vec2 object): coordinates of the mouse\r\n\r\n     returns :\r\n     @mousePosition (Vec2 object): the mouse position relative to our plane in WebGL space coordinates\r\n     ***/\r\n    mouseToPlaneCoords(mouseCoordinates) {\r\n        identityQuat.setAxisOrder(this.quaternion.axisOrder);\r\n\r\n        // plane has no rotation and transform origin is set to default, no need for real raycasting\r\n        if(identityQuat.equals(this.quaternion) && defaultTransformOrigin.equals(this.transformOrigin)) {\r\n            return super.mouseToPlaneCoords(mouseCoordinates);\r\n        }\r\n        else {\r\n            // raycasting\r\n            // based on https://people.cs.clemson.edu/~dhouse/courses/405/notes/raycast.pdf\r\n\r\n            // convert mouse position to 3d normalised device coordinates (from [-1, -1] to [1, 1])\r\n            const worldMouse = {\r\n                x: 2 * (mouseCoordinates.x / (this.renderer._boundingRect.width / this.renderer.pixelRatio)) - 1,\r\n                y: 2 * (1 - (mouseCoordinates.y / (this.renderer._boundingRect.height / this.renderer.pixelRatio))) - 1\r\n            };\r\n\r\n            const rayOrigin = this.camera.position.clone();\r\n\r\n            // ray direction based on normalised coordinates and plane translation\r\n            const rayDirection = tempRayDirection.set(\r\n                worldMouse.x,\r\n                worldMouse.y,\r\n                -0.5,\r\n            );\r\n\r\n            // unproject ray direction\r\n            rayDirection.unproject(this.camera);\r\n            rayDirection.sub(rayOrigin).normalize();\r\n\r\n\r\n            // plane normals (could also be [0, 0, 1], makes no difference, raycasting lands the same result for both face)\r\n            const planeNormals = tempNormals.set(0, 0, -1);\r\n\r\n            // apply plane quaternion to plane normals\r\n            planeNormals.applyQuat(this.quaternion).normalize();\r\n\r\n            const result = tempRaycast.set(0, 0, 0);\r\n\r\n            const denominator = planeNormals.dot(rayDirection);\r\n\r\n            if(Math.abs(denominator) >= 0.0001) {\r\n                const inverseViewMatrix = this._matrices.world.matrix.getInverse().multiply(this.camera.viewMatrix);\r\n\r\n                // get the plane's center coordinates\r\n                // start with our transform origin point\r\n                const planeOrigin = this._boundingRect.world.transformOrigin.clone().add(this._translation);\r\n\r\n                // rotate our transform origin about world center\r\n                const rotatedOrigin = tempRotatedOrigin.set(\r\n                    this._translation.x - planeOrigin.x,\r\n                    this._translation.y - planeOrigin.y,\r\n                    this._translation.z - planeOrigin.z,\r\n                );\r\n                rotatedOrigin.applyQuat(this.quaternion);\r\n\r\n                // add it to our plane origin\r\n                planeOrigin.add(rotatedOrigin);\r\n\r\n                // distance from ray origin to plane\r\n                const distance = planeNormals.dot(planeOrigin.clone().sub(rayOrigin)) / denominator;\r\n                result.copy(\r\n                    rayOrigin.add(rayDirection.multiplyScalar(distance))\r\n                );\r\n\r\n                result.applyMat4(inverseViewMatrix);\r\n            }\r\n            else {\r\n                // no intersection!\r\n                result.set(Infinity, Infinity, Infinity);\r\n            }\r\n\r\n            return castedMouseCoords.set(result.x, result.y);\r\n        }\r\n    }\r\n\r\n\r\n    /*** EVENTS ***/\r\n\r\n    /***\r\n     This is called each time a plane is entering again the view bounding box\r\n\r\n     params :\r\n     @callback (function) : a function to execute\r\n\r\n     returns :\r\n     @this: our plane to handle chaining\r\n     ***/\r\n    onReEnterView(callback) {\r\n        if(callback) {\r\n            this._onReEnterViewCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     This is called each time a plane is leaving the view bounding box\r\n\r\n     params :\r\n     @callback (function) : a function to execute\r\n\r\n     returns :\r\n     @this: our plane to handle chaining\r\n     ***/\r\n    onLeaveView(callback) {\r\n        if(callback) {\r\n            this._onLeaveViewCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n}","import React from 'react'\r\nimport { Curtains } from \"curtainsjs\"\r\n\r\nconst initialValues = {\r\n    opacity: 0,\r\n    parallaxPos: { x: 0, y: -20 },\r\n    scale: 0.8,\r\n    rotationPosition: 0,\r\n    curtains:new Curtains({\r\n        pixelRatio:Math.min(1.5,window.devicePixelRatio)\r\n    }),\r\n    container:null,\r\n    scrollEffect:0,\r\n  \r\n}\r\n\r\nconst Context = React.createContext({\r\n    state: initialValues,\r\n    dispath: () => { }\r\n})\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case \"SET_CURTAINS_CONTAINER\":\r\n\r\n            return { ...state, container: action.payload }\r\n            break;\r\n\r\n        case \"SET_SCROLL_EFFECT\":\r\n\r\n            return { ...state, scrollEffect: action.payload }\r\n            break;\r\n\r\n        case \"CHANGE/OPACITY\":\r\n\r\n            return { ...state, opacity: action.payload }\r\n            break;\r\n        case \"MOUSE/COORDINATES\":\r\n            console.log(\"MOUSE/COORDINATES\");\r\n            return { ...state, parallaxPos: action.payload }\r\n            break;\r\n\r\n        case \"CHANGE/ROTATION\":\r\n\r\n            return { ...state, rotationPosition: action.payload }\r\n            break;\r\n\r\n        case \"CHANGE/SCALE\":\r\n\r\n            return { ...state, scale: action.payload }\r\n            break;\r\n\r\n        default:\r\n            throw new Error(\"Message\")\r\n\r\n    }\r\n}\r\n\r\n\r\nconst parallax = (event) => {\r\n    const speed = 5\r\n    const x = (window.innerWidth - event.pageX * speed) / 100\r\n    const y = (window.innerHeight - event.pageY * speed) / 100\r\n    // dispatch({ type: \"MOUSE/COORDINATES\", payload: { x, y } })\r\n}\r\n\r\nconst AppContext = ({ children }) => {\r\n\r\n    const [state, dispatch] = React.useReducer(reducer, initialValues)\r\n\r\n    const contextValue = React.useMemo(\r\n        () => ({\r\n            state,\r\n            dispatch,\r\n        }),\r\n        [state, dispatch])\r\n\r\n\r\n    return (\r\n        <Context.Provider value={contextValue}>\r\n            {children}\r\n        </Context.Provider>\r\n    )\r\n}\r\n\r\nAppContext.propTypes = {}\r\n\r\nexport const useAppContext = () => React.useContext(Context)\r\nexport default AppContext","import {Renderer} from \"./Renderer.js\";\r\nimport {ScrollManager} from \"../utils/ScrollManager.js\";\r\nimport {throwWarning, lerp} from \"../utils/utils.js\";\r\n\r\n\r\nconst version = \"8.1.5\";\r\n\r\n/***\r\n Here we create our Curtains object\r\n\r\n\r\n params:\r\n @container (HTML element or string, optional): the container HTML element or ID that will hold our canvas. Could be set later if not passed as parameter here\r\n\r\n (WebGL context parameters)\r\n @alpha (bool, optional): whether the WebGL context should handle transparency. Default to true.\r\n @premultipliedAlpha (bool, optional): whether the WebGL context should handle premultiplied alpha. Default to false.\r\n @antialias (bool, optional): whether the WebGL context should use the default antialiasing. When using render targets, WebGL disables antialiasing, so you can safely set this to false to improve the performance. Default to true.\r\n @depth (bool, optional): whether the WebGL context should handle depth. Default to true.\r\n @failIfMajorPerformanceCaveat (bool, optional): whether the WebGL context creation should fail in case of major performance caveat. Default to true.\r\n @preserveDrawingBuffer (bool, optional): whether the WebGL context should preserve the drawing buffer. Default to false.\r\n @stencil (bool, optional): whether the WebGL context should handle stencil. Default to false.\r\n\r\n @autoResize (bool, optional): Whether the library should listen to the window resize event and actually resize the scene. Set it to false if you want to handle this by yourself using the resize() method. Default to true.\r\n @autoRender (bool, optional): Whether the library should create a request animation frame loop to render the scene. Set it to false if you want to handle this by yourself using the render() method. Default to true.\r\n @watchScroll (bool, optional): Whether the library should listen to the window scroll event. Set it to false if you want to handle this by yourself. Default to true.\r\n\r\n @pixelRatio (float, optional): Defines the pixel ratio value. Use it to limit it on init to increase performance. Default to window.devicePixelRatio.\r\n @renderingScale (float, optional): Use it to downscale your rendering canvas. May improve performance but will decrease quality. Default to 1 (minimum: 0.25, maximum: 1).\r\n\r\n @production (bool, optional): Whether the library should throw useful console warnings and errors and check shaders and programs compilation status. Default to false.\r\n\r\n returns :\r\n @this: our Renderer\r\n ***/\r\nexport class Curtains {\r\n    constructor({\r\n        // renderer container\r\n        container,\r\n\r\n        // webgl params\r\n        alpha = true,\r\n        premultipliedAlpha = false,\r\n        antialias = true,\r\n        depth = true,\r\n        failIfMajorPerformanceCaveat = true,\r\n        preserveDrawingBuffer = false,\r\n        stencil = false,\r\n\r\n        autoResize = true,\r\n        autoRender = true,\r\n        watchScroll = true,\r\n\r\n        pixelRatio = window.devicePixelRatio || 1,\r\n        renderingScale = 1,\r\n\r\n        production = false,\r\n    } = {}) {\r\n        this.type = \"Curtains\";\r\n\r\n        // if we should use auto resize (default to true)\r\n        this._autoResize = autoResize;\r\n        // if we should use auto render (default to true)\r\n        this._autoRender = autoRender;\r\n        // if we should watch the scroll (default to true)\r\n        this._watchScroll = watchScroll;\r\n\r\n        // pixel ratio and rendering scale\r\n        this.pixelRatio = pixelRatio;\r\n        // rendering scale\r\n        renderingScale = isNaN(renderingScale) ? 1 : parseFloat(renderingScale);\r\n        this._renderingScale = Math.max(0.25, Math.min(1, renderingScale));\r\n\r\n        // webgl context parameters\r\n        this.premultipliedAlpha = premultipliedAlpha;\r\n        this.alpha = alpha;\r\n        this.antialias = antialias;\r\n        this.depth = depth;\r\n        this.failIfMajorPerformanceCaveat = failIfMajorPerformanceCaveat;\r\n        this.preserveDrawingBuffer = preserveDrawingBuffer;\r\n        this.stencil = stencil;\r\n\r\n        this.production = production;\r\n\r\n        this.errors = false;\r\n\r\n        // if a container has been provided, proceed to init\r\n        if(container) {\r\n            this.setContainer(container);\r\n        }\r\n        else if(!this.production) {\r\n            throwWarning(this.type + \": no container provided in the initial parameters. Use setContainer() method to set one later and initialize the WebGL context\")\r\n        }\r\n    }\r\n\r\n    /***\r\n     Set up our Curtains container and start initializing everything\r\n     Called on Curtains instancing if a params container has been provided, could be call afterwards else\r\n     Useful with JS frameworks to init our Curtains class globally and then set the container in a canvas component afterwards to fully instantiate everything\r\n\r\n     params:\r\n     @container (HTML element or string): the container HTML element or ID that will hold our canvas\r\n     ***/\r\n    setContainer(container) {\r\n        if(!container) {\r\n            let container = document.createElement(\"div\");\r\n            container.setAttribute(\"id\", \"curtains-canvas\");\r\n            document.body.appendChild(container);\r\n            this.container = container;\r\n            if(!this.production) throwWarning('Curtains: no valid container HTML element or ID provided, created a div with \"curtains-canvas\" ID instead');\r\n        }\r\n        else {\r\n            if(typeof container === \"string\") {\r\n                container = document.getElementById(container);\r\n\r\n                if(!container) {\r\n                    let container = document.createElement(\"div\");\r\n                    container.setAttribute(\"id\", \"curtains-canvas\");\r\n                    document.body.appendChild(container);\r\n                    this.container = container;\r\n                    if(!this.production) throwWarning('Curtains: no valid container HTML element or ID provided, created a div with \"curtains-canvas\" ID instead');\r\n                }\r\n                else {\r\n                    this.container = container;\r\n                }\r\n            }\r\n            else if(container instanceof Element) {\r\n                this.container = container;\r\n            }\r\n        }\r\n\r\n        this._initCurtains();\r\n    }\r\n\r\n\r\n    /***\r\n     Initialize everything that the class will need: WebGL renderer, scroll manager, sizes, listeners\r\n     Then starts our animation frame loop if needed\r\n     ***/\r\n    _initCurtains() {\r\n        this.planes = [];\r\n        this.renderTargets = [];\r\n        this.shaderPasses = [];\r\n\r\n        // init webgl context\r\n        this._initRenderer();\r\n\r\n        if(!this.gl) return;\r\n\r\n        // scroll\r\n        this._initScroll();\r\n\r\n        // sizes\r\n        this._setSize();\r\n\r\n        // event listeners\r\n        this._addListeners();\r\n\r\n        // we are ready to go\r\n        this.container.appendChild(this.canvas);\r\n\r\n        // watermark\r\n        console.log(\"curtains.js - v\" + version);\r\n\r\n        // start rendering\r\n        this._animationFrameID = null;\r\n        if(this._autoRender) {\r\n            this._animate();\r\n        }\r\n    }\r\n\r\n\r\n    /*** WEBGL CONTEXT ***/\r\n\r\n    /***\r\n     Initialize the Renderer class object\r\n     ***/\r\n    _initRenderer() {\r\n        this.renderer = new Renderer({\r\n            alpha: this.alpha,\r\n            antialias: this.antialias,\r\n            premultipliedAlpha: this.premultipliedAlpha,\r\n            depth: this.depth,\r\n            failIfMajorPerformanceCaveat: this.failIfMajorPerformanceCaveat,\r\n            preserveDrawingBuffer: this.preserveDrawingBuffer,\r\n            stencil: this.stencil,\r\n\r\n            container: this.container,\r\n            pixelRatio: this.pixelRatio,\r\n            renderingScale: this._renderingScale,\r\n\r\n            production: this.production,\r\n\r\n            onError: () => this._onRendererError(),\r\n            onSuccess: () => this._onRendererSuccess(),\r\n            onContextLost: () => this._onRendererContextLost(),\r\n            onContextRestored: () => this._onRendererContextRestored(),\r\n            onDisposed: () => this._onRendererDisposed(),\r\n            // keep sync between renderer planes, shader passes and render targets arrays and the Curtains ones\r\n            onSceneChange: () => this._keepSync(),\r\n        });\r\n\r\n        this.gl = this.renderer.gl;\r\n        this.canvas = this.renderer.canvas;\r\n    }\r\n\r\n\r\n    /***\r\n     Force our renderer to restore the WebGL context\r\n     ***/\r\n    restoreContext() {\r\n        this.renderer.restoreContext();\r\n    }\r\n\r\n\r\n    /***\r\n     This just handles our drawing animation frame\r\n     ***/\r\n    _animate() {\r\n        this.render();\r\n        this._animationFrameID = window.requestAnimationFrame(this._animate.bind(this));\r\n    }\r\n\r\n\r\n    /*** RENDERING ***/\r\n\r\n    /***\r\n     Enables rendering\r\n     ***/\r\n    enableDrawing() {\r\n        this.renderer.enableDrawing();\r\n    }\r\n\r\n    /***\r\n     Disables rendering\r\n     ***/\r\n    disableDrawing() {\r\n        this.renderer.disableDrawing();\r\n    }\r\n\r\n    /***\r\n     Forces the rendering of the next frame, even if disabled\r\n     ***/\r\n    needRender() {\r\n        this.renderer.needRender();\r\n    }\r\n\r\n    /***\r\n     Executes a callback on next frame\r\n\r\n     params:\r\n     @callback (function): callback to execute on next frame\r\n     @keep (bool): whether to keep calling that callback on each rendering call or not (act as a setInterval). Default to false\r\n\r\n     returns:\r\n     @queueItem: the queue item. Allows to keep a track of it and set its keep property to false when needed\r\n     ***/\r\n    nextRender(callback, keep = false) {\r\n        return this.renderer.nextRender.add(callback, keep);\r\n    }\r\n\r\n    /***\r\n     Clear our WebGL renderer colors and depth buffers\r\n     ***/\r\n    clear() {\r\n        this.renderer && this.renderer.clear();\r\n    }\r\n\r\n    /***\r\n     Clear our WebGL renderer depth buffer\r\n     ***/\r\n    clearDepth() {\r\n        this.renderer && this.renderer.clearDepth();\r\n    }\r\n\r\n    /***\r\n     Clear our WebGL renderer color buffer\r\n     ***/\r\n    clearColor() {\r\n        this.renderer && this.renderer.clearColor();\r\n    }\r\n\r\n\r\n    /***\r\n     Check whether the created context is WebGL2\r\n\r\n     return:\r\n     @isWebGL2 (bool): whether the created WebGL context is 2.0 or not\r\n     ***/\r\n    isWebGL2() {\r\n        return this.gl ? this.renderer._isWebGL2 : false;\r\n    }\r\n\r\n\r\n    /***\r\n     Tells our renderer to render the scene if the drawing is enabled\r\n     ***/\r\n    render() {\r\n        // always execute callback queue\r\n        this.renderer.nextRender.execute();\r\n\r\n        // If forceRender is true, force rendering this frame even if drawing is not enabled.\r\n        // If not, only render if enabled.\r\n        if(!this.renderer.state.drawingEnabled && !this.renderer.state.forceRender) {\r\n            return;\r\n        }\r\n\r\n        // reset forceRender\r\n        if(this.renderer.state.forceRender) {\r\n            this.renderer.state.forceRender = false;\r\n        }\r\n\r\n        // Curtains onRender callback\r\n        if(this._onRenderCallback) {\r\n            this._onRenderCallback();\r\n        }\r\n\r\n        this.renderer.render();\r\n    }\r\n\r\n\r\n    /*** LISTENERS ***/\r\n\r\n    /***\r\n     Adds our resize event listener if needed\r\n     ***/\r\n    _addListeners() {\r\n        // handling window resize event\r\n        this._resizeHandler = null;\r\n        if(this._autoResize) {\r\n            this._resizeHandler = this.resize.bind(this, true);\r\n            window.addEventListener(\"resize\", this._resizeHandler, false);\r\n        }\r\n    }\r\n\r\n\r\n    /*** SIZING ***/\r\n\r\n    /***\r\n     Set the pixel ratio property and update everything by calling the resize() method\r\n     ***/\r\n    setPixelRatio(pixelRatio, triggerCallback) {\r\n        this.pixelRatio = parseFloat(Math.max(pixelRatio, 1)) || 1;\r\n        this.renderer.setPixelRatio(pixelRatio);\r\n        // apply new pixel ratio to all our elements but don't trigger onAfterResize callback\r\n        this.resize(triggerCallback);\r\n    }\r\n\r\n\r\n    /***\r\n     Set our renderer container and canvas sizes and update the scroll values\r\n     ***/\r\n    _setSize() {\r\n        this.renderer.setSize();\r\n\r\n        // update scroll values ass well\r\n        if(this._scrollManager.shouldWatch) {\r\n            this._scrollManager.xOffset = window.pageXOffset;\r\n            this._scrollManager.yOffset = window.pageYOffset;\r\n        }\r\n    }\r\n\r\n    /***\r\n     Useful to get our container bounding rectangle without triggering a reflow/layout\r\n\r\n     returns :\r\n     @boundingRectangle (object): an object containing our container bounding rectangle (width, height, top and left properties)\r\n     ***/\r\n    getBoundingRect() {\r\n        return this.renderer._boundingRect;\r\n    }\r\n\r\n\r\n    /***\r\n     Resize our container and the renderer\r\n\r\n     params:\r\n     @triggerCallback (bool): Whether we should trigger onAfterResize callback\r\n     ***/\r\n    resize(triggerCallback) {\r\n        if(!this.gl) return;\r\n\r\n        this._setSize();\r\n\r\n        this.renderer.resize();\r\n\r\n        this.nextRender(() => {\r\n            if(this._onAfterResizeCallback && triggerCallback) {\r\n                this._onAfterResizeCallback();\r\n            }\r\n        });\r\n    }\r\n\r\n    /*** SCROLL ***/\r\n\r\n    /***\r\n     Init our ScrollManager class object\r\n     ***/\r\n    _initScroll() {\r\n        this._scrollManager = new ScrollManager({\r\n            // init values\r\n            xOffset: window.pageXOffset,\r\n            yOffset: window.pageYOffset,\r\n            lastXDelta: 0,\r\n            lastYDelta: 0,\r\n            shouldWatch: this._watchScroll,\r\n\r\n            onScroll: (lastXDelta, lastYDelta) => this._updateScroll(lastXDelta, lastYDelta),\r\n        });\r\n    }\r\n\r\n    /***\r\n     Handles the different values associated with a scroll event (scroll and delta values)\r\n     If no plane watch the scroll then those values won't be retrieved to avoid unnecessary reflow calls\r\n     If at least a plane is watching, update all watching planes positions based on the scroll values\r\n     And force render for at least one frame to actually update the scene\r\n     ***/\r\n    _updateScroll(lastXDelta, lastYDelta) {\r\n        for(let i = 0; i < this.planes.length; i++) {\r\n            // if our plane is watching the scroll, update its position\r\n            if(this.planes[i].watchScroll) {\r\n                this.planes[i].updateScrollPosition(lastXDelta, lastYDelta);\r\n            }\r\n        }\r\n\r\n        // be sure we'll update the scene even if drawing is disabled\r\n        this.renderer.needRender();\r\n\r\n        this._onScrollCallback && this._onScrollCallback();\r\n    }\r\n\r\n\r\n    /***\r\n     Updates the scroll manager X and Y scroll values as well as last X and Y deltas\r\n     Internally called by the scroll handler if at least one plane is watching the scroll\r\n     Could be called externally as well if the user wants to handle the scroll by himself\r\n\r\n     params:\r\n     @x (float): scroll value along X axis\r\n     @y (float): scroll value along Y axis\r\n     ***/\r\n    updateScrollValues(x, y) {\r\n        this._scrollManager.updateScrollValues(x, y);\r\n    }\r\n\r\n\r\n    /***\r\n     Returns last delta scroll values\r\n\r\n     returns:\r\n     @delta (object): an object containing X and Y last delta values\r\n     ***/\r\n    getScrollDeltas() {\r\n        return {\r\n            x: this._scrollManager.lastXDelta,\r\n            y: this._scrollManager.lastYDelta,\r\n        };\r\n    }\r\n\r\n\r\n    /***\r\n     Returns last window scroll values\r\n\r\n     returns:\r\n     @scrollValues (object): an object containing X and Y last scroll values\r\n     ***/\r\n    getScrollValues() {\r\n        return {\r\n            x: this._scrollManager.xOffset,\r\n            y: this._scrollManager.yOffset,\r\n        };\r\n    }\r\n\r\n    /*** ADDING / REMOVING OBJECTS TO THE RENDERER ***/\r\n\r\n    /***\r\n     Always keep sync between renderer and Curtains scene objects when adding/removing objects\r\n     ***/\r\n    _keepSync() {\r\n        this.planes = this.renderer.planes;\r\n        this.shaderPasses = this.renderer.shaderPasses;\r\n        this.renderTargets = this.renderer.renderTargets;\r\n    }\r\n\r\n\r\n    /*** UTILS ***/\r\n\r\n    /***\r\n     Linear interpolation helper defined in utils\r\n     ***/\r\n    lerp(start, end, amount) {\r\n        return lerp(start, end, amount);\r\n    }\r\n\r\n\r\n    /*** EVENTS ***/\r\n\r\n    /***\r\n     This is called each time our container has been resized\r\n\r\n     params :\r\n     @callback (function) : a function to execute\r\n\r\n     returns :\r\n     @this: our Curtains element to handle chaining\r\n     ***/\r\n    onAfterResize(callback) {\r\n        if(callback) {\r\n            this._onAfterResizeCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /***\r\n     This is called when an error has been detected\r\n\r\n     params:\r\n     @callback (function): a function to execute\r\n\r\n     returns:\r\n     @this: our Curtains element to handle chaining\r\n     ***/\r\n    onError(callback) {\r\n        if(callback) {\r\n            this._onErrorCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /***\r\n     This triggers the onError callback and is called by the renderer when an error has been detected\r\n     ***/\r\n    _onRendererError() {\r\n        // be sure that the callback has been registered and only call the global error callback once\r\n        setTimeout(() => {\r\n            if(this._onErrorCallback && !this.errors) {\r\n                this._onErrorCallback();\r\n            }\r\n            this.errors = true;\r\n        }, 0);\r\n    }\r\n\r\n\r\n    /***\r\n     This is called when the WebGL context has been successfully created\r\n\r\n     params:\r\n     @callback (function): a function to execute\r\n\r\n     returns:\r\n     @this: our Curtains element to handle chaining\r\n     ***/\r\n    onSuccess(callback) {\r\n        if(callback) {\r\n            this._onSuccessCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /***\r\n     This triggers the onSuccess callback and is called by the renderer when the context has been successfully created\r\n     ***/\r\n    _onRendererSuccess() {\r\n        setTimeout(() => {\r\n            this._onSuccessCallback && this._onSuccessCallback();\r\n        }, 0);\r\n    }\r\n\r\n\r\n    /***\r\n     This is called once our context has been lost\r\n\r\n     params:\r\n     @callback (function): a function to execute\r\n\r\n     returns:\r\n     @this: our Curtains element to handle chaining\r\n     ***/\r\n    onContextLost(callback) {\r\n        if(callback) {\r\n            this._onContextLostCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /***\r\n     This triggers the onContextLost callback and is called by the renderer when the context has been lost\r\n     ***/\r\n    _onRendererContextLost() {\r\n        this._onContextLostCallback && this._onContextLostCallback();\r\n    }\r\n\r\n\r\n    /***\r\n     This is called once our context has been restored\r\n\r\n     params:\r\n     @callback (function): a function to execute\r\n\r\n     returns:\r\n     @this: our Curtains element to handle chaining\r\n     ***/\r\n    onContextRestored(callback) {\r\n        if(callback) {\r\n            this._onContextRestoredCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /***\r\n     This triggers the onContextRestored callback and is called by the renderer when the context has been restored\r\n     ***/\r\n    _onRendererContextRestored() {\r\n        this._onContextRestoredCallback && this._onContextRestoredCallback();\r\n    }\r\n\r\n\r\n    /***\r\n     This is called once at each request animation frame call\r\n\r\n     params:\r\n     @callback (function): a function to execute\r\n\r\n     returns:\r\n     @this: our Curtains element to handle chaining\r\n     ***/\r\n    onRender(callback) {\r\n        if(callback) {\r\n            this._onRenderCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /***\r\n     This is called each time window is scrolled and if our scrollManager is active\r\n\r\n     params :\r\n     @callback (function) : a function to execute\r\n\r\n     returns :\r\n     @this: our Curtains element to handle chaining\r\n     ***/\r\n    onScroll(callback) {\r\n        if(callback) {\r\n            this._onScrollCallback = callback;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /*** DESTROYING ***/\r\n\r\n    /***\r\n     Dispose everything\r\n     ***/\r\n    dispose() {\r\n        this.renderer.dispose();\r\n    }\r\n\r\n\r\n    /***\r\n     This is called when the renderer has finished disposing all the WebGL stuff\r\n     ***/\r\n    _onRendererDisposed() {\r\n        // cancel animation frame\r\n        this._animationFrameID && window.cancelAnimationFrame(this._animationFrameID);\r\n\r\n        // remove event listeners\r\n        this._resizeHandler && window.removeEventListener(\"resize\", this._resizeHandler, false);\r\n        this._scrollManager && this._scrollManager.dispose();\r\n    }\r\n\r\n}","import React, { useRef, useLayoutEffect } from 'react'\r\nimport Menu from '../menu/menu'\r\nimport { gsap } from 'gsap'\r\nimport \"./layout.scss\"\r\nimport Canvas from '../Canvas/Canvas'\r\n\r\nfunction Layout({ children,nameTransparent = false }) {\r\n\r\n\r\n  const app = React.useRef()\r\n  const animeTimeLine = useRef()\r\n\r\n  useLayoutEffect(() => {\r\n\r\n\r\n    const ctx = gsap.context(() => {\r\n      animeTimeLine.current = gsap.timeline()\r\n        .to(\".header-btn-border\", {\r\n          duration: 2,\r\n          clipPath: \"polygon(0% 0%,100% 0%,100% 100%,0% 100%)\",\r\n          ease: \"power2.easeIn\"\r\n\r\n        }).to(\".hidden-layer\", {\r\n          height: \"260px\",\r\n          ease: \"power2.easeIn\"\r\n        }, \"-=1.6\")\r\n    }, app)\r\n\r\n\r\n    return () => {\r\n      ctx.revert()\r\n    };\r\n  }, [app])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const scrollContainer = React.useRef(<div></div>)\r\n\r\n  const skewConfigs = {\r\n    ease: 0.05,\r\n    rounded: 0,\r\n    current: 0,\r\n    previous: 0,\r\n  }\r\n\r\n\r\n\r\n\r\n  React.useEffect(() => {\r\n    document.body.style.height = `${scrollContainer.current.getBoundingClientRect().height}px`\r\n  }, [])\r\n\r\n  React.useEffect(() => {\r\n    requestAnimationFrame(() => skewScrolling())\r\n  }, [])\r\n\r\n\r\n  const skewScrolling = () => {\r\n    scrollContainer.current = document.querySelector('.scroll-container')\r\n\r\n\r\n    skewConfigs.current = window.scrollY\r\n    skewConfigs.previous += (skewConfigs.current - skewConfigs.previous) * skewConfigs.ease\r\n    skewConfigs.rounded = Math.round(skewConfigs.previous * 100) / 100\r\n    const difference = skewConfigs.current - skewConfigs.rounded\r\n    const acceleration = difference / window.screen.width\r\n    const velocity = +acceleration\r\n    const skew = velocity * 7.5\r\n\r\n    scrollContainer.current.style.transform = `matrix3d(1, 0, 0, 0, 0, 1, 0, ${skew * -.000008}, 0, 0, 1, 0, 0, 0, 0, 1) translate3d(0,-${skewConfigs.rounded}px,0) skewX(${skew / 4}deg) skewY(${skew * 2}deg)`\r\n\r\n\r\n\r\n\r\n    requestAnimationFrame(() => skewScrolling())\r\n  }\r\n\r\n\r\n  return (\r\n    \r\n      <div className='layout-container'>\r\n        \r\n        <Menu nameTransparent={nameTransparent}/>\r\n        <main>\r\n          <main ref={app} className=\"container\">\r\n            <div ref={scrollContainer} style={{minWidth:\"100vw\",maxWidth:\"100vw\"}} className=\"scroll-container\">\r\n              {children}\r\n            </div>\r\n          </main>\r\n        </main>\r\n      </div>\r\n\r\n   \r\n\r\n  )\r\n}\r\n\r\nexport default Layout","/*!\n * CSSPlugin 3.12.2\n * https://greensock.com\n *\n * Copyright 2008-2023, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nimport { gsap, _getProperty, _numExp, _numWithUnitExp, getUnit, _isString, _isUndefined, _renderComplexString, _relExp, _forEachName, _sortPropTweensByPriority, _colorStringFilter, _checkPlugin, _replaceRandom, _plugins, GSCache, PropTween, _config, _ticker, _round, _missingPlugin, _getSetter, _getCache, _colorExp, _parseRelative, _setDefaults, _removeLinkedListItem //for the commented-out className feature.\n} from \"./gsap-core.js\";\n\nvar _win,\n    _doc,\n    _docElement,\n    _pluginInitted,\n    _tempDiv,\n    _tempDivStyler,\n    _recentSetterPlugin,\n    _reverting,\n    _windowExists = function _windowExists() {\n  return typeof window !== \"undefined\";\n},\n    _transformProps = {},\n    _RAD2DEG = 180 / Math.PI,\n    _DEG2RAD = Math.PI / 180,\n    _atan2 = Math.atan2,\n    _bigNum = 1e8,\n    _capsExp = /([A-Z])/g,\n    _horizontalExp = /(left|right|width|margin|padding|x)/i,\n    _complexExp = /[\\s,\\(]\\S/,\n    _propertyAliases = {\n  autoAlpha: \"opacity,visibility\",\n  scale: \"scaleX,scaleY\",\n  alpha: \"opacity\"\n},\n    _renderCSSProp = function _renderCSSProp(ratio, data) {\n  return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\n},\n    _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {\n  return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\n},\n    _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {\n  return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);\n},\n    //if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)\n_renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {\n  var value = data.s + data.c * ratio;\n  data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);\n},\n    _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {\n  return data.set(data.t, data.p, ratio ? data.e : data.b, data);\n},\n    _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {\n  return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);\n},\n    _setterCSSStyle = function _setterCSSStyle(target, property, value) {\n  return target.style[property] = value;\n},\n    _setterCSSProp = function _setterCSSProp(target, property, value) {\n  return target.style.setProperty(property, value);\n},\n    _setterTransform = function _setterTransform(target, property, value) {\n  return target._gsap[property] = value;\n},\n    _setterScale = function _setterScale(target, property, value) {\n  return target._gsap.scaleX = target._gsap.scaleY = value;\n},\n    _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {\n  var cache = target._gsap;\n  cache.scaleX = cache.scaleY = value;\n  cache.renderTransform(ratio, cache);\n},\n    _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {\n  var cache = target._gsap;\n  cache[property] = value;\n  cache.renderTransform(ratio, cache);\n},\n    _transformProp = \"transform\",\n    _transformOriginProp = _transformProp + \"Origin\",\n    _saveStyle = function _saveStyle(property, isNotCSS) {\n  var _this = this;\n\n  var target = this.target,\n      style = target.style;\n\n  if (property in _transformProps && style) {\n    this.tfm = this.tfm || {};\n\n    if (property !== \"transform\") {\n      property = _propertyAliases[property] || property;\n      ~property.indexOf(\",\") ? property.split(\",\").forEach(function (a) {\n        return _this.tfm[a] = _get(target, a);\n      }) : this.tfm[property] = target._gsap.x ? target._gsap[property] : _get(target, property); // note: scale would map to \"scaleX,scaleY\", thus we loop and apply them both.\n    } else {\n      return _propertyAliases.transform.split(\",\").forEach(function (p) {\n        return _saveStyle.call(_this, p, isNotCSS);\n      });\n    }\n\n    if (this.props.indexOf(_transformProp) >= 0) {\n      return;\n    }\n\n    if (target._gsap.svg) {\n      this.svgo = target.getAttribute(\"data-svg-origin\");\n      this.props.push(_transformOriginProp, isNotCSS, \"\");\n    }\n\n    property = _transformProp;\n  }\n\n  (style || isNotCSS) && this.props.push(property, isNotCSS, style[property]);\n},\n    _removeIndependentTransforms = function _removeIndependentTransforms(style) {\n  if (style.translate) {\n    style.removeProperty(\"translate\");\n    style.removeProperty(\"scale\");\n    style.removeProperty(\"rotate\");\n  }\n},\n    _revertStyle = function _revertStyle() {\n  var props = this.props,\n      target = this.target,\n      style = target.style,\n      cache = target._gsap,\n      i,\n      p;\n\n  for (i = 0; i < props.length; i += 3) {\n    // stored like this: property, isNotCSS, value\n    props[i + 1] ? target[props[i]] = props[i + 2] : props[i + 2] ? style[props[i]] = props[i + 2] : style.removeProperty(props[i].substr(0, 2) === \"--\" ? props[i] : props[i].replace(_capsExp, \"-$1\").toLowerCase());\n  }\n\n  if (this.tfm) {\n    for (p in this.tfm) {\n      cache[p] = this.tfm[p];\n    }\n\n    if (cache.svg) {\n      cache.renderTransform();\n      target.setAttribute(\"data-svg-origin\", this.svgo || \"\");\n    }\n\n    i = _reverting();\n\n    if ((!i || !i.isStart) && !style[_transformProp]) {\n      _removeIndependentTransforms(style);\n\n      cache.uncache = 1; // if it's a startAt that's being reverted in the _initTween() of the core, we don't need to uncache transforms. This is purely a performance optimization.\n    }\n  }\n},\n    _getStyleSaver = function _getStyleSaver(target, properties) {\n  var saver = {\n    target: target,\n    props: [],\n    revert: _revertStyle,\n    save: _saveStyle\n  };\n  target._gsap || gsap.core.getCache(target); // just make sure there's a _gsap cache defined because we read from it in _saveStyle() and it's more efficient to just check it here once.\n\n  properties && properties.split(\",\").forEach(function (p) {\n    return saver.save(p);\n  });\n  return saver;\n},\n    _supports3D,\n    _createElement = function _createElement(type, ns) {\n  var e = _doc.createElementNS ? _doc.createElementNS((ns || \"http://www.w3.org/1999/xhtml\").replace(/^https/, \"http\"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making \"style\" inaccessible.\n\n  return e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://greensock.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).\n},\n    _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {\n  var cs = getComputedStyle(target);\n  return cs[property] || cs.getPropertyValue(property.replace(_capsExp, \"-$1\").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || \"\"; //css variables may not need caps swapped out for dashes and lowercase.\n},\n    _prefixes = \"O,Moz,ms,Ms,Webkit\".split(\",\"),\n    _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {\n  var e = element || _tempDiv,\n      s = e.style,\n      i = 5;\n\n  if (property in s && !preferPrefix) {\n    return property;\n  }\n\n  property = property.charAt(0).toUpperCase() + property.substr(1);\n\n  while (i-- && !(_prefixes[i] + property in s)) {}\n\n  return i < 0 ? null : (i === 3 ? \"ms\" : i >= 0 ? _prefixes[i] : \"\") + property;\n},\n    _initCore = function _initCore() {\n  if (_windowExists() && window.document) {\n    _win = window;\n    _doc = _win.document;\n    _docElement = _doc.documentElement;\n    _tempDiv = _createElement(\"div\") || {\n      style: {}\n    };\n    _tempDivStyler = _createElement(\"div\");\n    _transformProp = _checkPropPrefix(_transformProp);\n    _transformOriginProp = _transformProp + \"Origin\";\n    _tempDiv.style.cssText = \"border-width:0;line-height:0;position:absolute;padding:0\"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.\n\n    _supports3D = !!_checkPropPrefix(\"perspective\");\n    _reverting = gsap.core.reverting;\n    _pluginInitted = 1;\n  }\n},\n    _getBBoxHack = function _getBBoxHack(swapIfPossible) {\n  //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).\n  var svg = _createElement(\"svg\", this.ownerSVGElement && this.ownerSVGElement.getAttribute(\"xmlns\") || \"http://www.w3.org/2000/svg\"),\n      oldParent = this.parentNode,\n      oldSibling = this.nextSibling,\n      oldCSS = this.style.cssText,\n      bbox;\n\n  _docElement.appendChild(svg);\n\n  svg.appendChild(this);\n  this.style.display = \"block\";\n\n  if (swapIfPossible) {\n    try {\n      bbox = this.getBBox();\n      this._gsapBBox = this.getBBox; //store the original\n\n      this.getBBox = _getBBoxHack;\n    } catch (e) {}\n  } else if (this._gsapBBox) {\n    bbox = this._gsapBBox();\n  }\n\n  if (oldParent) {\n    if (oldSibling) {\n      oldParent.insertBefore(this, oldSibling);\n    } else {\n      oldParent.appendChild(this);\n    }\n  }\n\n  _docElement.removeChild(svg);\n\n  this.style.cssText = oldCSS;\n  return bbox;\n},\n    _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {\n  var i = attributesArray.length;\n\n  while (i--) {\n    if (target.hasAttribute(attributesArray[i])) {\n      return target.getAttribute(attributesArray[i]);\n    }\n  }\n},\n    _getBBox = function _getBBox(target) {\n  var bounds;\n\n  try {\n    bounds = target.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118\n  } catch (error) {\n    bounds = _getBBoxHack.call(target, true);\n  }\n\n  bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true)); //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.\n\n  return bounds && !bounds.width && !bounds.x && !bounds.y ? {\n    x: +_getAttributeFallbacks(target, [\"x\", \"cx\", \"x1\"]) || 0,\n    y: +_getAttributeFallbacks(target, [\"y\", \"cy\", \"y1\"]) || 0,\n    width: 0,\n    height: 0\n  } : bounds;\n},\n    _isSVG = function _isSVG(e) {\n  return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));\n},\n    //reports if the element is an SVG on which getBBox() actually works\n_removeProperty = function _removeProperty(target, property) {\n  if (property) {\n    var style = target.style;\n\n    if (property in _transformProps && property !== _transformOriginProp) {\n      property = _transformProp;\n    }\n\n    if (style.removeProperty) {\n      if (property.substr(0, 2) === \"ms\" || property.substr(0, 6) === \"webkit\") {\n        //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be \"ms-transform\" instead of \"-ms-transform\" for IE9, for example)\n        property = \"-\" + property;\n      }\n\n      style.removeProperty(property.replace(_capsExp, \"-$1\").toLowerCase());\n    } else {\n      //note: old versions of IE use \"removeAttribute()\" instead of \"removeProperty()\"\n      style.removeAttribute(property);\n    }\n  }\n},\n    _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {\n  var pt = new PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);\n  plugin._pt = pt;\n  pt.b = beginning;\n  pt.e = end;\n\n  plugin._props.push(property);\n\n  return pt;\n},\n    _nonConvertibleUnits = {\n  deg: 1,\n  rad: 1,\n  turn: 1\n},\n    _nonStandardLayouts = {\n  grid: 1,\n  flex: 1\n},\n    //takes a single value like 20px and converts it to the unit specified, like \"%\", returning only the numeric amount.\n_convertToUnit = function _convertToUnit(target, property, value, unit) {\n  var curValue = parseFloat(value) || 0,\n      curUnit = (value + \"\").trim().substr((curValue + \"\").length) || \"px\",\n      // some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()\n  style = _tempDiv.style,\n      horizontal = _horizontalExp.test(property),\n      isRootSVG = target.tagName.toLowerCase() === \"svg\",\n      measureProperty = (isRootSVG ? \"client\" : \"offset\") + (horizontal ? \"Width\" : \"Height\"),\n      amount = 100,\n      toPixels = unit === \"px\",\n      toPercent = unit === \"%\",\n      px,\n      parent,\n      cache,\n      isSVG;\n\n  if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {\n    return curValue;\n  }\n\n  curUnit !== \"px\" && !toPixels && (curValue = _convertToUnit(target, property, value, \"px\"));\n  isSVG = target.getCTM && _isSVG(target);\n\n  if ((toPercent || curUnit === \"%\") && (_transformProps[property] || ~property.indexOf(\"adius\"))) {\n    px = isSVG ? target.getBBox()[horizontal ? \"width\" : \"height\"] : target[measureProperty];\n    return _round(toPercent ? curValue / px * amount : curValue / 100 * px);\n  }\n\n  style[horizontal ? \"width\" : \"height\"] = amount + (toPixels ? curUnit : unit);\n  parent = ~property.indexOf(\"adius\") || unit === \"em\" && target.appendChild && !isRootSVG ? target : target.parentNode;\n\n  if (isSVG) {\n    parent = (target.ownerSVGElement || {}).parentNode;\n  }\n\n  if (!parent || parent === _doc || !parent.appendChild) {\n    parent = _doc.body;\n  }\n\n  cache = parent._gsap;\n\n  if (cache && toPercent && cache.width && horizontal && cache.time === _ticker.time && !cache.uncache) {\n    return _round(curValue / cache.width * amount);\n  } else {\n    (toPercent || curUnit === \"%\") && !_nonStandardLayouts[_getComputedProperty(parent, \"display\")] && (style.position = _getComputedProperty(target, \"position\"));\n    parent === target && (style.position = \"static\"); // like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.\n\n    parent.appendChild(_tempDiv);\n    px = _tempDiv[measureProperty];\n    parent.removeChild(_tempDiv);\n    style.position = \"absolute\";\n\n    if (horizontal && toPercent) {\n      cache = _getCache(parent);\n      cache.time = _ticker.time;\n      cache.width = parent[measureProperty];\n    }\n  }\n\n  return _round(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);\n},\n    _get = function _get(target, property, unit, uncache) {\n  var value;\n  _pluginInitted || _initCore();\n\n  if (property in _propertyAliases && property !== \"transform\") {\n    property = _propertyAliases[property];\n\n    if (~property.indexOf(\",\")) {\n      property = property.split(\",\")[0];\n    }\n  }\n\n  if (_transformProps[property] && property !== \"transform\") {\n    value = _parseTransform(target, uncache);\n    value = property !== \"transformOrigin\" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + \" \" + value.zOrigin + \"px\";\n  } else {\n    value = target.style[property];\n\n    if (!value || value === \"auto\" || uncache || ~(value + \"\").indexOf(\"calc(\")) {\n      value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || _getProperty(target, property) || (property === \"opacity\" ? 1 : 0); // note: some browsers, like Firefox, don't report borderRadius correctly! Instead, it only reports every corner like  borderTopLeftRadius\n    }\n  }\n\n  return unit && !~(value + \"\").trim().indexOf(\" \") ? _convertToUnit(target, property, value, unit) + unit : value;\n},\n    _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {\n  // note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus \"this\" would refer to the plugin.\n  if (!start || start === \"none\") {\n    // some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style (\"clipPath\" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as \"none\" whereas WebkitClipPath reports accurately like \"ellipse(100% 0% at 50% 0%)\", so in this case we must SWITCH to using the prefixed property instead. See https://greensock.com/forums/topic/18310-clippath-doesnt-work-on-ios/\n    var p = _checkPropPrefix(prop, target, 1),\n        s = p && _getComputedProperty(target, p, 1);\n\n    if (s && s !== start) {\n      prop = p;\n      start = s;\n    } else if (prop === \"borderColor\") {\n      start = _getComputedProperty(target, \"borderTopColor\"); // Firefox bug: always reports \"borderColor\" as \"\", so we must fall back to borderTopColor. See https://greensock.com/forums/topic/24583-how-to-return-colors-that-i-had-after-reverse/\n    }\n  }\n\n  var pt = new PropTween(this._pt, target.style, prop, 0, 1, _renderComplexString),\n      index = 0,\n      matchIndex = 0,\n      a,\n      result,\n      startValues,\n      startNum,\n      color,\n      startValue,\n      endValue,\n      endNum,\n      chunk,\n      endUnit,\n      startUnit,\n      endValues;\n  pt.b = start;\n  pt.e = end;\n  start += \"\"; // ensure values are strings\n\n  end += \"\";\n\n  if (end === \"auto\") {\n    target.style[prop] = end;\n    end = _getComputedProperty(target, prop) || end;\n    target.style[prop] = start;\n  }\n\n  a = [start, end];\n\n  _colorStringFilter(a); // pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().\n\n\n  start = a[0];\n  end = a[1];\n  startValues = start.match(_numWithUnitExp) || [];\n  endValues = end.match(_numWithUnitExp) || [];\n\n  if (endValues.length) {\n    while (result = _numWithUnitExp.exec(end)) {\n      endValue = result[0];\n      chunk = end.substring(index, result.index);\n\n      if (color) {\n        color = (color + 1) % 5;\n      } else if (chunk.substr(-5) === \"rgba(\" || chunk.substr(-5) === \"hsla(\") {\n        color = 1;\n      }\n\n      if (endValue !== (startValue = startValues[matchIndex++] || \"\")) {\n        startNum = parseFloat(startValue) || 0;\n        startUnit = startValue.substr((startNum + \"\").length);\n        endValue.charAt(1) === \"=\" && (endValue = _parseRelative(startNum, endValue) + startUnit);\n        endNum = parseFloat(endValue);\n        endUnit = endValue.substr((endNum + \"\").length);\n        index = _numWithUnitExp.lastIndex - endUnit.length;\n\n        if (!endUnit) {\n          //if something like \"perspective:300\" is passed in and we must add a unit to the end\n          endUnit = endUnit || _config.units[prop] || startUnit;\n\n          if (index === end.length) {\n            end += endUnit;\n            pt.e += endUnit;\n          }\n        }\n\n        if (startUnit !== endUnit) {\n          startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;\n        } // these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.\n\n\n        pt._pt = {\n          _next: pt._pt,\n          p: chunk || matchIndex === 1 ? chunk : \",\",\n          //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.\n          s: startNum,\n          c: endNum - startNum,\n          m: color && color < 4 || prop === \"zIndex\" ? Math.round : 0\n        };\n      }\n    }\n\n    pt.c = index < end.length ? end.substring(index, end.length) : \"\"; //we use the \"c\" of the PropTween to store the final part of the string (after the last number)\n  } else {\n    pt.r = prop === \"display\" && end === \"none\" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;\n  }\n\n  _relExp.test(end) && (pt.e = 0); //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).\n\n  this._pt = pt; //start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus \"this\" would refer to the plugin.\n\n  return pt;\n},\n    _keywordToPercent = {\n  top: \"0%\",\n  bottom: \"100%\",\n  left: \"0%\",\n  right: \"100%\",\n  center: \"50%\"\n},\n    _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {\n  var split = value.split(\" \"),\n      x = split[0],\n      y = split[1] || \"50%\";\n\n  if (x === \"top\" || x === \"bottom\" || y === \"left\" || y === \"right\") {\n    //the user provided them in the wrong order, so flip them\n    value = x;\n    x = y;\n    y = value;\n  }\n\n  split[0] = _keywordToPercent[x] || x;\n  split[1] = _keywordToPercent[y] || y;\n  return split.join(\" \");\n},\n    _renderClearProps = function _renderClearProps(ratio, data) {\n  if (data.tween && data.tween._time === data.tween._dur) {\n    var target = data.t,\n        style = target.style,\n        props = data.u,\n        cache = target._gsap,\n        prop,\n        clearTransforms,\n        i;\n\n    if (props === \"all\" || props === true) {\n      style.cssText = \"\";\n      clearTransforms = 1;\n    } else {\n      props = props.split(\",\");\n      i = props.length;\n\n      while (--i > -1) {\n        prop = props[i];\n\n        if (_transformProps[prop]) {\n          clearTransforms = 1;\n          prop = prop === \"transformOrigin\" ? _transformOriginProp : _transformProp;\n        }\n\n        _removeProperty(target, prop);\n      }\n    }\n\n    if (clearTransforms) {\n      _removeProperty(target, _transformProp);\n\n      if (cache) {\n        cache.svg && target.removeAttribute(\"transform\");\n\n        _parseTransform(target, 1); // force all the cached values back to \"normal\"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.\n\n\n        cache.uncache = 1;\n\n        _removeIndependentTransforms(style);\n      }\n    }\n  }\n},\n    // note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.\n_specialProps = {\n  clearProps: function clearProps(plugin, target, property, endValue, tween) {\n    if (tween.data !== \"isFromStart\") {\n      var pt = plugin._pt = new PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);\n      pt.u = endValue;\n      pt.pr = -10;\n      pt.tween = tween;\n\n      plugin._props.push(property);\n\n      return 1;\n    }\n  }\n  /* className feature (about 0.4kb gzipped).\n  , className(plugin, target, property, endValue, tween) {\n  \tlet _renderClassName = (ratio, data) => {\n  \t\t\tdata.css.render(ratio, data.css);\n  \t\t\tif (!ratio || ratio === 1) {\n  \t\t\t\tlet inline = data.rmv,\n  \t\t\t\t\ttarget = data.t,\n  \t\t\t\t\tp;\n  \t\t\t\ttarget.setAttribute(\"class\", ratio ? data.e : data.b);\n  \t\t\t\tfor (p in inline) {\n  \t\t\t\t\t_removeProperty(target, p);\n  \t\t\t\t}\n  \t\t\t}\n  \t\t},\n  \t\t_getAllStyles = (target) => {\n  \t\t\tlet styles = {},\n  \t\t\t\tcomputed = getComputedStyle(target),\n  \t\t\t\tp;\n  \t\t\tfor (p in computed) {\n  \t\t\t\tif (isNaN(p) && p !== \"cssText\" && p !== \"length\") {\n  \t\t\t\t\tstyles[p] = computed[p];\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\t_setDefaults(styles, _parseTransform(target, 1));\n  \t\t\treturn styles;\n  \t\t},\n  \t\tstartClassList = target.getAttribute(\"class\"),\n  \t\tstyle = target.style,\n  \t\tcssText = style.cssText,\n  \t\tcache = target._gsap,\n  \t\tclassPT = cache.classPT,\n  \t\tinlineToRemoveAtEnd = {},\n  \t\tdata = {t:target, plugin:plugin, rmv:inlineToRemoveAtEnd, b:startClassList, e:(endValue.charAt(1) !== \"=\") ? endValue : startClassList.replace(new RegExp(\"(?:\\\\s|^)\" + endValue.substr(2) + \"(?![\\\\w-])\"), \"\") + ((endValue.charAt(0) === \"+\") ? \" \" + endValue.substr(2) : \"\")},\n  \t\tchangingVars = {},\n  \t\tstartVars = _getAllStyles(target),\n  \t\ttransformRelated = /(transform|perspective)/i,\n  \t\tendVars, p;\n  \tif (classPT) {\n  \t\tclassPT.r(1, classPT.d);\n  \t\t_removeLinkedListItem(classPT.d.plugin, classPT, \"_pt\");\n  \t}\n  \ttarget.setAttribute(\"class\", data.e);\n  \tendVars = _getAllStyles(target, true);\n  \ttarget.setAttribute(\"class\", startClassList);\n  \tfor (p in endVars) {\n  \t\tif (endVars[p] !== startVars[p] && !transformRelated.test(p)) {\n  \t\t\tchangingVars[p] = endVars[p];\n  \t\t\tif (!style[p] && style[p] !== \"0\") {\n  \t\t\t\tinlineToRemoveAtEnd[p] = 1;\n  \t\t\t}\n  \t\t}\n  \t}\n  \tcache.classPT = plugin._pt = new PropTween(plugin._pt, target, \"className\", 0, 0, _renderClassName, data, 0, -11);\n  \tif (style.cssText !== cssText) { //only apply if things change. Otherwise, in cases like a background-image that's pulled dynamically, it could cause a refresh. See https://greensock.com/forums/topic/20368-possible-gsap-bug-switching-classnames-in-chrome/.\n  \t\tstyle.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).\n  \t}\n  \t_parseTransform(target, true); //to clear the caching of transforms\n  \tdata.css = new gsap.plugins.css();\n  \tdata.css.init(target, changingVars, tween);\n  \tplugin._props.push(...data.css._props);\n  \treturn 1;\n  }\n  */\n\n},\n\n/*\n * --------------------------------------------------------------------------------------\n * TRANSFORMS\n * --------------------------------------------------------------------------------------\n */\n_identity2DMatrix = [1, 0, 0, 1, 0, 0],\n    _rotationalProperties = {},\n    _isNullTransform = function _isNullTransform(value) {\n  return value === \"matrix(1, 0, 0, 1, 0, 0)\" || value === \"none\" || !value;\n},\n    _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {\n  var matrixString = _getComputedProperty(target, _transformProp);\n\n  return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_numExp).map(_round);\n},\n    _getMatrix = function _getMatrix(target, force2D) {\n  var cache = target._gsap || _getCache(target),\n      style = target.style,\n      matrix = _getComputedTransformMatrixAsArray(target),\n      parent,\n      nextSibling,\n      temp,\n      addedToDOM;\n\n  if (cache.svg && target.getAttribute(\"transform\")) {\n    temp = target.transform.baseVal.consolidate().matrix; //ensures that even complex values like \"translate(50,60) rotate(135,0,0)\" are parsed because it mashes it into a matrix.\n\n    matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];\n    return matrix.join(\",\") === \"1,0,0,1,0,0\" ? _identity2DMatrix : matrix;\n  } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {\n    //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not \"none\". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).\n    temp = style.display;\n    style.display = \"block\";\n    parent = target.parentNode;\n\n    if (!parent || !target.offsetParent) {\n      // note: in 3.3.0 we switched target.offsetParent to _doc.body.contains(target) to avoid [sometimes unnecessary] MutationObserver calls but that wasn't adequate because there are edge cases where nested position: fixed elements need to get reparented to accurately sense transforms. See https://github.com/greensock/GSAP/issues/388 and https://github.com/greensock/GSAP/issues/375\n      addedToDOM = 1; //flag\n\n      nextSibling = target.nextElementSibling;\n\n      _docElement.appendChild(target); //we must add it to the DOM in order to get values properly\n\n    }\n\n    matrix = _getComputedTransformMatrixAsArray(target);\n    temp ? style.display = temp : _removeProperty(target, \"display\");\n\n    if (addedToDOM) {\n      nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);\n    }\n  }\n\n  return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;\n},\n    _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {\n  var cache = target._gsap,\n      matrix = matrixArray || _getMatrix(target, true),\n      xOriginOld = cache.xOrigin || 0,\n      yOriginOld = cache.yOrigin || 0,\n      xOffsetOld = cache.xOffset || 0,\n      yOffsetOld = cache.yOffset || 0,\n      a = matrix[0],\n      b = matrix[1],\n      c = matrix[2],\n      d = matrix[3],\n      tx = matrix[4],\n      ty = matrix[5],\n      originSplit = origin.split(\" \"),\n      xOrigin = parseFloat(originSplit[0]) || 0,\n      yOrigin = parseFloat(originSplit[1]) || 0,\n      bounds,\n      determinant,\n      x,\n      y;\n\n  if (!originIsAbsolute) {\n    bounds = _getBBox(target);\n    xOrigin = bounds.x + (~originSplit[0].indexOf(\"%\") ? xOrigin / 100 * bounds.width : xOrigin);\n    yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf(\"%\") ? yOrigin / 100 * bounds.height : yOrigin);\n  } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {\n    //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.\n    x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;\n    y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;\n    xOrigin = x;\n    yOrigin = y;\n  }\n\n  if (smooth || smooth !== false && cache.smooth) {\n    tx = xOrigin - xOriginOld;\n    ty = yOrigin - yOriginOld;\n    cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;\n    cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;\n  } else {\n    cache.xOffset = cache.yOffset = 0;\n  }\n\n  cache.xOrigin = xOrigin;\n  cache.yOrigin = yOrigin;\n  cache.smooth = !!smooth;\n  cache.origin = origin;\n  cache.originIsAbsolute = !!originIsAbsolute;\n  target.style[_transformOriginProp] = \"0px 0px\"; //otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).\n\n  if (pluginToAddPropTweensTo) {\n    _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"xOrigin\", xOriginOld, xOrigin);\n\n    _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"yOrigin\", yOriginOld, yOrigin);\n\n    _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"xOffset\", xOffsetOld, cache.xOffset);\n\n    _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"yOffset\", yOffsetOld, cache.yOffset);\n  }\n\n  target.setAttribute(\"data-svg-origin\", xOrigin + \" \" + yOrigin);\n},\n    _parseTransform = function _parseTransform(target, uncache) {\n  var cache = target._gsap || new GSCache(target);\n\n  if (\"x\" in cache && !uncache && !cache.uncache) {\n    return cache;\n  }\n\n  var style = target.style,\n      invertedScaleX = cache.scaleX < 0,\n      px = \"px\",\n      deg = \"deg\",\n      cs = getComputedStyle(target),\n      origin = _getComputedProperty(target, _transformOriginProp) || \"0\",\n      x,\n      y,\n      z,\n      scaleX,\n      scaleY,\n      rotation,\n      rotationX,\n      rotationY,\n      skewX,\n      skewY,\n      perspective,\n      xOrigin,\n      yOrigin,\n      matrix,\n      angle,\n      cos,\n      sin,\n      a,\n      b,\n      c,\n      d,\n      a12,\n      a22,\n      t1,\n      t2,\n      t3,\n      a13,\n      a23,\n      a33,\n      a42,\n      a43,\n      a32;\n  x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;\n  scaleX = scaleY = 1;\n  cache.svg = !!(target.getCTM && _isSVG(target));\n\n  if (cs.translate) {\n    // accommodate independent transforms by combining them into normal ones.\n    if (cs.translate !== \"none\" || cs.scale !== \"none\" || cs.rotate !== \"none\") {\n      style[_transformProp] = (cs.translate !== \"none\" ? \"translate3d(\" + (cs.translate + \" 0 0\").split(\" \").slice(0, 3).join(\", \") + \") \" : \"\") + (cs.rotate !== \"none\" ? \"rotate(\" + cs.rotate + \") \" : \"\") + (cs.scale !== \"none\" ? \"scale(\" + cs.scale.split(\" \").join(\",\") + \") \" : \"\") + (cs[_transformProp] !== \"none\" ? cs[_transformProp] : \"\");\n    }\n\n    style.scale = style.rotate = style.translate = \"none\";\n  }\n\n  matrix = _getMatrix(target, cache.svg);\n\n  if (cache.svg) {\n    if (cache.uncache) {\n      // if cache.uncache is true (and maybe if origin is 0,0), we need to set element.style.transformOrigin = (cache.xOrigin - bbox.x) + \"px \" + (cache.yOrigin - bbox.y) + \"px\". Previously we let the data-svg-origin stay instead, but when introducing revert(), it complicated things.\n      t2 = target.getBBox();\n      origin = cache.xOrigin - t2.x + \"px \" + (cache.yOrigin - t2.y) + \"px\";\n      t1 = \"\";\n    } else {\n      t1 = !uncache && target.getAttribute(\"data-svg-origin\"); //  Remember, to work around browser inconsistencies we always force SVG elements' transformOrigin to 0,0 and offset the translation accordingly.\n    }\n\n    _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);\n  }\n\n  xOrigin = cache.xOrigin || 0;\n  yOrigin = cache.yOrigin || 0;\n\n  if (matrix !== _identity2DMatrix) {\n    a = matrix[0]; //a11\n\n    b = matrix[1]; //a21\n\n    c = matrix[2]; //a31\n\n    d = matrix[3]; //a41\n\n    x = a12 = matrix[4];\n    y = a22 = matrix[5]; //2D matrix\n\n    if (matrix.length === 6) {\n      scaleX = Math.sqrt(a * a + b * b);\n      scaleY = Math.sqrt(d * d + c * c);\n      rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).\n\n      skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;\n      skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));\n\n      if (cache.svg) {\n        x -= xOrigin - (xOrigin * a + yOrigin * c);\n        y -= yOrigin - (xOrigin * b + yOrigin * d);\n      } //3D matrix\n\n    } else {\n      a32 = matrix[6];\n      a42 = matrix[7];\n      a13 = matrix[8];\n      a23 = matrix[9];\n      a33 = matrix[10];\n      a43 = matrix[11];\n      x = matrix[12];\n      y = matrix[13];\n      z = matrix[14];\n      angle = _atan2(a32, a33);\n      rotationX = angle * _RAD2DEG; //rotationX\n\n      if (angle) {\n        cos = Math.cos(-angle);\n        sin = Math.sin(-angle);\n        t1 = a12 * cos + a13 * sin;\n        t2 = a22 * cos + a23 * sin;\n        t3 = a32 * cos + a33 * sin;\n        a13 = a12 * -sin + a13 * cos;\n        a23 = a22 * -sin + a23 * cos;\n        a33 = a32 * -sin + a33 * cos;\n        a43 = a42 * -sin + a43 * cos;\n        a12 = t1;\n        a22 = t2;\n        a32 = t3;\n      } //rotationY\n\n\n      angle = _atan2(-c, a33);\n      rotationY = angle * _RAD2DEG;\n\n      if (angle) {\n        cos = Math.cos(-angle);\n        sin = Math.sin(-angle);\n        t1 = a * cos - a13 * sin;\n        t2 = b * cos - a23 * sin;\n        t3 = c * cos - a33 * sin;\n        a43 = d * sin + a43 * cos;\n        a = t1;\n        b = t2;\n        c = t3;\n      } //rotationZ\n\n\n      angle = _atan2(b, a);\n      rotation = angle * _RAD2DEG;\n\n      if (angle) {\n        cos = Math.cos(angle);\n        sin = Math.sin(angle);\n        t1 = a * cos + b * sin;\n        t2 = a12 * cos + a22 * sin;\n        b = b * cos - a * sin;\n        a22 = a22 * cos - a12 * sin;\n        a = t1;\n        a12 = t2;\n      }\n\n      if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {\n        //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.\n        rotationX = rotation = 0;\n        rotationY = 180 - rotationY;\n      }\n\n      scaleX = _round(Math.sqrt(a * a + b * b + c * c));\n      scaleY = _round(Math.sqrt(a22 * a22 + a32 * a32));\n      angle = _atan2(a12, a22);\n      skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;\n      perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;\n    }\n\n    if (cache.svg) {\n      //sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).\n      t1 = target.getAttribute(\"transform\");\n      cache.forceCSS = target.setAttribute(\"transform\", \"\") || !_isNullTransform(_getComputedProperty(target, _transformProp));\n      t1 && target.setAttribute(\"transform\", t1);\n    }\n  }\n\n  if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {\n    if (invertedScaleX) {\n      scaleX *= -1;\n      skewX += rotation <= 0 ? 180 : -180;\n      rotation += rotation <= 0 ? 180 : -180;\n    } else {\n      scaleY *= -1;\n      skewX += skewX <= 0 ? 180 : -180;\n    }\n  }\n\n  uncache = uncache || cache.uncache;\n  cache.x = x - ((cache.xPercent = x && (!uncache && cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;\n  cache.y = y - ((cache.yPercent = y && (!uncache && cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;\n  cache.z = z + px;\n  cache.scaleX = _round(scaleX);\n  cache.scaleY = _round(scaleY);\n  cache.rotation = _round(rotation) + deg;\n  cache.rotationX = _round(rotationX) + deg;\n  cache.rotationY = _round(rotationY) + deg;\n  cache.skewX = skewX + deg;\n  cache.skewY = skewY + deg;\n  cache.transformPerspective = perspective + px;\n\n  if (cache.zOrigin = parseFloat(origin.split(\" \")[2]) || 0) {\n    style[_transformOriginProp] = _firstTwoOnly(origin);\n  }\n\n  cache.xOffset = cache.yOffset = 0;\n  cache.force3D = _config.force3D;\n  cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;\n  cache.uncache = 0;\n  return cache;\n},\n    _firstTwoOnly = function _firstTwoOnly(value) {\n  return (value = value.split(\" \"))[0] + \" \" + value[1];\n},\n    //for handling transformOrigin values, stripping out the 3rd dimension\n_addPxTranslate = function _addPxTranslate(target, start, value) {\n  var unit = getUnit(start);\n  return _round(parseFloat(start) + parseFloat(_convertToUnit(target, \"x\", value + \"px\", unit))) + unit;\n},\n    _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {\n  cache.z = \"0px\";\n  cache.rotationY = cache.rotationX = \"0deg\";\n  cache.force3D = 0;\n\n  _renderCSSTransforms(ratio, cache);\n},\n    _zeroDeg = \"0deg\",\n    _zeroPx = \"0px\",\n    _endParenthesis = \") \",\n    _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {\n  var _ref = cache || this,\n      xPercent = _ref.xPercent,\n      yPercent = _ref.yPercent,\n      x = _ref.x,\n      y = _ref.y,\n      z = _ref.z,\n      rotation = _ref.rotation,\n      rotationY = _ref.rotationY,\n      rotationX = _ref.rotationX,\n      skewX = _ref.skewX,\n      skewY = _ref.skewY,\n      scaleX = _ref.scaleX,\n      scaleY = _ref.scaleY,\n      transformPerspective = _ref.transformPerspective,\n      force3D = _ref.force3D,\n      target = _ref.target,\n      zOrigin = _ref.zOrigin,\n      transforms = \"\",\n      use3D = force3D === \"auto\" && ratio && ratio !== 1 || force3D === true; // Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)\n\n\n  if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {\n    var angle = parseFloat(rotationY) * _DEG2RAD,\n        a13 = Math.sin(angle),\n        a33 = Math.cos(angle),\n        cos;\n\n    angle = parseFloat(rotationX) * _DEG2RAD;\n    cos = Math.cos(angle);\n    x = _addPxTranslate(target, x, a13 * cos * -zOrigin);\n    y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);\n    z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);\n  }\n\n  if (transformPerspective !== _zeroPx) {\n    transforms += \"perspective(\" + transformPerspective + _endParenthesis;\n  }\n\n  if (xPercent || yPercent) {\n    transforms += \"translate(\" + xPercent + \"%, \" + yPercent + \"%) \";\n  }\n\n  if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {\n    transforms += z !== _zeroPx || use3D ? \"translate3d(\" + x + \", \" + y + \", \" + z + \") \" : \"translate(\" + x + \", \" + y + _endParenthesis;\n  }\n\n  if (rotation !== _zeroDeg) {\n    transforms += \"rotate(\" + rotation + _endParenthesis;\n  }\n\n  if (rotationY !== _zeroDeg) {\n    transforms += \"rotateY(\" + rotationY + _endParenthesis;\n  }\n\n  if (rotationX !== _zeroDeg) {\n    transforms += \"rotateX(\" + rotationX + _endParenthesis;\n  }\n\n  if (skewX !== _zeroDeg || skewY !== _zeroDeg) {\n    transforms += \"skew(\" + skewX + \", \" + skewY + _endParenthesis;\n  }\n\n  if (scaleX !== 1 || scaleY !== 1) {\n    transforms += \"scale(\" + scaleX + \", \" + scaleY + _endParenthesis;\n  }\n\n  target.style[_transformProp] = transforms || \"translate(0, 0)\";\n},\n    _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {\n  var _ref2 = cache || this,\n      xPercent = _ref2.xPercent,\n      yPercent = _ref2.yPercent,\n      x = _ref2.x,\n      y = _ref2.y,\n      rotation = _ref2.rotation,\n      skewX = _ref2.skewX,\n      skewY = _ref2.skewY,\n      scaleX = _ref2.scaleX,\n      scaleY = _ref2.scaleY,\n      target = _ref2.target,\n      xOrigin = _ref2.xOrigin,\n      yOrigin = _ref2.yOrigin,\n      xOffset = _ref2.xOffset,\n      yOffset = _ref2.yOffset,\n      forceCSS = _ref2.forceCSS,\n      tx = parseFloat(x),\n      ty = parseFloat(y),\n      a11,\n      a21,\n      a12,\n      a22,\n      temp;\n\n  rotation = parseFloat(rotation);\n  skewX = parseFloat(skewX);\n  skewY = parseFloat(skewY);\n\n  if (skewY) {\n    //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.\n    skewY = parseFloat(skewY);\n    skewX += skewY;\n    rotation += skewY;\n  }\n\n  if (rotation || skewX) {\n    rotation *= _DEG2RAD;\n    skewX *= _DEG2RAD;\n    a11 = Math.cos(rotation) * scaleX;\n    a21 = Math.sin(rotation) * scaleX;\n    a12 = Math.sin(rotation - skewX) * -scaleY;\n    a22 = Math.cos(rotation - skewX) * scaleY;\n\n    if (skewX) {\n      skewY *= _DEG2RAD;\n      temp = Math.tan(skewX - skewY);\n      temp = Math.sqrt(1 + temp * temp);\n      a12 *= temp;\n      a22 *= temp;\n\n      if (skewY) {\n        temp = Math.tan(skewY);\n        temp = Math.sqrt(1 + temp * temp);\n        a11 *= temp;\n        a21 *= temp;\n      }\n    }\n\n    a11 = _round(a11);\n    a21 = _round(a21);\n    a12 = _round(a12);\n    a22 = _round(a22);\n  } else {\n    a11 = scaleX;\n    a22 = scaleY;\n    a21 = a12 = 0;\n  }\n\n  if (tx && !~(x + \"\").indexOf(\"px\") || ty && !~(y + \"\").indexOf(\"px\")) {\n    tx = _convertToUnit(target, \"x\", x, \"px\");\n    ty = _convertToUnit(target, \"y\", y, \"px\");\n  }\n\n  if (xOrigin || yOrigin || xOffset || yOffset) {\n    tx = _round(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);\n    ty = _round(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);\n  }\n\n  if (xPercent || yPercent) {\n    //The SVG spec doesn't support percentage-based translation in the \"transform\" attribute, so we merge it into the translation to simulate it.\n    temp = target.getBBox();\n    tx = _round(tx + xPercent / 100 * temp.width);\n    ty = _round(ty + yPercent / 100 * temp.height);\n  }\n\n  temp = \"matrix(\" + a11 + \",\" + a21 + \",\" + a12 + \",\" + a22 + \",\" + tx + \",\" + ty + \")\";\n  target.setAttribute(\"transform\", temp);\n  forceCSS && (target.style[_transformProp] = temp); //some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the transform attribute changes!)\n},\n    _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue) {\n  var cap = 360,\n      isString = _isString(endValue),\n      endNum = parseFloat(endValue) * (isString && ~endValue.indexOf(\"rad\") ? _RAD2DEG : 1),\n      change = endNum - startNum,\n      finalValue = startNum + change + \"deg\",\n      direction,\n      pt;\n\n  if (isString) {\n    direction = endValue.split(\"_\")[1];\n\n    if (direction === \"short\") {\n      change %= cap;\n\n      if (change !== change % (cap / 2)) {\n        change += change < 0 ? cap : -cap;\n      }\n    }\n\n    if (direction === \"cw\" && change < 0) {\n      change = (change + cap * _bigNum) % cap - ~~(change / cap) * cap;\n    } else if (direction === \"ccw\" && change > 0) {\n      change = (change - cap * _bigNum) % cap - ~~(change / cap) * cap;\n    }\n  }\n\n  plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);\n  pt.e = finalValue;\n  pt.u = \"deg\";\n\n  plugin._props.push(property);\n\n  return pt;\n},\n    _assign = function _assign(target, source) {\n  // Internet Explorer doesn't have Object.assign(), so we recreate it here.\n  for (var p in source) {\n    target[p] = source[p];\n  }\n\n  return target;\n},\n    _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {\n  //for handling cases where someone passes in a whole transform string, like transform: \"scale(2, 3) rotate(20deg) translateY(30em)\"\n  var startCache = _assign({}, target._gsap),\n      exclude = \"perspective,force3D,transformOrigin,svgOrigin\",\n      style = target.style,\n      endCache,\n      p,\n      startValue,\n      endValue,\n      startNum,\n      endNum,\n      startUnit,\n      endUnit;\n\n  if (startCache.svg) {\n    startValue = target.getAttribute(\"transform\");\n    target.setAttribute(\"transform\", \"\");\n    style[_transformProp] = transforms;\n    endCache = _parseTransform(target, 1);\n\n    _removeProperty(target, _transformProp);\n\n    target.setAttribute(\"transform\", startValue);\n  } else {\n    startValue = getComputedStyle(target)[_transformProp];\n    style[_transformProp] = transforms;\n    endCache = _parseTransform(target, 1);\n    style[_transformProp] = startValue;\n  }\n\n  for (p in _transformProps) {\n    startValue = startCache[p];\n    endValue = endCache[p];\n\n    if (startValue !== endValue && exclude.indexOf(p) < 0) {\n      //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.\n      startUnit = getUnit(startValue);\n      endUnit = getUnit(endValue);\n      startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);\n      endNum = parseFloat(endValue);\n      plugin._pt = new PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);\n      plugin._pt.u = endUnit || 0;\n\n      plugin._props.push(p);\n    }\n  }\n\n  _assign(endCache, startCache);\n}; // handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.\n\n\n_forEachName(\"padding,margin,Width,Radius\", function (name, index) {\n  var t = \"Top\",\n      r = \"Right\",\n      b = \"Bottom\",\n      l = \"Left\",\n      props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {\n    return index < 2 ? name + side : \"border\" + side + name;\n  });\n\n  _specialProps[index > 1 ? \"border\" + name : name] = function (plugin, target, property, endValue, tween) {\n    var a, vars;\n\n    if (arguments.length < 4) {\n      // getter, passed target, property, and unit (from _get())\n      a = props.map(function (prop) {\n        return _get(plugin, prop, property);\n      });\n      vars = a.join(\" \");\n      return vars.split(a[0]).length === 5 ? a[0] : vars;\n    }\n\n    a = (endValue + \"\").split(\" \");\n    vars = {};\n    props.forEach(function (prop, i) {\n      return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];\n    });\n    plugin.init(target, vars, tween);\n  };\n});\n\nexport var CSSPlugin = {\n  name: \"css\",\n  register: _initCore,\n  targetTest: function targetTest(target) {\n    return target.style && target.nodeType;\n  },\n  init: function init(target, vars, tween, index, targets) {\n    var props = this._props,\n        style = target.style,\n        startAt = tween.vars.startAt,\n        startValue,\n        endValue,\n        endNum,\n        startNum,\n        type,\n        specialProp,\n        p,\n        startUnit,\n        endUnit,\n        relative,\n        isTransformRelated,\n        transformPropTween,\n        cache,\n        smooth,\n        hasPriority,\n        inlineProps;\n    _pluginInitted || _initCore(); // we may call init() multiple times on the same plugin instance, like when adding special properties, so make sure we don't overwrite the revert data or inlineProps\n\n    this.styles = this.styles || _getStyleSaver(target);\n    inlineProps = this.styles.props;\n    this.tween = tween;\n\n    for (p in vars) {\n      if (p === \"autoRound\") {\n        continue;\n      }\n\n      endValue = vars[p];\n\n      if (_plugins[p] && _checkPlugin(p, vars, tween, index, target, targets)) {\n        // plugins\n        continue;\n      }\n\n      type = typeof endValue;\n      specialProp = _specialProps[p];\n\n      if (type === \"function\") {\n        endValue = endValue.call(tween, index, target, targets);\n        type = typeof endValue;\n      }\n\n      if (type === \"string\" && ~endValue.indexOf(\"random(\")) {\n        endValue = _replaceRandom(endValue);\n      }\n\n      if (specialProp) {\n        specialProp(this, target, p, endValue, tween) && (hasPriority = 1);\n      } else if (p.substr(0, 2) === \"--\") {\n        //CSS variable\n        startValue = (getComputedStyle(target).getPropertyValue(p) + \"\").trim();\n        endValue += \"\";\n        _colorExp.lastIndex = 0;\n\n        if (!_colorExp.test(startValue)) {\n          // colors don't have units\n          startUnit = getUnit(startValue);\n          endUnit = getUnit(endValue);\n        }\n\n        endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);\n        this.add(style, \"setProperty\", startValue, endValue, index, targets, 0, 0, p);\n        props.push(p);\n        inlineProps.push(p, 0, style[p]);\n      } else if (type !== \"undefined\") {\n        if (startAt && p in startAt) {\n          // in case someone hard-codes a complex value as the start, like top: \"calc(2vh / 2)\". Without this, it'd use the computed value (always in px)\n          startValue = typeof startAt[p] === \"function\" ? startAt[p].call(tween, index, target, targets) : startAt[p];\n          _isString(startValue) && ~startValue.indexOf(\"random(\") && (startValue = _replaceRandom(startValue));\n          getUnit(startValue + \"\") || (startValue += _config.units[p] || getUnit(_get(target, p)) || \"\"); // for cases when someone passes in a unitless value like {x: 100}; if we try setting translate(100, 0px) it won't work.\n\n          (startValue + \"\").charAt(1) === \"=\" && (startValue = _get(target, p)); // can't work with relative values\n        } else {\n          startValue = _get(target, p);\n        }\n\n        startNum = parseFloat(startValue);\n        relative = type === \"string\" && endValue.charAt(1) === \"=\" && endValue.substr(0, 2);\n        relative && (endValue = endValue.substr(2));\n        endNum = parseFloat(endValue);\n\n        if (p in _propertyAliases) {\n          if (p === \"autoAlpha\") {\n            //special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.\n            if (startNum === 1 && _get(target, \"visibility\") === \"hidden\" && endNum) {\n              //if visibility is initially set to \"hidden\", we should interpret that as intent to make opacity 0 (a convenience)\n              startNum = 0;\n            }\n\n            inlineProps.push(\"visibility\", 0, style.visibility);\n\n            _addNonTweeningPT(this, style, \"visibility\", startNum ? \"inherit\" : \"hidden\", endNum ? \"inherit\" : \"hidden\", !endNum);\n          }\n\n          if (p !== \"scale\" && p !== \"transform\") {\n            p = _propertyAliases[p];\n            ~p.indexOf(\",\") && (p = p.split(\",\")[0]);\n          }\n        }\n\n        isTransformRelated = p in _transformProps; //--- TRANSFORM-RELATED ---\n\n        if (isTransformRelated) {\n          this.styles.save(p);\n\n          if (!transformPropTween) {\n            cache = target._gsap;\n            cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform); // if, for example, gsap.set(... {transform:\"translateX(50vw)\"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.\n\n            smooth = vars.smoothOrigin !== false && cache.smooth;\n            transformPropTween = this._pt = new PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1); //the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)\n\n            transformPropTween.dep = 1; //flag it as dependent so that if things get killed/overwritten and this is the only PropTween left, we can safely kill the whole tween.\n          }\n\n          if (p === \"scale\") {\n            this._pt = new PropTween(this._pt, cache, \"scaleY\", cache.scaleY, (relative ? _parseRelative(cache.scaleY, relative + endNum) : endNum) - cache.scaleY || 0, _renderCSSProp);\n            this._pt.u = 0;\n            props.push(\"scaleY\", p);\n            p += \"X\";\n          } else if (p === \"transformOrigin\") {\n            inlineProps.push(_transformOriginProp, 0, style[_transformOriginProp]);\n            endValue = _convertKeywordsToPercentages(endValue); //in case something like \"left top\" or \"bottom right\" is passed in. Convert to percentages.\n\n            if (cache.svg) {\n              _applySVGOrigin(target, endValue, 0, smooth, 0, this);\n            } else {\n              endUnit = parseFloat(endValue.split(\" \")[2]) || 0; //handle the zOrigin separately!\n\n              endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, \"zOrigin\", cache.zOrigin, endUnit);\n\n              _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));\n            }\n\n            continue;\n          } else if (p === \"svgOrigin\") {\n            _applySVGOrigin(target, endValue, 1, smooth, 0, this);\n\n            continue;\n          } else if (p in _rotationalProperties) {\n            _addRotationalPropTween(this, cache, p, startNum, relative ? _parseRelative(startNum, relative + endValue) : endValue);\n\n            continue;\n          } else if (p === \"smoothOrigin\") {\n            _addNonTweeningPT(this, cache, \"smooth\", cache.smooth, endValue);\n\n            continue;\n          } else if (p === \"force3D\") {\n            cache[p] = endValue;\n            continue;\n          } else if (p === \"transform\") {\n            _addRawTransformPTs(this, endValue, target);\n\n            continue;\n          }\n        } else if (!(p in style)) {\n          p = _checkPropPrefix(p) || p;\n        }\n\n        if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {\n          startUnit = (startValue + \"\").substr((startNum + \"\").length);\n          endNum || (endNum = 0); // protect against NaN\n\n          endUnit = getUnit(endValue) || (p in _config.units ? _config.units[p] : startUnit);\n          startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));\n          this._pt = new PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, (relative ? _parseRelative(startNum, relative + endNum) : endNum) - startNum, !isTransformRelated && (endUnit === \"px\" || p === \"zIndex\") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);\n          this._pt.u = endUnit || 0;\n\n          if (startUnit !== endUnit && endUnit !== \"%\") {\n            //when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a \"b\" (beginning) property and point to a render method that handles that. (performance optimization)\n            this._pt.b = startValue;\n            this._pt.r = _renderCSSPropWithBeginning;\n          }\n        } else if (!(p in style)) {\n          if (p in target) {\n            //maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.\n            this.add(target, p, startValue || target[p], relative ? relative + endValue : endValue, index, targets);\n          } else if (p !== \"parseTransform\") {\n            _missingPlugin(p, endValue);\n\n            continue;\n          }\n        } else {\n          _tweenComplexCSSString.call(this, target, p, startValue, relative ? relative + endValue : endValue);\n        }\n\n        isTransformRelated || (p in style ? inlineProps.push(p, 0, style[p]) : inlineProps.push(p, 1, startValue || target[p]));\n        props.push(p);\n      }\n    }\n\n    hasPriority && _sortPropTweensByPriority(this);\n  },\n  render: function render(ratio, data) {\n    if (data.tween._time || !_reverting()) {\n      var pt = data._pt;\n\n      while (pt) {\n        pt.r(ratio, pt.d);\n        pt = pt._next;\n      }\n    } else {\n      data.styles.revert();\n    }\n  },\n  get: _get,\n  aliases: _propertyAliases,\n  getSetter: function getSetter(target, property, plugin) {\n    //returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like \"x\" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.\n    var p = _propertyAliases[property];\n    p && p.indexOf(\",\") < 0 && (property = p);\n    return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, \"x\")) ? plugin && _recentSetterPlugin === plugin ? property === \"scale\" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === \"scale\" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !_isUndefined(target.style[property]) ? _setterCSSStyle : ~property.indexOf(\"-\") ? _setterCSSProp : _getSetter(target, property);\n  },\n  core: {\n    _removeProperty: _removeProperty,\n    _getMatrix: _getMatrix\n  }\n};\ngsap.utils.checkPrefix = _checkPropPrefix;\ngsap.core.getStyleSaver = _getStyleSaver;\n\n(function (positionAndScale, rotation, others, aliases) {\n  var all = _forEachName(positionAndScale + \",\" + rotation + \",\" + others, function (name) {\n    _transformProps[name] = 1;\n  });\n\n  _forEachName(rotation, function (name) {\n    _config.units[name] = \"deg\";\n    _rotationalProperties[name] = 1;\n  });\n\n  _propertyAliases[all[13]] = positionAndScale + \",\" + rotation;\n\n  _forEachName(aliases, function (name) {\n    var split = name.split(\":\");\n    _propertyAliases[split[1]] = all[split[0]];\n  });\n})(\"x,y,z,scale,scaleX,scaleY,xPercent,yPercent\", \"rotation,rotationX,rotationY,skewX,skewY\", \"transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective\", \"0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY\");\n\n_forEachName(\"x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective\", function (name) {\n  _config.units[name] = \"px\";\n});\n\ngsap.registerPlugin(CSSPlugin);\nexport { CSSPlugin as default, _getBBox, _createElement, _checkPropPrefix as checkPrefix };","import { gsap, Power0, Power1, Power2, Power3, Power4, Linear, Quad, Cubic, Quart, Quint, Strong, Elastic, Back, SteppedEase, Bounce, Sine, Expo, Circ, TweenLite, TimelineLite, TimelineMax } from \"./gsap-core.js\";\nimport { CSSPlugin } from \"./CSSPlugin.js\";\nvar gsapWithCSS = gsap.registerPlugin(CSSPlugin) || gsap,\n    // to protect from tree shaking\nTweenMaxWithCSS = gsapWithCSS.core.Tween;\nexport { gsapWithCSS as gsap, gsapWithCSS as default, CSSPlugin, TweenMaxWithCSS as TweenMax, TweenLite, TimelineMax, TimelineLite, Power0, Power1, Power2, Power3, Power4, Linear, Quad, Cubic, Quart, Quint, Strong, Elastic, Back, SteppedEase, Bounce, Sine, Expo, Circ };"],"names":["itemsList","title","route","imgUrl","easing","linear","t","easeInQuart","_ref","fromValue","toValue","onUpdate","onComplete","duration","easeMethod","startTime","performance","now","tick","elapsed","window","requestAnimationFrame","start","end","getValue","opacity","parallaxPos","scale","rotationPosition","urlKey","imgclass","setimgclass","useState","useEffect","React","className","style","transform","x","y","initialState","reducer","state","action","type","payload","Error","timeLineFunc","dispatch","useReducer","listItem","useRef","parallax","event","innerWidth","pageX","innerHeight","pageY","handleOpacity","initialOpacity","newOpacity","animate","callback","handleScale","initialScale","newScale","handleRotation","currentRotation","newRotation","Math","random","round","Image","ref","onMouseEnter","current","addEventListener","onMouseLeave","removeEventListener","onClick","navigate","nameTransparent","menuState","setmenuState","menuContainer","timelineSvg","useLayoutEffect","ctx","gsap","context","timeline","to","yPercent","skewY","ease","attr","d","from","stagger","amount","paused","revert","reversed","play","position","width","height","zIndex","fill","viewBox","preserveAspectRatio","id","map","item","key","Item","warningThrown","console","warn","args","Array","prototype","slice","call","arguments","apply","error","Scene","constructor","renderer","this","gl","initStacks","stacks","resetPlaneStacks","pingPong","renderTargets","opaque","transparent","i","planes","length","addPlane","resetShaderPassStacks","scenePasses","renderPasses","shaderPasses","index","_isScenePass","push","scenePassIndex","addToRenderTargetsStack","plane","renderTargetsPlanes","filter","el","target","uuid","siblingPlaneIndex","_depth","findIndex","max","splice","sort","a","b","renderOrder","addToRegularPlaneStack","planeStack","_transparent","_geometry","definition","relativeTranslation","z","removePlane","setPlaneRenderOrder","sortShaderPassStack","scenePassWithoutDepth","find","pass","depth","addShaderPass","shaderPass","removeShaderPass","passStack","enableShaderPass","bindFrameBuffer","drawRenderPasses","_startDrawing","clearDepth","drawScenePasses","drawPingPongStack","drawStack","stackType","draw","setBlending","CacheManager","geometries","clear","textures","programs","getGeometryFromID","definitionID","element","addGeometry","vertices","uvs","isSameShader","firstShader","secondShader","localeCompare","getProgramFromShaders","vsCode","fsCode","addProgram","program","getTextureFromSource","source","src","addTexture","texture","removeTexture","CallbackQueueManager","queue","add","keep","queueItem","timeout","setTimeout","execute","entry","clearTimeout","Renderer","alpha","antialias","premultipliedAlpha","failIfMajorPerformanceCaveat","preserveDrawingBuffer","stencil","container","pixelRatio","renderingScale","production","onError","onSuccess","onContextLost","onContextRestored","onDisposed","onSceneChange","_renderingScale","initState","canvas","document","createElement","glAttributes","getContext","_isWebGL2","isActive","initRenderer","isContextLost","drawingEnabled","forceRender","currentProgramID","currentGeometryID","forceBufferUpdate","depthTest","blending","cullFace","frameBufferID","activeTexture","unpackAlignment","flipY","premultiplyAlpha","initCallbackQueueManager","nextRender","maxTextureSize","getParameter","MAX_TEXTURE_SIZE","setBlendFunc","setDepthFunc","setDepthTest","cache","scene","getExtensions","_contextLostHandler","contextLost","bind","_contextRestoredHandler","contextRestored","extensions","getExtension","preventDefault","restoreContext","isContextexFullyRestored","isRestored","_canDraw","j","_restoreContext","isRestoredQueue","needRender","setPixelRatio","setSize","containerBoundingRect","getBoundingClientRect","_boundingRect","top","left","isSafari","navigator","userAgent","match","iOS","test","MSStream","getTopOffset","topOffset","isNaN","offsetTop","scrollTop","offsetParent","floor","viewport","drawingBufferWidth","drawingBufferHeight","resize","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","clearColor","frameBuffer","cancelClear","bufferId","bindFramebuffer","FRAMEBUFFER","_frameBuffer","_size","_shouldClear","enable","DEPTH_TEST","disable","depthFunc","LEQUAL","enableBlending","BLEND","blendFuncSeparate","ONE","ONE_MINUS_SRC_ALPHA","SRC_ALPHA","setFaceCulling","CULL_FACE","faceCulling","FRONT","BACK","useProgram","removeRenderTarget","renderTarget","hasPlane","enableDrawing","disableDrawing","render","deletePrograms","deleteProgram","dispose","disposeQueue","loseContext","removeChild","ScrollManager","xOffset","yOffset","lastXDelta","lastYDelta","shouldWatch","onScroll","handler","scroll","passive","updateScrollValues","pageXOffset","pageYOffset","lastScrollXValue","lastScrollYValue","replace","elements","Float32Array","setFromArray","array","copy","matrix","clone","multiply","result","getInverse","te","out","oe","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","vector","compose","translation","quaternion","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","sx","sy","sz","composeFromOrigin","origin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","_x","_y","value","changed","_onChangeCallback","onChange","set","addScalar","sub","subScalar","multiplyScalar","sanitizeNaNValuesWith","parseFloat","min","equals","normalize","len","sqrt","dot","_z","applyMat4","mArray","applyQuat","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","viewMatrix","projectionMatrix","unproject","worldMatrix","axisOrder","setAxisOrder","toUpperCase","setFromVec3","ax","ay","az","cosx","cos","cosy","cosz","sinx","sin","siny","sinz","autoResize","autoRender","watchScroll","devicePixelRatio","_autoResize","_autoRender","_watchScroll","errors","setContainer","getElementById","setAttribute","body","appendChild","Element","_initCurtains","_initRenderer","_initScroll","_setSize","_addListeners","log","_animationFrameID","_animate","_onRendererError","_onRendererSuccess","_onRendererContextLost","_onRendererContextRestored","_onRendererDisposed","_keepSync","isWebGL2","_onRenderCallback","_resizeHandler","triggerCallback","_scrollManager","getBoundingRect","_onAfterResizeCallback","_updateScroll","updateScrollPosition","_onScrollCallback","getScrollDeltas","getScrollValues","lerp","onAfterResize","_onErrorCallback","_onSuccessCallback","_onContextLostCallback","_onContextRestoredCallback","onRender","cancelAnimationFrame","children","app","animeTimeLine","clipPath","scrollContainer","skewConfigs","rounded","previous","skewScrolling","querySelector","scrollY","skew","screen","Menu","minWidth","maxWidth","_win","_doc","_docElement","_pluginInitted","_tempDiv","_recentSetterPlugin","_reverting","_supports3D","_transformProps","_RAD2DEG","PI","_DEG2RAD","_atan2","atan2","_capsExp","_horizontalExp","_complexExp","_propertyAliases","autoAlpha","_renderCSSProp","ratio","data","p","s","c","u","_renderPropWithEnd","e","_renderCSSPropWithBeginning","_renderRoundedCSSProp","_renderNonTweeningValue","_renderNonTweeningValueOnlyAtEnd","_setterCSSStyle","property","_setterCSSProp","setProperty","_setterTransform","_gsap","_setterScale","scaleX","scaleY","_setterScaleWithRender","renderTransform","_setterTransformWithRender","_transformProp","_transformOriginProp","_saveStyle","isNotCSS","_this","tfm","split","forEach","indexOf","_get","props","svg","svgo","getAttribute","_removeIndependentTransforms","translate","removeProperty","_revertStyle","substr","toLowerCase","isStart","uncache","_getStyleSaver","properties","saver","save","core","getCache","_createElement","ns","createElementNS","_getComputedProperty","skipPrefixFallback","cs","getComputedStyle","getPropertyValue","_checkPropPrefix","_prefixes","preferPrefix","charAt","_initCore","documentElement","cssText","reverting","_getBBoxHack","swapIfPossible","bbox","ownerSVGElement","oldParent","parentNode","oldSibling","nextSibling","oldCSS","display","getBBox","_gsapBBox","insertBefore","_getAttributeFallbacks","attributesArray","hasAttribute","_getBBox","bounds","_isSVG","getCTM","_removeProperty","removeAttribute","_addNonTweeningPT","plugin","beginning","onlySetAtEnd","pt","_pt","_props","_nonConvertibleUnits","deg","rad","turn","_nonStandardLayouts","grid","flex","_convertToUnit","unit","px","parent","isSVG","curValue","curUnit","trim","horizontal","isRootSVG","tagName","measureProperty","toPixels","toPercent","time","_parseTransform","_firstTwoOnly","zOrigin","_specialProps","_tweenComplexCSSString","prop","startValues","startNum","color","startValue","endValue","endNum","chunk","endUnit","startUnit","matchIndex","exec","substring","lastIndex","units","_next","m","r","_keywordToPercent","bottom","right","center","_renderClearProps","tween","_time","_dur","clearTransforms","clearProps","pr","_identity2DMatrix","_rotationalProperties","_isNullTransform","_getComputedTransformMatrixAsArray","matrixString","_getMatrix","force2D","temp","addedToDOM","baseVal","consolidate","f","join","nextElementSibling","_applySVGOrigin","originIsAbsolute","smooth","matrixArray","pluginToAddPropTweensTo","determinant","xOriginOld","xOrigin","yOriginOld","yOrigin","xOffsetOld","yOffsetOld","tx","ty","originSplit","rotation","rotationX","rotationY","skewX","perspective","angle","t1","t2","t3","a42","a43","invertedScaleX","rotate","abs","forceCSS","xPercent","offsetWidth","offsetHeight","transformPerspective","force3D","_renderSVGTransforms","_renderCSSTransforms","_renderNon3DTransforms","_addPxTranslate","_zeroDeg","_zeroPx","_endParenthesis","transforms","use3D","_ref2","tan","_addRotationalPropTween","direction","cap","isString","change","finalValue","_assign","_addRawTransformPTs","endCache","startCache","name","l","side","vars","init","positionAndScale","all","CSSPlugin","register","targetTest","nodeType","targets","specialProp","relative","isTransformRelated","transformPropTween","hasPriority","inlineProps","startAt","styles","visibility","parseTransform","smoothOrigin","dep","autoRound","get","aliases","getSetter","utils","checkPrefix","getStyleSaver","registerPlugin","gsapWithCSS","Tween"],"sourceRoot":""}